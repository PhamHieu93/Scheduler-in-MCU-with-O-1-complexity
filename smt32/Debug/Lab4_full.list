
Lab4_full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006510  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006620  08006620  00016620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006adc  08006adc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006adc  08006adc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae0  08006ae0  00016ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e0  08006cc4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006cc4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001185d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024da  00000000  00000000  00031a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00033f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00034d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019858  00000000  00000000  00035a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb7b  00000000  00000000  0004f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed21  00000000  00000000  0005edeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edb0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a84  00000000  00000000  000edb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006608 	.word	0x08006608

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006608 	.word	0x08006608

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fef5 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f8bb 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000a96:	f000 f947 	bl	8000d28 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000a9a:	f000 f9bb 	bl	8000e14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a9e:	f000 f905 	bl	8000cac <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000aa2:	f000 f98d 	bl	8000dc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000aa6:	484e      	ldr	r0, [pc, #312]	; (8000be0 <main+0x158>)
 8000aa8:	f002 f92a 	bl	8002d00 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000aac:	f000 fb80 	bl	80011b0 <SCH_Init>
  uint8_t task_index;

  task_index = SCH_Add_Task(dot_blinky, 150, 50);
 8000ab0:	2232      	movs	r2, #50	; 0x32
 8000ab2:	2196      	movs	r1, #150	; 0x96
 8000ab4:	484b      	ldr	r0, [pc, #300]	; (8000be4 <main+0x15c>)
 8000ab6:	f000 fbcd 	bl	8001254 <SCH_Add_Task>
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4949      	ldr	r1, [pc, #292]	; (8000be8 <main+0x160>)
 8000ac4:	4849      	ldr	r0, [pc, #292]	; (8000bec <main+0x164>)
 8000ac6:	f003 fc23 	bl	8004310 <siprintf>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	4946      	ldr	r1, [pc, #280]	; (8000bec <main+0x164>)
 8000ad2:	4847      	ldr	r0, [pc, #284]	; (8000bf0 <main+0x168>)
 8000ad4:	f002 fcf0 	bl	80034b8 <HAL_UART_Transmit>

  task_index = SCH_Add_Task(red_1, 200, 1200);
 8000ad8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000adc:	21c8      	movs	r1, #200	; 0xc8
 8000ade:	4845      	ldr	r0, [pc, #276]	; (8000bf4 <main+0x16c>)
 8000ae0:	f000 fbb8 	bl	8001254 <SCH_Add_Task>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	461a      	mov	r2, r3
 8000aec:	493e      	ldr	r1, [pc, #248]	; (8000be8 <main+0x160>)
 8000aee:	483f      	ldr	r0, [pc, #252]	; (8000bec <main+0x164>)
 8000af0:	f003 fc0e 	bl	8004310 <siprintf>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	493c      	ldr	r1, [pc, #240]	; (8000bec <main+0x164>)
 8000afc:	483c      	ldr	r0, [pc, #240]	; (8000bf0 <main+0x168>)
 8000afe:	f002 fcdb 	bl	80034b8 <HAL_UART_Transmit>

  task_index = SCH_Add_Task(green_1, 700, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000b08:	483b      	ldr	r0, [pc, #236]	; (8000bf8 <main+0x170>)
 8000b0a:	f000 fba3 	bl	8001254 <SCH_Add_Task>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4934      	ldr	r1, [pc, #208]	; (8000be8 <main+0x160>)
 8000b18:	4834      	ldr	r0, [pc, #208]	; (8000bec <main+0x164>)
 8000b1a:	f003 fbf9 	bl	8004310 <siprintf>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	4931      	ldr	r1, [pc, #196]	; (8000bec <main+0x164>)
 8000b26:	4832      	ldr	r0, [pc, #200]	; (8000bf0 <main+0x168>)
 8000b28:	f002 fcc6 	bl	80034b8 <HAL_UART_Transmit>

  task_index = SCH_Add_Task(yellow_1, 1000, 1200);
 8000b2c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b34:	4831      	ldr	r0, [pc, #196]	; (8000bfc <main+0x174>)
 8000b36:	f000 fb8d 	bl	8001254 <SCH_Add_Task>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4929      	ldr	r1, [pc, #164]	; (8000be8 <main+0x160>)
 8000b44:	4829      	ldr	r0, [pc, #164]	; (8000bec <main+0x164>)
 8000b46:	f003 fbe3 	bl	8004310 <siprintf>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	4926      	ldr	r1, [pc, #152]	; (8000bec <main+0x164>)
 8000b52:	4827      	ldr	r0, [pc, #156]	; (8000bf0 <main+0x168>)
 8000b54:	f002 fcb0 	bl	80034b8 <HAL_UART_Transmit>


  task_index = SCH_Add_Task(green_2, 200, 1200);
 8000b58:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b5c:	21c8      	movs	r1, #200	; 0xc8
 8000b5e:	4828      	ldr	r0, [pc, #160]	; (8000c00 <main+0x178>)
 8000b60:	f000 fb78 	bl	8001254 <SCH_Add_Task>
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	491e      	ldr	r1, [pc, #120]	; (8000be8 <main+0x160>)
 8000b6e:	481f      	ldr	r0, [pc, #124]	; (8000bec <main+0x164>)
 8000b70:	f003 fbce 	bl	8004310 <siprintf>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	491c      	ldr	r1, [pc, #112]	; (8000bec <main+0x164>)
 8000b7c:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <main+0x168>)
 8000b7e:	f002 fc9b 	bl	80034b8 <HAL_UART_Transmit>

  task_index = SCH_Add_Task(yellow_2, 500, 1200);
 8000b82:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b86:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <main+0x17c>)
 8000b8c:	f000 fb62 	bl	8001254 <SCH_Add_Task>
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4913      	ldr	r1, [pc, #76]	; (8000be8 <main+0x160>)
 8000b9a:	4814      	ldr	r0, [pc, #80]	; (8000bec <main+0x164>)
 8000b9c:	f003 fbb8 	bl	8004310 <siprintf>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	4911      	ldr	r1, [pc, #68]	; (8000bec <main+0x164>)
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <main+0x168>)
 8000baa:	f002 fc85 	bl	80034b8 <HAL_UART_Transmit>

  task_index = SCH_Add_Task(red_2, 700, 1200);
 8000bae:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000bb2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <main+0x180>)
 8000bb8:	f000 fb4c 	bl	8001254 <SCH_Add_Task>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "Task %d is added \r\n",task_index),100);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4908      	ldr	r1, [pc, #32]	; (8000be8 <main+0x160>)
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <main+0x164>)
 8000bc8:	f003 fba2 	bl	8004310 <siprintf>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	2364      	movs	r3, #100	; 0x64
 8000bd2:	4906      	ldr	r1, [pc, #24]	; (8000bec <main+0x164>)
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <main+0x168>)
 8000bd6:	f002 fc6f 	bl	80034b8 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000bda:	f000 fb9d 	bl	8001318 <SCH_Dispatch_Tasks>
 8000bde:	e7fc      	b.n	8000bda <main+0x152>
 8000be0:	2000024c 	.word	0x2000024c
 8000be4:	0800116d 	.word	0x0800116d
 8000be8:	08006620 	.word	0x08006620
 8000bec:	200002dc 	.word	0x200002dc
 8000bf0:	20000294 	.word	0x20000294
 8000bf4:	08000f2d 	.word	0x08000f2d
 8000bf8:	08000f8d 	.word	0x08000f8d
 8000bfc:	08000fed 	.word	0x08000fed
 8000c00:	080010ad 	.word	0x080010ad
 8000c04:	0800110d 	.word	0x0800110d
 8000c08:	0800104d 	.word	0x0800104d

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	; 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c16:	2228      	movs	r2, #40	; 0x28
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fe5a 	bl	80038d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2310      	movs	r3, #16
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fb41 	bl	80022d8 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c5c:	f000 f960 	bl	8000f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fdac 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c86:	f000 f94b 	bl	8000f20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 ff2d 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ca0:	f000 f93e 	bl	8000f20 <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3750      	adds	r7, #80	; 0x50
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cbe:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <MX_ADC1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cd6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000cea:	f000 fe29 	bl	8001940 <HAL_ADC_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cf4:	f000 f914 	bl	8000f20 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_ADC1_Init+0x74>)
 8000d0a:	f000 fef1 	bl	8001af0 <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d14:	f000 f904 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000021c 	.word	0x2000021c
 8000d24:	40012400 	.word	0x40012400

08000d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d5c:	2209      	movs	r2, #9
 8000d5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6c:	4813      	ldr	r0, [pc, #76]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d6e:	f001 ff77 	bl	8002c60 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d78:	f000 f8d2 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000d8a:	f002 f8f5 	bl	8002f78 <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d94:	f000 f8c4 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_TIM2_Init+0x94>)
 8000da6:	f002 facd 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 f8b6 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2000024c 	.word	0x2000024c

08000dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_USART2_UART_Init+0x50>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USART2_UART_Init+0x4c>)
 8000df8:	f002 fb0e 	bl	8003418 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e02:	f000 f88d 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000294 	.word	0x20000294
 8000e10:	40004400 	.word	0x40004400

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e46:	f043 0320 	orr.w	r3, r3, #32
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_GPIO_Init+0xd0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin|RED_1_Pin
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f64f 5198 	movw	r1, #64920	; 0xfd98
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <MX_GPIO_Init+0xd4>)
 8000e90:	f001 f9f0 	bl	8002274 <HAL_GPIO_WritePin>
                          |GREEN_1_Pin|YELLOW_1_Pin|b_val_1_Pin|c_val_1_Pin
                          |EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, g_val_2_Pin|LED_BLINK_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_GPIO_Init+0xd8>)
 8000e9c:	f001 f9ea 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_0_Pin GREEN_0_Pin YELLOW_0_Pin RED_1_Pin
                           GREEN_1_Pin YELLOW_1_Pin b_val_1_Pin c_val_1_Pin
                           EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin|RED_1_Pin
 8000ea0:	f64f 5398 	movw	r3, #64920	; 0xfd98
 8000ea4:	613b      	str	r3, [r7, #16]
                          |GREEN_1_Pin|YELLOW_1_Pin|b_val_1_Pin|c_val_1_Pin
                          |EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <MX_GPIO_Init+0xd4>)
 8000eba:	f001 f861 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : g_val_2_Pin LED_BLINK_Pin */
  GPIO_InitStruct.Pin = g_val_2_Pin|LED_BLINK_Pin;
 8000ebe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_GPIO_Init+0xd8>)
 8000ed8:	f001 f852 	bl	8001f80 <HAL_GPIO_Init>

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40010800 	.word	0x40010800

08000ef0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	timestamp++;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f00:	6013      	str	r3, [r2, #0]
	SCH_Update();
 8000f02:	f000 f96b 	bl	80011dc <SCH_Update>
	time_count++;
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000208 	.word	0x20000208
 8000f1c:	200001fc 	.word	0x200001fc

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <red_1>:
#include "scheduler.h"
#include "stm32f1xx_hal.h"

char data[50];
void red_1()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RED_0_Pin, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f36:	4810      	ldr	r0, [pc, #64]	; (8000f78 <red_1+0x4c>)
 8000f38:	f001 f99c 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_0_Pin, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <red_1+0x4c>)
 8000f44:	f001 f996 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW_0_Pin, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <red_1+0x4c>)
 8000f50:	f001 f990 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "red1 run at  %d\r\n",timestamp),1000);
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <red_1+0x50>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4909      	ldr	r1, [pc, #36]	; (8000f80 <red_1+0x54>)
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <red_1+0x58>)
 8000f5e:	f003 f9d7 	bl	8004310 <siprintf>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	4906      	ldr	r1, [pc, #24]	; (8000f84 <red_1+0x58>)
 8000f6c:	4806      	ldr	r0, [pc, #24]	; (8000f88 <red_1+0x5c>)
 8000f6e:	f002 faa3 	bl	80034b8 <HAL_UART_Transmit>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	20000208 	.word	0x20000208
 8000f80:	08006634 	.word	0x08006634
 8000f84:	200002dc 	.word	0x200002dc
 8000f88:	20000294 	.word	0x20000294

08000f8c <green_1>:
void green_1()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GREEN_0_Pin, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f96:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <green_1+0x4c>)
 8000f98:	f001 f96c 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_0_Pin, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <green_1+0x4c>)
 8000fa4:	f001 f966 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW_0_Pin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <green_1+0x4c>)
 8000fb0:	f001 f960 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "green1 run at  %d\r\n",timestamp),1000);
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <green_1+0x50>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <green_1+0x54>)
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <green_1+0x58>)
 8000fbe:	f003 f9a7 	bl	8004310 <siprintf>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fca:	4906      	ldr	r1, [pc, #24]	; (8000fe4 <green_1+0x58>)
 8000fcc:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <green_1+0x5c>)
 8000fce:	f002 fa73 	bl	80034b8 <HAL_UART_Transmit>

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	08006648 	.word	0x08006648
 8000fe4:	200002dc 	.word	0x200002dc
 8000fe8:	20000294 	.word	0x20000294

08000fec <yellow_1>:
void yellow_1()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, YELLOW_0_Pin, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4810      	ldr	r0, [pc, #64]	; (8001038 <yellow_1+0x4c>)
 8000ff8:	f001 f93c 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GREEN_0_Pin, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <yellow_1+0x4c>)
 8001004:	f001 f936 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_0_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100e:	480a      	ldr	r0, [pc, #40]	; (8001038 <yellow_1+0x4c>)
 8001010:	f001 f930 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "yellow1 run at  %d\r\n",timestamp),1000);
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <yellow_1+0x50>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4909      	ldr	r1, [pc, #36]	; (8001040 <yellow_1+0x54>)
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <yellow_1+0x58>)
 800101e:	f003 f977 	bl	8004310 <siprintf>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	4906      	ldr	r1, [pc, #24]	; (8001044 <yellow_1+0x58>)
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <yellow_1+0x5c>)
 800102e:	f002 fa43 	bl	80034b8 <HAL_UART_Transmit>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40010c00 	.word	0x40010c00
 800103c:	20000208 	.word	0x20000208
 8001040:	0800665c 	.word	0x0800665c
 8001044:	200002dc 	.word	0x200002dc
 8001048:	20000294 	.word	0x20000294

0800104c <red_2>:

void red_2()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GREEN_1_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001056:	4810      	ldr	r0, [pc, #64]	; (8001098 <red_2+0x4c>)
 8001058:	f001 f90c 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW_1_Pin, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	480d      	ldr	r0, [pc, #52]	; (8001098 <red_2+0x4c>)
 8001064:	f001 f906 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_1_Pin, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	480a      	ldr	r0, [pc, #40]	; (8001098 <red_2+0x4c>)
 8001070:	f001 f900 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "red2 run at  %d\r\n",timestamp),1000);
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <red_2+0x50>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4909      	ldr	r1, [pc, #36]	; (80010a0 <red_2+0x54>)
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <red_2+0x58>)
 800107e:	f003 f947 	bl	8004310 <siprintf>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	4906      	ldr	r1, [pc, #24]	; (80010a4 <red_2+0x58>)
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <red_2+0x5c>)
 800108e:	f002 fa13 	bl	80034b8 <HAL_UART_Transmit>

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40010c00 	.word	0x40010c00
 800109c:	20000208 	.word	0x20000208
 80010a0:	08006674 	.word	0x08006674
 80010a4:	200002dc 	.word	0x200002dc
 80010a8:	20000294 	.word	0x20000294

080010ac <green_2>:
void green_2()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GREEN_1_Pin, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <green_2+0x4c>)
 80010b8:	f001 f8dc 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_1_Pin, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <green_2+0x4c>)
 80010c4:	f001 f8d6 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW_1_Pin, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <green_2+0x4c>)
 80010d0:	f001 f8d0 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "green2 run at  %d\r\n",timestamp),1000);
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <green_2+0x50>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4909      	ldr	r1, [pc, #36]	; (8001100 <green_2+0x54>)
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <green_2+0x58>)
 80010de:	f003 f917 	bl	8004310 <siprintf>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	4906      	ldr	r1, [pc, #24]	; (8001104 <green_2+0x58>)
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <green_2+0x5c>)
 80010ee:	f002 f9e3 	bl	80034b8 <HAL_UART_Transmit>

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	20000208 	.word	0x20000208
 8001100:	08006688 	.word	0x08006688
 8001104:	200002dc 	.word	0x200002dc
 8001108:	20000294 	.word	0x20000294

0800110c <yellow_2>:
void yellow_2()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GREEN_1_Pin, 1);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001116:	4810      	ldr	r0, [pc, #64]	; (8001158 <yellow_2+0x4c>)
 8001118:	f001 f8ac 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YELLOW_1_Pin, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <yellow_2+0x4c>)
 8001124:	f001 f8a6 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED_1_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	480a      	ldr	r0, [pc, #40]	; (8001158 <yellow_2+0x4c>)
 8001130:	f001 f8a0 	bl	8002274 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "yellow2 run at  %d\r\n",timestamp),1000);
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <yellow_2+0x50>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4909      	ldr	r1, [pc, #36]	; (8001160 <yellow_2+0x54>)
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <yellow_2+0x58>)
 800113e:	f003 f8e7 	bl	8004310 <siprintf>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	4906      	ldr	r1, [pc, #24]	; (8001164 <yellow_2+0x58>)
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <yellow_2+0x5c>)
 800114e:	f002 f9b3 	bl	80034b8 <HAL_UART_Transmit>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40010c00 	.word	0x40010c00
 800115c:	20000208 	.word	0x20000208
 8001160:	0800669c 	.word	0x0800669c
 8001164:	200002dc 	.word	0x200002dc
 8001168:	20000294 	.word	0x20000294

0800116c <dot_blinky>:
void dot_blinky()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 8001170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <dot_blinky+0x30>)
 8001176:	f001 f895 	bl	80022a4 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, sprintf(data, "dotblink run at  %d\r\n",timestamp),1000);
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <dot_blinky+0x34>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	4908      	ldr	r1, [pc, #32]	; (80011a4 <dot_blinky+0x38>)
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <dot_blinky+0x3c>)
 8001184:	f003 f8c4 	bl	8004310 <siprintf>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	4905      	ldr	r1, [pc, #20]	; (80011a8 <dot_blinky+0x3c>)
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <dot_blinky+0x40>)
 8001194:	f002 f990 	bl	80034b8 <HAL_UART_Transmit>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010800 	.word	0x40010800
 80011a0:	20000208 	.word	0x20000208
 80011a4:	080066b4 	.word	0x080066b4
 80011a8:	200002dc 	.word	0x200002dc
 80011ac:	20000294 	.word	0x20000294

080011b0 <SCH_Init>:
int timestamp = 0;
int delete_signal = 0;
int delete_index = -1;

void SCH_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	while (current_index != 0)
 80011b4:	e002      	b.n	80011bc <SCH_Init+0xc>
	{
		SCH_Delete_Task(0);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f936 	bl	8001428 <SCH_Delete_Task>
	while (current_index != 0)
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SCH_Init+0x24>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f8      	bne.n	80011b6 <SCH_Init+0x6>
	}
	current_index = 0;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <SCH_Init+0x24>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
	time_count = 0;
 80011ca:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <SCH_Init+0x28>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000200 	.word	0x20000200
 80011d8:	200001fc 	.word	0x200001fc

080011dc <SCH_Update>:

void SCH_Update(void) //Function like timer run
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	if(head != NULL)
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <SCH_Update+0x6c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d02a      	beq.n	800123e <SCH_Update+0x62>
	{
		if(head->pTask)
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <SCH_Update+0x6c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d025      	beq.n	800123e <SCH_Update+0x62>
		{
			if(head->Delay <= 0)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <SCH_Update+0x6c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dc19      	bgt.n	8001230 <SCH_Update+0x54>
			{
				head->RunMe = 1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <SCH_Update+0x6c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
				if(head->Period) head->Delay = head->Period;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <SCH_Update+0x6c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <SCH_Update+0x40>
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <SCH_Update+0x6c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <SCH_Update+0x6c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6892      	ldr	r2, [r2, #8]
 8001218:	605a      	str	r2, [r3, #4]
				//else SCH_Delete_Task(head->TaskID);
			}
			else head->Delay = head->Delay - 1;
		}
	}
}
 800121a:	e010      	b.n	800123e <SCH_Update+0x62>
					delete_signal = 1;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <SCH_Update+0x70>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
					delete_index = head->TaskID;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <SCH_Update+0x6c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	7c1b      	ldrb	r3, [r3, #16]
 8001228:	461a      	mov	r2, r3
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <SCH_Update+0x74>)
 800122c:	601a      	str	r2, [r3, #0]
}
 800122e:	e006      	b.n	800123e <SCH_Update+0x62>
			else head->Delay = head->Delay - 1;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SCH_Update+0x6c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SCH_Update+0x6c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3a01      	subs	r2, #1
 800123c:	605a      	str	r2, [r3, #4]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000204 	.word	0x20000204
 800124c:	2000020c 	.word	0x2000020c
 8001250:	20000000 	.word	0x20000000

08001254 <SCH_Add_Task>:

uint8_t SCH_Add_Task(void (* pFunction)(), unsigned int DELAY, unsigned int PERIOD)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	if (current_index >= SCH_MAX_TASKS) return -1;
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <SCH_Add_Task+0xbc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b13      	cmp	r3, #19
 8001266:	dd01      	ble.n	800126c <SCH_Add_Task+0x18>
 8001268:	23ff      	movs	r3, #255	; 0xff
 800126a:	e04d      	b.n	8001308 <SCH_Add_Task+0xb4>

	sTask* newTask = (sTask*)malloc(sizeof(sTask));
 800126c:	2018      	movs	r0, #24
 800126e:	f002 fb21 	bl	80038b4 <malloc>
 8001272:	4603      	mov	r3, r0
 8001274:	613b      	str	r3, [r7, #16]
	if(newTask == NULL) return -1;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <SCH_Add_Task+0x2c>
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	e043      	b.n	8001308 <SCH_Add_Task+0xb4>

		newTask->pTask = pFunction;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	601a      	str	r2, [r3, #0]
	    newTask->Delay = DELAY;
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	605a      	str	r2, [r3, #4]
	    newTask->Period = PERIOD;
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	609a      	str	r2, [r3, #8]
	    newTask->TaskID = current_index;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <SCH_Add_Task+0xbc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	741a      	strb	r2, [r3, #16]
	    newTask->next = NULL;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]

	if (head == NULL || head->Delay > DELAY)
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <SCH_Add_Task+0xc0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <SCH_Add_Task+0x64>
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <SCH_Add_Task+0xc0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	461a      	mov	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d207      	bcs.n	80012c8 <SCH_Add_Task+0x74>
	{
		newTask->next = head;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <SCH_Add_Task+0xc0>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	615a      	str	r2, [r3, #20]
		head = newTask;
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <SCH_Add_Task+0xc0>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e018      	b.n	80012fa <SCH_Add_Task+0xa6>
	}
	else
	{
		sTask* current= head;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <SCH_Add_Task+0xc0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	617b      	str	r3, [r7, #20]
		while(current->next != NULL && current->next->Delay <= DELAY)
 80012ce:	e002      	b.n	80012d6 <SCH_Add_Task+0x82>
		{
			current = current->next;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	617b      	str	r3, [r7, #20]
		while(current->next != NULL && current->next->Delay <= DELAY)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <SCH_Add_Task+0x98>
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d2f1      	bcs.n	80012d0 <SCH_Add_Task+0x7c>
		}
		newTask->next = current->next;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	615a      	str	r2, [r3, #20]
		current->next = newTask;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	615a      	str	r2, [r3, #20]
	}
	current_index++;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SCH_Add_Task+0xbc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <SCH_Add_Task+0xbc>)
 8001302:	6013      	str	r3, [r2, #0]
	return newTask->TaskID;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	7c1b      	ldrb	r3, [r3, #16]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000200 	.word	0x20000200
 8001314:	20000204 	.word	0x20000204

08001318 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
	if(head != NULL && head->RunMe)
 800131e:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d073      	beq.n	800140e <SCH_Dispatch_Tasks+0xf6>
 8001326:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d06e      	beq.n	800140e <SCH_Dispatch_Tasks+0xf6>
	{
		head->pTask();
 8001330:	4b39      	ldr	r3, [pc, #228]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4798      	blx	r3
		head->RunMe = 0;
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]

		// Decrease the delay of other task
		sTask* current = head;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
		current = current->next;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	60fb      	str	r3, [r7, #12]
		while(current != NULL)
 800134c:	e014      	b.n	8001378 <SCH_Dispatch_Tasks+0x60>
		{
				if(current->Delay > 0)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dd0d      	ble.n	8001372 <SCH_Dispatch_Tasks+0x5a>
				{
					current->Delay = current->Delay - time_count;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <SCH_Dispatch_Tasks+0x104>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	605a      	str	r2, [r3, #4]
					if (current->Delay < 0) current->Delay = 0;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	da02      	bge.n	8001372 <SCH_Dispatch_Tasks+0x5a>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
				}
				current = current->next;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	60fb      	str	r3, [r7, #12]
		while(current != NULL)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e7      	bne.n	800134e <SCH_Dispatch_Tasks+0x36>
		}

		// Reset time_count
		time_count = 0;
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <SCH_Dispatch_Tasks+0x104>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

		// Remove the head node
		sTask* temp = head;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	607b      	str	r3, [r7, #4]
		head = head->next;
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001392:	6013      	str	r3, [r2, #0]

		//Change the place base on DELAY
		if(head == NULL || temp->Delay <= head->Delay) // compare with the first node
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <SCH_Dispatch_Tasks+0x92>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dc07      	bgt.n	80013ba <SCH_Dispatch_Tasks+0xa2>
		{
			temp->next = head;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	615a      	str	r2, [r3, #20]
			head = temp;
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e018      	b.n	80013ec <SCH_Dispatch_Tasks+0xd4>
		}
		else
		{
			sTask* current_other = head; //compare with the second ->
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <SCH_Dispatch_Tasks+0x100>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60bb      	str	r3, [r7, #8]
			while(current_other->next != NULL && current_other->next->Delay <= temp->Delay)
 80013c0:	e002      	b.n	80013c8 <SCH_Dispatch_Tasks+0xb0>
			{
				current_other = current_other->next;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60bb      	str	r3, [r7, #8]
			while(current_other->next != NULL && current_other->next->Delay <= temp->Delay)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <SCH_Dispatch_Tasks+0xc6>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	ddf1      	ble.n	80013c2 <SCH_Dispatch_Tasks+0xaa>
			}
			temp->next = current_other->next;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	615a      	str	r2, [r3, #20]
			current_other->next = temp;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	615a      	str	r2, [r3, #20]
		}
		//printf("Task with ID: %d reinserted with Delay: %d\n", temp->TaskID, temp->Delay);

		// Delete when period = 0
		if(delete_signal)
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <SCH_Dispatch_Tasks+0x108>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00c      	beq.n	800140e <SCH_Dispatch_Tasks+0xf6>
		{
			SCH_Delete_Task(delete_index);
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <SCH_Dispatch_Tasks+0x10c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f814 	bl	8001428 <SCH_Delete_Task>
			delete_signal = 0;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <SCH_Dispatch_Tasks+0x108>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
			delete_index = -1;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <SCH_Dispatch_Tasks+0x10c>)
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000204 	.word	0x20000204
 800141c:	200001fc 	.word	0x200001fc
 8001420:	2000020c 	.word	0x2000020c
 8001424:	20000000 	.word	0x20000000

08001428 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(const uint8_t id)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	// If no task in array or taskID invalid, return -1
	sTask* current = head;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <SCH_Delete_Task+0x5c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]
	sTask* previous = NULL;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
	while(current != NULL)
 800143c:	e01a      	b.n	8001474 <SCH_Delete_Task+0x4c>
	{
		if(current->TaskID == id)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	7c1b      	ldrb	r3, [r3, #16]
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	429a      	cmp	r2, r3
 8001446:	d110      	bne.n	800146a <SCH_Delete_Task+0x42>
		{
			if(previous == NULL) head = current->next; // node in head
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d104      	bne.n	8001458 <SCH_Delete_Task+0x30>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <SCH_Delete_Task+0x5c>)
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e003      	b.n	8001460 <SCH_Delete_Task+0x38>
			else previous->next = current->next; // delete node
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	615a      	str	r2, [r3, #20]
			free(current);
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f002 fa2f 	bl	80038c4 <free>
			return 0; // success
 8001466:	2300      	movs	r3, #0
 8001468:	e008      	b.n	800147c <SCH_Delete_Task+0x54>
		}
		previous = current;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	60bb      	str	r3, [r7, #8]
		current = current->next;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	60fb      	str	r3, [r7, #12]
	while(current != NULL)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e1      	bne.n	800143e <SCH_Delete_Task+0x16>
	}
	return -1; // fail
 800147a:	23ff      	movs	r3, #255	; 0xff
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000204 	.word	0x20000204

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_MspInit+0x5c>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_MspInit+0x5c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_MspInit+0x5c>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_MspInit+0x5c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_MspInit+0x5c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_MspInit+0x5c>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_MspInit+0x60>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_MspInit+0x60>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000

080014ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_ADC_MspInit+0x6c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d121      	bne.n	8001550 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <HAL_ADC_MspInit+0x70>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_ADC_MspInit+0x70>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_ADC_MspInit+0x70>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_ADC_MspInit+0x70>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <HAL_ADC_MspInit+0x70>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_ADC_MspInit+0x70>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800153c:	2302      	movs	r3, #2
 800153e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001540:	2303      	movs	r3, #3
 8001542:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_ADC_MspInit+0x74>)
 800154c:	f000 fd18 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40012400 	.word	0x40012400
 800155c:	40021000 	.word	0x40021000
 8001560:	40010800 	.word	0x40010800

08001564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d113      	bne.n	800159e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	201c      	movs	r0, #28
 8001594:	f000 fcbd 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001598:	201c      	movs	r0, #28
 800159a:	f000 fcd6 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_UART_MspInit+0x88>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d12f      	bne.n	800162c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d6:	61d3      	str	r3, [r2, #28]
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a13      	ldr	r2, [pc, #76]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015fc:	2304      	movs	r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_UART_MspInit+0x90>)
 8001610:	f000 fcb6 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001614:	2308      	movs	r3, #8
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_UART_MspInit+0x90>)
 8001628:	f000 fcaa 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004400 	.word	0x40004400
 8001638:	40021000 	.word	0x40021000
 800163c:	40010800 	.word	0x40010800

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f000 f93f 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM2_IRQHandler+0x10>)
 8001696:	f001 fb7f 	bl	8002d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000024c 	.word	0x2000024c

080016a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
	return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <_kill>:

int _kill(int pid, int sig)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016bc:	f002 f8d0 	bl	8003860 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2216      	movs	r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
	return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_exit>:

void _exit (int status)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016da:	f04f 31ff 	mov.w	r1, #4294967295
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffe7 	bl	80016b2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016e4:	e7fe      	b.n	80016e4 <_exit+0x12>

080016e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e00a      	b.n	800170e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f8:	f3af 8000 	nop.w
 80016fc:	4601      	mov	r1, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf0      	blt.n	80016f8 <_read+0x12>
	}

return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e009      	b.n	8001746 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	dbf1      	blt.n	8001732 <_write+0x12>
	}
	return len;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_close>:

int _close(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177e:	605a      	str	r2, [r3, #4]
	return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <_isatty>:

int _isatty(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	; (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f002 f83a 	bl	8003860 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20002800 	.word	0x20002800
 8001818:	00000400 	.word	0x00000400
 800181c:	20000210 	.word	0x20000210
 8001820:	20000328 	.word	0x20000328

08001824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001830:	f7ff fff8 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <LoopFillZerobss+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800184c:	4c09      	ldr	r4, [pc, #36]	; (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185a:	f002 f807 	bl	800386c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185e:	f7ff f913 	bl	8000a88 <main>
  bx lr
 8001862:	4770      	bx	lr
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800186c:	08006ae4 	.word	0x08006ae4
  ldr r2, =_sbss
 8001870:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001874:	20000324 	.word	0x20000324

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x28>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 fb35 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	200f      	movs	r0, #15
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fdf6 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fb4d 	bl	8001f66 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fb15 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000004 	.word	0x20000004
 8001900:	2000000c 	.word	0x2000000c
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_IncTick+0x1c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x20>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_IncTick+0x20>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000310 	.word	0x20000310

0800192c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <HAL_GetTick+0x10>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000310 	.word	0x20000310

08001940 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0be      	b.n	8001ae0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fdb4 	bl	80014ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f9ab 	bl	8001ce0 <ADC_ConversionStop_Disable>
 800198a:	4603      	mov	r3, r0
 800198c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8099 	bne.w	8001ace <HAL_ADC_Init+0x18e>
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 8095 	bne.w	8001ace <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ac:	f023 0302 	bic.w	r3, r3, #2
 80019b0:	f043 0202 	orr.w	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7b1b      	ldrb	r3, [r3, #12]
 80019c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d8:	d003      	beq.n	80019e2 <HAL_ADC_Init+0xa2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HAL_ADC_Init+0xa8>
 80019e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e6:	e000      	b.n	80019ea <HAL_ADC_Init+0xaa>
 80019e8:	2300      	movs	r3, #0
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7d1b      	ldrb	r3, [r3, #20]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d119      	bne.n	8001a2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	035a      	lsls	r2, r3, #13
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	e00b      	b.n	8001a2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f043 0220 	orr.w	r2, r3, #32
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_ADC_Init+0x1a8>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a5c:	d003      	beq.n	8001a66 <HAL_ADC_Init+0x126>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d104      	bne.n	8001a70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	051b      	lsls	r3, r3, #20
 8001a6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_ADC_Init+0x1ac>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d10b      	bne.n	8001aac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aaa:	e018      	b.n	8001ade <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f023 0312 	bic.w	r3, r3, #18
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001acc:	e007      	b.n	8001ade <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	ffe1f7fd 	.word	0xffe1f7fd
 8001aec:	ff1f0efe 	.word	0xff1f0efe

08001af0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x20>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e0dc      	b.n	8001cca <HAL_ADC_ConfigChannel+0x1da>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b06      	cmp	r3, #6
 8001b1e:	d81c      	bhi.n	8001b5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b05      	subs	r3, #5
 8001b32:	221f      	movs	r2, #31
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b05      	subs	r3, #5
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
 8001b58:	e03c      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d81c      	bhi.n	8001b9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b23      	subs	r3, #35	; 0x23
 8001b74:	221f      	movs	r2, #31
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4019      	ands	r1, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b23      	subs	r3, #35	; 0x23
 8001b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
 8001b9a:	e01b      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b41      	subs	r3, #65	; 0x41
 8001bae:	221f      	movs	r2, #31
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4019      	ands	r1, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b41      	subs	r3, #65	; 0x41
 8001bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b09      	cmp	r3, #9
 8001bda:	d91c      	bls.n	8001c16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68d9      	ldr	r1, [r3, #12]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	3b1e      	subs	r3, #30
 8001bee:	2207      	movs	r2, #7
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4019      	ands	r1, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6898      	ldr	r0, [r3, #8]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	3b1e      	subs	r3, #30
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	e019      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	2207      	movs	r2, #7
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4019      	ands	r1, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6898      	ldr	r0, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d003      	beq.n	8001c5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c56:	2b11      	cmp	r3, #17
 8001c58:	d132      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d125      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d126      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d11a      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_ADC_ConfigChannel+0x1ec>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9a      	lsrs	r2, r3, #18
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca0:	e002      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f9      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cae:	e007      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40012400 	.word	0x40012400
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	431bde83 	.word	0x431bde83

08001ce0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d12e      	bne.n	8001d58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d0a:	f7ff fe0f 	bl	800192c <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d10:	e01b      	b.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d12:	f7ff fe0b 	bl	800192c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d914      	bls.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10d      	bne.n	8001d4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e007      	b.n	8001d5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d0dc      	beq.n	8001d12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <__NVIC_EnableIRQ+0x34>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff90 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff2d 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff42 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff90 	bl	8001e54 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5f 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff35 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b08b      	sub	sp, #44	; 0x2c
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f92:	e148      	b.n	8002226 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f94:	2201      	movs	r2, #1
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	f040 8137 	bne.w	8002220 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4aa3      	ldr	r2, [pc, #652]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d05e      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fbc:	4aa1      	ldr	r2, [pc, #644]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d875      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fc2:	4aa1      	ldr	r2, [pc, #644]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d058      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fc8:	4a9f      	ldr	r2, [pc, #636]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d86f      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fce:	4a9f      	ldr	r2, [pc, #636]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d052      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fd4:	4a9d      	ldr	r2, [pc, #628]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d869      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fda:	4a9d      	ldr	r2, [pc, #628]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04c      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fe0:	4a9b      	ldr	r2, [pc, #620]	; (8002250 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d863      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001fe6:	4a9b      	ldr	r2, [pc, #620]	; (8002254 <HAL_GPIO_Init+0x2d4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d046      	beq.n	800207a <HAL_GPIO_Init+0xfa>
 8001fec:	4a99      	ldr	r2, [pc, #612]	; (8002254 <HAL_GPIO_Init+0x2d4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d85d      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d82a      	bhi.n	800204c <HAL_GPIO_Init+0xcc>
 8001ff6:	2b12      	cmp	r3, #18
 8001ff8:	d859      	bhi.n	80020ae <HAL_GPIO_Init+0x12e>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_GPIO_Init+0x80>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	0800207b 	.word	0x0800207b
 8002004:	08002055 	.word	0x08002055
 8002008:	08002067 	.word	0x08002067
 800200c:	080020a9 	.word	0x080020a9
 8002010:	080020af 	.word	0x080020af
 8002014:	080020af 	.word	0x080020af
 8002018:	080020af 	.word	0x080020af
 800201c:	080020af 	.word	0x080020af
 8002020:	080020af 	.word	0x080020af
 8002024:	080020af 	.word	0x080020af
 8002028:	080020af 	.word	0x080020af
 800202c:	080020af 	.word	0x080020af
 8002030:	080020af 	.word	0x080020af
 8002034:	080020af 	.word	0x080020af
 8002038:	080020af 	.word	0x080020af
 800203c:	080020af 	.word	0x080020af
 8002040:	080020af 	.word	0x080020af
 8002044:	0800205d 	.word	0x0800205d
 8002048:	08002071 	.word	0x08002071
 800204c:	4a82      	ldr	r2, [pc, #520]	; (8002258 <HAL_GPIO_Init+0x2d8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002052:	e02c      	b.n	80020ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e029      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e024      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	623b      	str	r3, [r7, #32]
          break;
 800206e:	e01f      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	330c      	adds	r3, #12
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e01a      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002082:	2304      	movs	r3, #4
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e013      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	611a      	str	r2, [r3, #16]
          break;
 800209a:	e009      	b.n	80020b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800209c:	2308      	movs	r3, #8
 800209e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
          break;
 80020a6:	e003      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e000      	b.n	80020b0 <HAL_GPIO_Init+0x130>
          break;
 80020ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d801      	bhi.n	80020ba <HAL_GPIO_Init+0x13a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_Init+0x13e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d802      	bhi.n	80020cc <HAL_GPIO_Init+0x14c>
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x152>
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3b08      	subs	r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	210f      	movs	r1, #15
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	6a39      	ldr	r1, [r7, #32]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8090 	beq.w	8002220 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b56      	ldr	r3, [pc, #344]	; (800225c <HAL_GPIO_Init+0x2dc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a55      	ldr	r2, [pc, #340]	; (800225c <HAL_GPIO_Init+0x2dc>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_GPIO_Init+0x2dc>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x2e0>)
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	089b      	lsrs	r3, r3, #2
 800211e:	3302      	adds	r3, #2
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a49      	ldr	r2, [pc, #292]	; (8002264 <HAL_GPIO_Init+0x2e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1e0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_GPIO_Init+0x2e8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1dc>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_GPIO_Init+0x2ec>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1d8>
 8002154:	2302      	movs	r3, #2
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 8002158:	2303      	movs	r3, #3
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1e2>
 8002160:	2300      	movs	r3, #0
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002172:	493b      	ldr	r1, [pc, #236]	; (8002260 <HAL_GPIO_Init+0x2e0>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800218c:	4b38      	ldr	r3, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4933      	ldr	r1, [pc, #204]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c2:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4929      	ldr	r1, [pc, #164]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4923      	ldr	r1, [pc, #140]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	491f      	ldr	r1, [pc, #124]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4919      	ldr	r1, [pc, #100]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	43db      	mvns	r3, r3
 800221a:	4915      	ldr	r1, [pc, #84]	; (8002270 <HAL_GPIO_Init+0x2f0>)
 800221c:	4013      	ands	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	3301      	adds	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aeaf 	bne.w	8001f94 <HAL_GPIO_Init+0x14>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	372c      	adds	r7, #44	; 0x2c
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	10320000 	.word	0x10320000
 8002248:	10310000 	.word	0x10310000
 800224c:	10220000 	.word	0x10220000
 8002250:	10210000 	.word	0x10210000
 8002254:	10120000 	.word	0x10120000
 8002258:	10110000 	.word	0x10110000
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	40010800 	.word	0x40010800
 8002268:	40010c00 	.word	0x40010c00
 800226c:	40011000 	.word	0x40011000
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43d9      	mvns	r1, r3
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	400b      	ands	r3, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e26c      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8087 	beq.w	8002406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f8:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d00c      	beq.n	800231e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002304:	4b8f      	ldr	r3, [pc, #572]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
 8002310:	4b8c      	ldr	r3, [pc, #560]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d10b      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231e:	4b89      	ldr	r3, [pc, #548]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d06c      	beq.n	8002404 <HAL_RCC_OscConfig+0x12c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d168      	bne.n	8002404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e246      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x76>
 8002340:	4b80      	ldr	r3, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7f      	ldr	r2, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e02e      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b78      	ldr	r3, [pc, #480]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0xbc>
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a71      	ldr	r2, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002394:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff faba 	bl	800192c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fab6 	bl	800192c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1fa      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xe4>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff faa6 	bl	800192c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff faa2 	bl	800192c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1e6      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x10c>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1ba      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4939      	ldr	r1, [pc, #228]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7ff fa5b 	bl	800192c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7ff fa57 	bl	800192c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e19b      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fa3a 	bl	800192c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff fa36 	bl	800192c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e17a      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03a      	beq.n	800255c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7ff fa1a 	bl	800192c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff fa16 	bl	800192c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e15a      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 facc 	bl	8002ab8 <RCC_Delay>
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7ff fa00 	bl	800192c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7ff f9fc 	bl	800192c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d908      	bls.n	8002550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e140      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	42420000 	.word	0x42420000
 800254c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e9      	bne.n	8002530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a6 	beq.w	80026b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b97      	ldr	r3, [pc, #604]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a93      	ldr	r2, [pc, #588]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b8e      	ldr	r3, [pc, #568]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a8a      	ldr	r2, [pc, #552]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7ff f9bd 	bl	800192c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7ff f9b9 	bl	800192c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0fd      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x312>
 80025dc:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x334>
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a72      	ldr	r2, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e01c      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x356>
 8002614:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a6c      	ldr	r2, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a63      	ldr	r2, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7ff f96d 	bl	800192c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7ff f969 	bl	800192c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0ab      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCC_OscConfig+0x37e>
 8002678:	e014      	b.n	80026a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7ff f957 	bl	800192c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff f953 	bl	800192c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e095      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8081 	beq.w	80027c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d061      	beq.n	8002790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d146      	bne.n	8002762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7ff f927 	bl	800192c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7ff f923 	bl	800192c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e067      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	492d      	ldr	r1, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a19      	ldr	r1, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	430b      	orrs	r3, r1
 800272e:	4927      	ldr	r1, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7ff f8f7 	bl	800192c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7ff f8f3 	bl	800192c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e037      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x46a>
 8002760:	e02f      	b.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7ff f8e0 	bl	800192c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7ff f8dc 	bl	800192c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e020      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x498>
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e013      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420060 	.word	0x42420060

080027d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d0      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4965      	ldr	r1, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d040      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e073      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4936      	ldr	r1, [pc, #216]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7ff f830 	bl	800192c <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7ff f82c 	bl	800192c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e053      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d210      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	490a      	ldr	r1, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ff8e 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	080066cc 	.word	0x080066cc
 80029a4:	20000004 	.word	0x20000004
 80029a8:	20000008 	.word	0x20000008

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x30>
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x36>
 80029da:	e027      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80029de:	613b      	str	r3, [r7, #16]
      break;
 80029e0:	e027      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0c9b      	lsrs	r3, r3, #18
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	fb02 f203 	mul.w	r2, r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e004      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a20:	fb02 f303 	mul.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	613b      	str	r3, [r7, #16]
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2e:	613b      	str	r3, [r7, #16]
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	693b      	ldr	r3, [r7, #16]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	080066e4 	.word	0x080066e4
 8002a4c:	080066f4 	.word	0x080066f4
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	20000004 	.word	0x20000004

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff2 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080066dc 	.word	0x080066dc

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0adb      	lsrs	r3, r3, #11
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	080066dc 	.word	0x080066dc

08002ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <RCC_Delay+0x34>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <RCC_Delay+0x38>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0a5b      	lsrs	r3, r3, #9
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad4:	bf00      	nop
  }
  while (Delay --);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1e5a      	subs	r2, r3, #1
 8002ada:	60fa      	str	r2, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f9      	bne.n	8002ad4 <RCC_Delay+0x1c>
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000004 	.word	0x20000004
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d07d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
 8002b2c:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d118      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b54:	f7fe feea 	bl	800192c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fe fee6 	bl	800192c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e06d      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d027      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bae:	4a29      	ldr	r2, [pc, #164]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe feb5 	bl	800192c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe feb1 	bl	800192c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e036      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4917      	ldr	r1, [pc, #92]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	490b      	ldr	r1, [pc, #44]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4904      	ldr	r1, [pc, #16]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42420440 	.word	0x42420440

08002c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e041      	b.n	8002cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fc6c 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fa56 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d001      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e035      	b.n	8002d84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_TIM_Base_Start_IT+0x90>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x4e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x4e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <HAL_TIM_Base_Start_IT+0x94>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d010      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d70:	e007      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00
 8002d94:	40000400 	.word	0x40000400

08002d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d020      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01b      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0202 	mvn.w	r2, #2
 8002dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f998 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f98b 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f99a 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d020      	beq.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0204 	mvn.w	r2, #4
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f972 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f965 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f974 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d020      	beq.n	8002e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0208 	mvn.w	r2, #8
 8002e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f94c 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f93f 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f94e 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d020      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0210 	mvn.w	r2, #16
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f926 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f919 	bl	8003106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f928 	bl	800312a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0201 	mvn.w	r2, #1
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fff6 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa6f 	bl	8003406 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f8f8 	bl	800313c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0220 	mvn.w	r2, #32
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fa42 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIM_ConfigClockSource+0x1c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0b4      	b.n	80030fe <HAL_TIM_ConfigClockSource+0x186>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fcc:	d03e      	beq.n	800304c <HAL_TIM_ConfigClockSource+0xd4>
 8002fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd2:	f200 8087 	bhi.w	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	f000 8086 	beq.w	80030ea <HAL_TIM_ConfigClockSource+0x172>
 8002fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe2:	d87f      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b70      	cmp	r3, #112	; 0x70
 8002fe6:	d01a      	beq.n	800301e <HAL_TIM_ConfigClockSource+0xa6>
 8002fe8:	2b70      	cmp	r3, #112	; 0x70
 8002fea:	d87b      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b60      	cmp	r3, #96	; 0x60
 8002fee:	d050      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0x11a>
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d877      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b50      	cmp	r3, #80	; 0x50
 8002ff6:	d03c      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0xfa>
 8002ff8:	2b50      	cmp	r3, #80	; 0x50
 8002ffa:	d873      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d058      	beq.n	80030b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d86f      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b30      	cmp	r3, #48	; 0x30
 8003006:	d064      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d86b      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b20      	cmp	r3, #32
 800300e:	d060      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d867      	bhi.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05c      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003018:	2b10      	cmp	r3, #16
 800301a:	d05a      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	e062      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f000 f96a 	bl	8003306 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	609a      	str	r2, [r3, #8]
      break;
 800304a:	e04f      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6899      	ldr	r1, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f000 f953 	bl	8003306 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800306e:	609a      	str	r2, [r3, #8]
      break;
 8003070:	e03c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	461a      	mov	r2, r3
 8003080:	f000 f8ca 	bl	8003218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2150      	movs	r1, #80	; 0x50
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f921 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 8003090:	e02c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	461a      	mov	r2, r3
 80030a0:	f000 f8e8 	bl	8003274 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2160      	movs	r1, #96	; 0x60
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f911 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030b0:	e01c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	6859      	ldr	r1, [r3, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	461a      	mov	r2, r3
 80030c0:	f000 f8aa 	bl	8003218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f901 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030d0:	e00c      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f000 f8f8 	bl	80032d2 <TIM_ITRx_SetConfig>
      break;
 80030e2:	e003      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e000      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <TIM_Base_SetConfig+0xc0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0x28>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0x28>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a28      	ldr	r2, [pc, #160]	; (8003214 <TIM_Base_SetConfig+0xc4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d108      	bne.n	800318a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a20      	ldr	r2, [pc, #128]	; (8003210 <TIM_Base_SetConfig+0xc0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x52>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x52>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <TIM_Base_SetConfig+0xc4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <TIM_Base_SetConfig+0xc0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 0201 	bic.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	611a      	str	r2, [r3, #16]
  }
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40000400 	.word	0x40000400

08003218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0201 	bic.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 030a 	bic.w	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0210 	bic.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800329e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	031b      	lsls	r3, r3, #12
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f043 0307 	orr.w	r3, r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	609a      	str	r2, [r3, #8]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003320:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	431a      	orrs	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4313      	orrs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	609a      	str	r2, [r3, #8]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e041      	b.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d004      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40000400 	.word	0x40000400

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e042      	b.n	80034b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe f8b4 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	; 0x24
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f971 	bl	8003744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d175      	bne.n	80035c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Transmit+0x2c>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e06e      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	; 0x21
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f6:	f7fe fa19 	bl	800192c <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02e      	b.n	800358c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f848 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e03a      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	; 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f814 	bl	80035ce <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e006      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	4613      	mov	r3, r2
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035de:	e03b      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d037      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e8:	f7fe f9a0 	bl	800192c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	6a3a      	ldr	r2, [r7, #32]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d302      	bcc.n	80035fe <UART_WaitOnFlagUntilTimeout+0x30>
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e03a      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b80      	cmp	r3, #128	; 0x80
 8003614:	d020      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d01d      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b08      	cmp	r3, #8
 8003628:	d116      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f81d 	bl	8003680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2208      	movs	r2, #8
 800364a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e00f      	b.n	8003678 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	429a      	cmp	r2, r3
 8003674:	d0b4      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b095      	sub	sp, #84	; 0x54
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a8:	643a      	str	r2, [r7, #64]	; 0x40
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d119      	bne.n	800372c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	60bb      	str	r3, [r7, #8]
   return(result);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 0310 	bic.w	r3, r3, #16
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003718:	61ba      	str	r2, [r7, #24]
 800371a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	613b      	str	r3, [r7, #16]
   return(result);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800373a:	bf00      	nop
 800373c:	3754      	adds	r7, #84	; 0x54
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800377e:	f023 030c 	bic.w	r3, r3, #12
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	430b      	orrs	r3, r1
 800378a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <UART_SetConfig+0x114>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff f970 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	e002      	b.n	80037ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7ff f958 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 80037b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	4a22      	ldr	r2, [pc, #136]	; (800385c <UART_SetConfig+0x118>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	0119      	lsls	r1, r3, #4
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <UART_SetConfig+0x118>)
 80037f2:	fba3 0302 	umull	r0, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2064      	movs	r0, #100	; 0x64
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003810:	4419      	add	r1, r3
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fbb2 f2f3 	udiv	r2, r2, r3
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <UART_SetConfig+0x118>)
 800382a:	fba3 0302 	umull	r0, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2064      	movs	r0, #100	; 0x64
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	3332      	adds	r3, #50	; 0x32
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <UART_SetConfig+0x118>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	440a      	add	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40013800 	.word	0x40013800
 800385c:	51eb851f 	.word	0x51eb851f

08003860 <__errno>:
 8003860:	4b01      	ldr	r3, [pc, #4]	; (8003868 <__errno+0x8>)
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000010 	.word	0x20000010

0800386c <__libc_init_array>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	2600      	movs	r6, #0
 8003870:	4d0c      	ldr	r5, [pc, #48]	; (80038a4 <__libc_init_array+0x38>)
 8003872:	4c0d      	ldr	r4, [pc, #52]	; (80038a8 <__libc_init_array+0x3c>)
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	42a6      	cmp	r6, r4
 800387a:	d109      	bne.n	8003890 <__libc_init_array+0x24>
 800387c:	f002 fec4 	bl	8006608 <_init>
 8003880:	2600      	movs	r6, #0
 8003882:	4d0a      	ldr	r5, [pc, #40]	; (80038ac <__libc_init_array+0x40>)
 8003884:	4c0a      	ldr	r4, [pc, #40]	; (80038b0 <__libc_init_array+0x44>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	42a6      	cmp	r6, r4
 800388c:	d105      	bne.n	800389a <__libc_init_array+0x2e>
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	f855 3b04 	ldr.w	r3, [r5], #4
 8003894:	4798      	blx	r3
 8003896:	3601      	adds	r6, #1
 8003898:	e7ee      	b.n	8003878 <__libc_init_array+0xc>
 800389a:	f855 3b04 	ldr.w	r3, [r5], #4
 800389e:	4798      	blx	r3
 80038a0:	3601      	adds	r6, #1
 80038a2:	e7f2      	b.n	800388a <__libc_init_array+0x1e>
 80038a4:	08006adc 	.word	0x08006adc
 80038a8:	08006adc 	.word	0x08006adc
 80038ac:	08006adc 	.word	0x08006adc
 80038b0:	08006ae0 	.word	0x08006ae0

080038b4 <malloc>:
 80038b4:	4b02      	ldr	r3, [pc, #8]	; (80038c0 <malloc+0xc>)
 80038b6:	4601      	mov	r1, r0
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	f000 b85f 	b.w	800397c <_malloc_r>
 80038be:	bf00      	nop
 80038c0:	20000010 	.word	0x20000010

080038c4 <free>:
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <free+0xc>)
 80038c6:	4601      	mov	r1, r0
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	f000 b80b 	b.w	80038e4 <_free_r>
 80038ce:	bf00      	nop
 80038d0:	20000010 	.word	0x20000010

080038d4 <memset>:
 80038d4:	4603      	mov	r3, r0
 80038d6:	4402      	add	r2, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	d100      	bne.n	80038de <memset+0xa>
 80038dc:	4770      	bx	lr
 80038de:	f803 1b01 	strb.w	r1, [r3], #1
 80038e2:	e7f9      	b.n	80038d8 <memset+0x4>

080038e4 <_free_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4605      	mov	r5, r0
 80038e8:	2900      	cmp	r1, #0
 80038ea:	d043      	beq.n	8003974 <_free_r+0x90>
 80038ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038f0:	1f0c      	subs	r4, r1, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	bfb8      	it	lt
 80038f6:	18e4      	addlt	r4, r4, r3
 80038f8:	f001 fbc8 	bl	800508c <__malloc_lock>
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <_free_r+0x94>)
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	4610      	mov	r0, r2
 8003902:	b933      	cbnz	r3, 8003912 <_free_r+0x2e>
 8003904:	6063      	str	r3, [r4, #4]
 8003906:	6014      	str	r4, [r2, #0]
 8003908:	4628      	mov	r0, r5
 800390a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800390e:	f001 bbc3 	b.w	8005098 <__malloc_unlock>
 8003912:	42a3      	cmp	r3, r4
 8003914:	d90a      	bls.n	800392c <_free_r+0x48>
 8003916:	6821      	ldr	r1, [r4, #0]
 8003918:	1862      	adds	r2, r4, r1
 800391a:	4293      	cmp	r3, r2
 800391c:	bf01      	itttt	eq
 800391e:	681a      	ldreq	r2, [r3, #0]
 8003920:	685b      	ldreq	r3, [r3, #4]
 8003922:	1852      	addeq	r2, r2, r1
 8003924:	6022      	streq	r2, [r4, #0]
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	6004      	str	r4, [r0, #0]
 800392a:	e7ed      	b.n	8003908 <_free_r+0x24>
 800392c:	461a      	mov	r2, r3
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b10b      	cbz	r3, 8003936 <_free_r+0x52>
 8003932:	42a3      	cmp	r3, r4
 8003934:	d9fa      	bls.n	800392c <_free_r+0x48>
 8003936:	6811      	ldr	r1, [r2, #0]
 8003938:	1850      	adds	r0, r2, r1
 800393a:	42a0      	cmp	r0, r4
 800393c:	d10b      	bne.n	8003956 <_free_r+0x72>
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	4401      	add	r1, r0
 8003942:	1850      	adds	r0, r2, r1
 8003944:	4283      	cmp	r3, r0
 8003946:	6011      	str	r1, [r2, #0]
 8003948:	d1de      	bne.n	8003908 <_free_r+0x24>
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4401      	add	r1, r0
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	6053      	str	r3, [r2, #4]
 8003954:	e7d8      	b.n	8003908 <_free_r+0x24>
 8003956:	d902      	bls.n	800395e <_free_r+0x7a>
 8003958:	230c      	movs	r3, #12
 800395a:	602b      	str	r3, [r5, #0]
 800395c:	e7d4      	b.n	8003908 <_free_r+0x24>
 800395e:	6820      	ldr	r0, [r4, #0]
 8003960:	1821      	adds	r1, r4, r0
 8003962:	428b      	cmp	r3, r1
 8003964:	bf01      	itttt	eq
 8003966:	6819      	ldreq	r1, [r3, #0]
 8003968:	685b      	ldreq	r3, [r3, #4]
 800396a:	1809      	addeq	r1, r1, r0
 800396c:	6021      	streq	r1, [r4, #0]
 800396e:	6063      	str	r3, [r4, #4]
 8003970:	6054      	str	r4, [r2, #4]
 8003972:	e7c9      	b.n	8003908 <_free_r+0x24>
 8003974:	bd38      	pop	{r3, r4, r5, pc}
 8003976:	bf00      	nop
 8003978:	20000214 	.word	0x20000214

0800397c <_malloc_r>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	1ccd      	adds	r5, r1, #3
 8003980:	f025 0503 	bic.w	r5, r5, #3
 8003984:	3508      	adds	r5, #8
 8003986:	2d0c      	cmp	r5, #12
 8003988:	bf38      	it	cc
 800398a:	250c      	movcc	r5, #12
 800398c:	2d00      	cmp	r5, #0
 800398e:	4606      	mov	r6, r0
 8003990:	db01      	blt.n	8003996 <_malloc_r+0x1a>
 8003992:	42a9      	cmp	r1, r5
 8003994:	d903      	bls.n	800399e <_malloc_r+0x22>
 8003996:	230c      	movs	r3, #12
 8003998:	6033      	str	r3, [r6, #0]
 800399a:	2000      	movs	r0, #0
 800399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800399e:	f001 fb75 	bl	800508c <__malloc_lock>
 80039a2:	4921      	ldr	r1, [pc, #132]	; (8003a28 <_malloc_r+0xac>)
 80039a4:	680a      	ldr	r2, [r1, #0]
 80039a6:	4614      	mov	r4, r2
 80039a8:	b99c      	cbnz	r4, 80039d2 <_malloc_r+0x56>
 80039aa:	4f20      	ldr	r7, [pc, #128]	; (8003a2c <_malloc_r+0xb0>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b923      	cbnz	r3, 80039ba <_malloc_r+0x3e>
 80039b0:	4621      	mov	r1, r4
 80039b2:	4630      	mov	r0, r6
 80039b4:	f000 fc9c 	bl	80042f0 <_sbrk_r>
 80039b8:	6038      	str	r0, [r7, #0]
 80039ba:	4629      	mov	r1, r5
 80039bc:	4630      	mov	r0, r6
 80039be:	f000 fc97 	bl	80042f0 <_sbrk_r>
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	d123      	bne.n	8003a0e <_malloc_r+0x92>
 80039c6:	230c      	movs	r3, #12
 80039c8:	4630      	mov	r0, r6
 80039ca:	6033      	str	r3, [r6, #0]
 80039cc:	f001 fb64 	bl	8005098 <__malloc_unlock>
 80039d0:	e7e3      	b.n	800399a <_malloc_r+0x1e>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	1b5b      	subs	r3, r3, r5
 80039d6:	d417      	bmi.n	8003a08 <_malloc_r+0x8c>
 80039d8:	2b0b      	cmp	r3, #11
 80039da:	d903      	bls.n	80039e4 <_malloc_r+0x68>
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	441c      	add	r4, r3
 80039e0:	6025      	str	r5, [r4, #0]
 80039e2:	e004      	b.n	80039ee <_malloc_r+0x72>
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	42a2      	cmp	r2, r4
 80039e8:	bf0c      	ite	eq
 80039ea:	600b      	streq	r3, [r1, #0]
 80039ec:	6053      	strne	r3, [r2, #4]
 80039ee:	4630      	mov	r0, r6
 80039f0:	f001 fb52 	bl	8005098 <__malloc_unlock>
 80039f4:	f104 000b 	add.w	r0, r4, #11
 80039f8:	1d23      	adds	r3, r4, #4
 80039fa:	f020 0007 	bic.w	r0, r0, #7
 80039fe:	1ac2      	subs	r2, r0, r3
 8003a00:	d0cc      	beq.n	800399c <_malloc_r+0x20>
 8003a02:	1a1b      	subs	r3, r3, r0
 8003a04:	50a3      	str	r3, [r4, r2]
 8003a06:	e7c9      	b.n	800399c <_malloc_r+0x20>
 8003a08:	4622      	mov	r2, r4
 8003a0a:	6864      	ldr	r4, [r4, #4]
 8003a0c:	e7cc      	b.n	80039a8 <_malloc_r+0x2c>
 8003a0e:	1cc4      	adds	r4, r0, #3
 8003a10:	f024 0403 	bic.w	r4, r4, #3
 8003a14:	42a0      	cmp	r0, r4
 8003a16:	d0e3      	beq.n	80039e0 <_malloc_r+0x64>
 8003a18:	1a21      	subs	r1, r4, r0
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f000 fc68 	bl	80042f0 <_sbrk_r>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d1dd      	bne.n	80039e0 <_malloc_r+0x64>
 8003a24:	e7cf      	b.n	80039c6 <_malloc_r+0x4a>
 8003a26:	bf00      	nop
 8003a28:	20000214 	.word	0x20000214
 8003a2c:	20000218 	.word	0x20000218

08003a30 <__cvt>:
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a36:	461f      	mov	r7, r3
 8003a38:	bfbb      	ittet	lt
 8003a3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	461f      	movlt	r7, r3
 8003a40:	2300      	movge	r3, #0
 8003a42:	232d      	movlt	r3, #45	; 0x2d
 8003a44:	b088      	sub	sp, #32
 8003a46:	4614      	mov	r4, r2
 8003a48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a4c:	7013      	strb	r3, [r2, #0]
 8003a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a54:	f023 0820 	bic.w	r8, r3, #32
 8003a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a5c:	d005      	beq.n	8003a6a <__cvt+0x3a>
 8003a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a62:	d100      	bne.n	8003a66 <__cvt+0x36>
 8003a64:	3501      	adds	r5, #1
 8003a66:	2302      	movs	r3, #2
 8003a68:	e000      	b.n	8003a6c <__cvt+0x3c>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	aa07      	add	r2, sp, #28
 8003a6e:	9204      	str	r2, [sp, #16]
 8003a70:	aa06      	add	r2, sp, #24
 8003a72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a76:	e9cd 3500 	strd	r3, r5, [sp]
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	f000 fcf7 	bl	8004470 <_dtoa_r>
 8003a82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a86:	4606      	mov	r6, r0
 8003a88:	d102      	bne.n	8003a90 <__cvt+0x60>
 8003a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a8c:	07db      	lsls	r3, r3, #31
 8003a8e:	d522      	bpl.n	8003ad6 <__cvt+0xa6>
 8003a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a94:	eb06 0905 	add.w	r9, r6, r5
 8003a98:	d110      	bne.n	8003abc <__cvt+0x8c>
 8003a9a:	7833      	ldrb	r3, [r6, #0]
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d10a      	bne.n	8003ab6 <__cvt+0x86>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	f7fc ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8003aac:	b918      	cbnz	r0, 8003ab6 <__cvt+0x86>
 8003aae:	f1c5 0501 	rsb	r5, r5, #1
 8003ab2:	f8ca 5000 	str.w	r5, [sl]
 8003ab6:	f8da 3000 	ldr.w	r3, [sl]
 8003aba:	4499      	add	r9, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f7fc ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ac8:	b108      	cbz	r0, 8003ace <__cvt+0x9e>
 8003aca:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ace:	2230      	movs	r2, #48	; 0x30
 8003ad0:	9b07      	ldr	r3, [sp, #28]
 8003ad2:	454b      	cmp	r3, r9
 8003ad4:	d307      	bcc.n	8003ae6 <__cvt+0xb6>
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	9b07      	ldr	r3, [sp, #28]
 8003ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003adc:	1b9b      	subs	r3, r3, r6
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	b008      	add	sp, #32
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	9107      	str	r1, [sp, #28]
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e7f0      	b.n	8003ad0 <__cvt+0xa0>

08003aee <__exponent>:
 8003aee:	4603      	mov	r3, r0
 8003af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003af2:	2900      	cmp	r1, #0
 8003af4:	f803 2b02 	strb.w	r2, [r3], #2
 8003af8:	bfb6      	itet	lt
 8003afa:	222d      	movlt	r2, #45	; 0x2d
 8003afc:	222b      	movge	r2, #43	; 0x2b
 8003afe:	4249      	neglt	r1, r1
 8003b00:	2909      	cmp	r1, #9
 8003b02:	7042      	strb	r2, [r0, #1]
 8003b04:	dd2b      	ble.n	8003b5e <__exponent+0x70>
 8003b06:	f10d 0407 	add.w	r4, sp, #7
 8003b0a:	46a4      	mov	ip, r4
 8003b0c:	270a      	movs	r7, #10
 8003b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003b12:	460a      	mov	r2, r1
 8003b14:	46a6      	mov	lr, r4
 8003b16:	fb07 1516 	mls	r5, r7, r6, r1
 8003b1a:	2a63      	cmp	r2, #99	; 0x63
 8003b1c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003b20:	4631      	mov	r1, r6
 8003b22:	f104 34ff 	add.w	r4, r4, #4294967295
 8003b26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003b2a:	dcf0      	bgt.n	8003b0e <__exponent+0x20>
 8003b2c:	3130      	adds	r1, #48	; 0x30
 8003b2e:	f1ae 0502 	sub.w	r5, lr, #2
 8003b32:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003b36:	4629      	mov	r1, r5
 8003b38:	1c44      	adds	r4, r0, #1
 8003b3a:	4561      	cmp	r1, ip
 8003b3c:	d30a      	bcc.n	8003b54 <__exponent+0x66>
 8003b3e:	f10d 0209 	add.w	r2, sp, #9
 8003b42:	eba2 020e 	sub.w	r2, r2, lr
 8003b46:	4565      	cmp	r5, ip
 8003b48:	bf88      	it	hi
 8003b4a:	2200      	movhi	r2, #0
 8003b4c:	4413      	add	r3, r2
 8003b4e:	1a18      	subs	r0, r3, r0
 8003b50:	b003      	add	sp, #12
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b58:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003b5c:	e7ed      	b.n	8003b3a <__exponent+0x4c>
 8003b5e:	2330      	movs	r3, #48	; 0x30
 8003b60:	3130      	adds	r1, #48	; 0x30
 8003b62:	7083      	strb	r3, [r0, #2]
 8003b64:	70c1      	strb	r1, [r0, #3]
 8003b66:	1d03      	adds	r3, r0, #4
 8003b68:	e7f1      	b.n	8003b4e <__exponent+0x60>
	...

08003b6c <_printf_float>:
 8003b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	b091      	sub	sp, #68	; 0x44
 8003b72:	460c      	mov	r4, r1
 8003b74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003b78:	4616      	mov	r6, r2
 8003b7a:	461f      	mov	r7, r3
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	f001 fa65 	bl	800504c <_localeconv_r>
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	9309      	str	r3, [sp, #36]	; 0x24
 8003b88:	f7fc fae2 	bl	8000150 <strlen>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8003b90:	f8d8 3000 	ldr.w	r3, [r8]
 8003b94:	900a      	str	r0, [sp, #40]	; 0x28
 8003b96:	3307      	adds	r3, #7
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	f103 0208 	add.w	r2, r3, #8
 8003ba0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ba4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ba8:	f8c8 2000 	str.w	r2, [r8]
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bb4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003bb8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4b9c      	ldr	r3, [pc, #624]	; (8003e38 <_printf_float+0x2cc>)
 8003bc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bc8:	f7fc ff20 	bl	8000a0c <__aeabi_dcmpun>
 8003bcc:	bb70      	cbnz	r0, 8003c2c <_printf_float+0xc0>
 8003bce:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4b98      	ldr	r3, [pc, #608]	; (8003e38 <_printf_float+0x2cc>)
 8003bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd8:	f7fc fefa 	bl	80009d0 <__aeabi_dcmple>
 8003bdc:	bb30      	cbnz	r0, 8003c2c <_printf_float+0xc0>
 8003bde:	2200      	movs	r2, #0
 8003be0:	2300      	movs	r3, #0
 8003be2:	4640      	mov	r0, r8
 8003be4:	4651      	mov	r1, sl
 8003be6:	f7fc fee9 	bl	80009bc <__aeabi_dcmplt>
 8003bea:	b110      	cbz	r0, 8003bf2 <_printf_float+0x86>
 8003bec:	232d      	movs	r3, #45	; 0x2d
 8003bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf2:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <_printf_float+0x2d0>)
 8003bf4:	4892      	ldr	r0, [pc, #584]	; (8003e40 <_printf_float+0x2d4>)
 8003bf6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003bfa:	bf94      	ite	ls
 8003bfc:	4698      	movls	r8, r3
 8003bfe:	4680      	movhi	r8, r0
 8003c00:	2303      	movs	r3, #3
 8003c02:	f04f 0a00 	mov.w	sl, #0
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	f02b 0304 	bic.w	r3, fp, #4
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	4633      	mov	r3, r6
 8003c10:	4621      	mov	r1, r4
 8003c12:	4628      	mov	r0, r5
 8003c14:	9700      	str	r7, [sp, #0]
 8003c16:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c18:	f000 f9d4 	bl	8003fc4 <_printf_common>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	f040 8090 	bne.w	8003d42 <_printf_float+0x1d6>
 8003c22:	f04f 30ff 	mov.w	r0, #4294967295
 8003c26:	b011      	add	sp, #68	; 0x44
 8003c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	4653      	mov	r3, sl
 8003c30:	4640      	mov	r0, r8
 8003c32:	4651      	mov	r1, sl
 8003c34:	f7fc feea 	bl	8000a0c <__aeabi_dcmpun>
 8003c38:	b148      	cbz	r0, 8003c4e <_printf_float+0xe2>
 8003c3a:	f1ba 0f00 	cmp.w	sl, #0
 8003c3e:	bfb8      	it	lt
 8003c40:	232d      	movlt	r3, #45	; 0x2d
 8003c42:	4880      	ldr	r0, [pc, #512]	; (8003e44 <_printf_float+0x2d8>)
 8003c44:	bfb8      	it	lt
 8003c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c4a:	4b7f      	ldr	r3, [pc, #508]	; (8003e48 <_printf_float+0x2dc>)
 8003c4c:	e7d3      	b.n	8003bf6 <_printf_float+0x8a>
 8003c4e:	6863      	ldr	r3, [r4, #4]
 8003c50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	d142      	bne.n	8003cde <_printf_float+0x172>
 8003c58:	2306      	movs	r3, #6
 8003c5a:	6063      	str	r3, [r4, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	9206      	str	r2, [sp, #24]
 8003c60:	aa0e      	add	r2, sp, #56	; 0x38
 8003c62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003c66:	aa0d      	add	r2, sp, #52	; 0x34
 8003c68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003c6c:	9203      	str	r2, [sp, #12]
 8003c6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003c72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	4642      	mov	r2, r8
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4628      	mov	r0, r5
 8003c80:	4653      	mov	r3, sl
 8003c82:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c84:	f7ff fed4 	bl	8003a30 <__cvt>
 8003c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c8a:	4680      	mov	r8, r0
 8003c8c:	2947      	cmp	r1, #71	; 0x47
 8003c8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c90:	d108      	bne.n	8003ca4 <_printf_float+0x138>
 8003c92:	1cc8      	adds	r0, r1, #3
 8003c94:	db02      	blt.n	8003c9c <_printf_float+0x130>
 8003c96:	6863      	ldr	r3, [r4, #4]
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	dd40      	ble.n	8003d1e <_printf_float+0x1b2>
 8003c9c:	f1a9 0902 	sub.w	r9, r9, #2
 8003ca0:	fa5f f989 	uxtb.w	r9, r9
 8003ca4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ca8:	d81f      	bhi.n	8003cea <_printf_float+0x17e>
 8003caa:	464a      	mov	r2, r9
 8003cac:	3901      	subs	r1, #1
 8003cae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cb2:	910d      	str	r1, [sp, #52]	; 0x34
 8003cb4:	f7ff ff1b 	bl	8003aee <__exponent>
 8003cb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cba:	4682      	mov	sl, r0
 8003cbc:	1813      	adds	r3, r2, r0
 8003cbe:	2a01      	cmp	r2, #1
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	dc02      	bgt.n	8003cca <_printf_float+0x15e>
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	07d2      	lsls	r2, r2, #31
 8003cc8:	d501      	bpl.n	8003cce <_printf_float+0x162>
 8003cca:	3301      	adds	r3, #1
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d09b      	beq.n	8003c0e <_printf_float+0xa2>
 8003cd6:	232d      	movs	r3, #45	; 0x2d
 8003cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cdc:	e797      	b.n	8003c0e <_printf_float+0xa2>
 8003cde:	2947      	cmp	r1, #71	; 0x47
 8003ce0:	d1bc      	bne.n	8003c5c <_printf_float+0xf0>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ba      	bne.n	8003c5c <_printf_float+0xf0>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e7b7      	b.n	8003c5a <_printf_float+0xee>
 8003cea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003cee:	d118      	bne.n	8003d22 <_printf_float+0x1b6>
 8003cf0:	2900      	cmp	r1, #0
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	dd0b      	ble.n	8003d0e <_printf_float+0x1a2>
 8003cf6:	6121      	str	r1, [r4, #16]
 8003cf8:	b913      	cbnz	r3, 8003d00 <_printf_float+0x194>
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	07d0      	lsls	r0, r2, #31
 8003cfe:	d502      	bpl.n	8003d06 <_printf_float+0x19a>
 8003d00:	3301      	adds	r3, #1
 8003d02:	440b      	add	r3, r1
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	f04f 0a00 	mov.w	sl, #0
 8003d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d0c:	e7df      	b.n	8003cce <_printf_float+0x162>
 8003d0e:	b913      	cbnz	r3, 8003d16 <_printf_float+0x1aa>
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	07d2      	lsls	r2, r2, #31
 8003d14:	d501      	bpl.n	8003d1a <_printf_float+0x1ae>
 8003d16:	3302      	adds	r3, #2
 8003d18:	e7f4      	b.n	8003d04 <_printf_float+0x198>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e7f2      	b.n	8003d04 <_printf_float+0x198>
 8003d1e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d24:	4299      	cmp	r1, r3
 8003d26:	db05      	blt.n	8003d34 <_printf_float+0x1c8>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	6121      	str	r1, [r4, #16]
 8003d2c:	07d8      	lsls	r0, r3, #31
 8003d2e:	d5ea      	bpl.n	8003d06 <_printf_float+0x19a>
 8003d30:	1c4b      	adds	r3, r1, #1
 8003d32:	e7e7      	b.n	8003d04 <_printf_float+0x198>
 8003d34:	2900      	cmp	r1, #0
 8003d36:	bfcc      	ite	gt
 8003d38:	2201      	movgt	r2, #1
 8003d3a:	f1c1 0202 	rsble	r2, r1, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	e7e0      	b.n	8003d04 <_printf_float+0x198>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	055a      	lsls	r2, r3, #21
 8003d46:	d407      	bmi.n	8003d58 <_printf_float+0x1ec>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b8      	blx	r7
 8003d52:	3001      	adds	r0, #1
 8003d54:	d12b      	bne.n	8003dae <_printf_float+0x242>
 8003d56:	e764      	b.n	8003c22 <_printf_float+0xb6>
 8003d58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003d5c:	f240 80dd 	bls.w	8003f1a <_printf_float+0x3ae>
 8003d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d64:	2200      	movs	r2, #0
 8003d66:	2300      	movs	r3, #0
 8003d68:	f7fc fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	d033      	beq.n	8003dd8 <_printf_float+0x26c>
 8003d70:	2301      	movs	r3, #1
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <_printf_float+0x2e0>)
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	f43f af51 	beq.w	8003c22 <_printf_float+0xb6>
 8003d80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d84:	429a      	cmp	r2, r3
 8003d86:	db02      	blt.n	8003d8e <_printf_float+0x222>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	07d8      	lsls	r0, r3, #31
 8003d8c:	d50f      	bpl.n	8003dae <_printf_float+0x242>
 8003d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f43f af42 	beq.w	8003c22 <_printf_float+0xb6>
 8003d9e:	f04f 0800 	mov.w	r8, #0
 8003da2:	f104 091a 	add.w	r9, r4, #26
 8003da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003da8:	3b01      	subs	r3, #1
 8003daa:	4543      	cmp	r3, r8
 8003dac:	dc09      	bgt.n	8003dc2 <_printf_float+0x256>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	079b      	lsls	r3, r3, #30
 8003db2:	f100 8102 	bmi.w	8003fba <_printf_float+0x44e>
 8003db6:	68e0      	ldr	r0, [r4, #12]
 8003db8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	bfb8      	it	lt
 8003dbe:	4618      	movlt	r0, r3
 8003dc0:	e731      	b.n	8003c26 <_printf_float+0xba>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f af28 	beq.w	8003c22 <_printf_float+0xb6>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	e7e6      	b.n	8003da6 <_printf_float+0x23a>
 8003dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	dc38      	bgt.n	8003e50 <_printf_float+0x2e4>
 8003dde:	2301      	movs	r3, #1
 8003de0:	4631      	mov	r1, r6
 8003de2:	4628      	mov	r0, r5
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <_printf_float+0x2e0>)
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	f43f af1a 	beq.w	8003c22 <_printf_float+0xb6>
 8003dee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d102      	bne.n	8003dfc <_printf_float+0x290>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	07d9      	lsls	r1, r3, #31
 8003dfa:	d5d8      	bpl.n	8003dae <_printf_float+0x242>
 8003dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e00:	4631      	mov	r1, r6
 8003e02:	4628      	mov	r0, r5
 8003e04:	47b8      	blx	r7
 8003e06:	3001      	adds	r0, #1
 8003e08:	f43f af0b 	beq.w	8003c22 <_printf_float+0xb6>
 8003e0c:	f04f 0900 	mov.w	r9, #0
 8003e10:	f104 0a1a 	add.w	sl, r4, #26
 8003e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e16:	425b      	negs	r3, r3
 8003e18:	454b      	cmp	r3, r9
 8003e1a:	dc01      	bgt.n	8003e20 <_printf_float+0x2b4>
 8003e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e1e:	e794      	b.n	8003d4a <_printf_float+0x1de>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4652      	mov	r2, sl
 8003e24:	4631      	mov	r1, r6
 8003e26:	4628      	mov	r0, r5
 8003e28:	47b8      	blx	r7
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	f43f aef9 	beq.w	8003c22 <_printf_float+0xb6>
 8003e30:	f109 0901 	add.w	r9, r9, #1
 8003e34:	e7ee      	b.n	8003e14 <_printf_float+0x2a8>
 8003e36:	bf00      	nop
 8003e38:	7fefffff 	.word	0x7fefffff
 8003e3c:	080066fc 	.word	0x080066fc
 8003e40:	08006700 	.word	0x08006700
 8003e44:	08006708 	.word	0x08006708
 8003e48:	08006704 	.word	0x08006704
 8003e4c:	0800670c 	.word	0x0800670c
 8003e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bfa8      	it	ge
 8003e58:	461a      	movge	r2, r3
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	4691      	mov	r9, r2
 8003e5e:	dc37      	bgt.n	8003ed0 <_printf_float+0x364>
 8003e60:	f04f 0b00 	mov.w	fp, #0
 8003e64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e68:	f104 021a 	add.w	r2, r4, #26
 8003e6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003e70:	ebaa 0309 	sub.w	r3, sl, r9
 8003e74:	455b      	cmp	r3, fp
 8003e76:	dc33      	bgt.n	8003ee0 <_printf_float+0x374>
 8003e78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	db3b      	blt.n	8003ef8 <_printf_float+0x38c>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	07da      	lsls	r2, r3, #31
 8003e84:	d438      	bmi.n	8003ef8 <_printf_float+0x38c>
 8003e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e8a:	eba2 030a 	sub.w	r3, r2, sl
 8003e8e:	eba2 0901 	sub.w	r9, r2, r1
 8003e92:	4599      	cmp	r9, r3
 8003e94:	bfa8      	it	ge
 8003e96:	4699      	movge	r9, r3
 8003e98:	f1b9 0f00 	cmp.w	r9, #0
 8003e9c:	dc34      	bgt.n	8003f08 <_printf_float+0x39c>
 8003e9e:	f04f 0800 	mov.w	r8, #0
 8003ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ea6:	f104 0a1a 	add.w	sl, r4, #26
 8003eaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	eba3 0309 	sub.w	r3, r3, r9
 8003eb4:	4543      	cmp	r3, r8
 8003eb6:	f77f af7a 	ble.w	8003dae <_printf_float+0x242>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4652      	mov	r2, sl
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f43f aeac 	beq.w	8003c22 <_printf_float+0xb6>
 8003eca:	f108 0801 	add.w	r8, r8, #1
 8003ece:	e7ec      	b.n	8003eaa <_printf_float+0x33e>
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	47b8      	blx	r7
 8003eda:	3001      	adds	r0, #1
 8003edc:	d1c0      	bne.n	8003e60 <_printf_float+0x2f4>
 8003ede:	e6a0      	b.n	8003c22 <_printf_float+0xb6>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ee8:	47b8      	blx	r7
 8003eea:	3001      	adds	r0, #1
 8003eec:	f43f ae99 	beq.w	8003c22 <_printf_float+0xb6>
 8003ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ef2:	f10b 0b01 	add.w	fp, fp, #1
 8003ef6:	e7b9      	b.n	8003e6c <_printf_float+0x300>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	d1bf      	bne.n	8003e86 <_printf_float+0x31a>
 8003f06:	e68c      	b.n	8003c22 <_printf_float+0xb6>
 8003f08:	464b      	mov	r3, r9
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	eb08 020a 	add.w	r2, r8, sl
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	d1c2      	bne.n	8003e9e <_printf_float+0x332>
 8003f18:	e683      	b.n	8003c22 <_printf_float+0xb6>
 8003f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f1c:	2a01      	cmp	r2, #1
 8003f1e:	dc01      	bgt.n	8003f24 <_printf_float+0x3b8>
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d537      	bpl.n	8003f94 <_printf_float+0x428>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4642      	mov	r2, r8
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f ae77 	beq.w	8003c22 <_printf_float+0xb6>
 8003f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f38:	4631      	mov	r1, r6
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	47b8      	blx	r7
 8003f3e:	3001      	adds	r0, #1
 8003f40:	f43f ae6f 	beq.w	8003c22 <_printf_float+0xb6>
 8003f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f7fc fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8003f50:	b9d8      	cbnz	r0, 8003f8a <_printf_float+0x41e>
 8003f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f54:	f108 0201 	add.w	r2, r8, #1
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	d10e      	bne.n	8003f82 <_printf_float+0x416>
 8003f64:	e65d      	b.n	8003c22 <_printf_float+0xb6>
 8003f66:	2301      	movs	r3, #1
 8003f68:	464a      	mov	r2, r9
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f ae56 	beq.w	8003c22 <_printf_float+0xb6>
 8003f76:	f108 0801 	add.w	r8, r8, #1
 8003f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	4543      	cmp	r3, r8
 8003f80:	dcf1      	bgt.n	8003f66 <_printf_float+0x3fa>
 8003f82:	4653      	mov	r3, sl
 8003f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003f88:	e6e0      	b.n	8003d4c <_printf_float+0x1e0>
 8003f8a:	f04f 0800 	mov.w	r8, #0
 8003f8e:	f104 091a 	add.w	r9, r4, #26
 8003f92:	e7f2      	b.n	8003f7a <_printf_float+0x40e>
 8003f94:	2301      	movs	r3, #1
 8003f96:	4642      	mov	r2, r8
 8003f98:	e7df      	b.n	8003f5a <_printf_float+0x3ee>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	464a      	mov	r2, r9
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f ae3c 	beq.w	8003c22 <_printf_float+0xb6>
 8003faa:	f108 0801 	add.w	r8, r8, #1
 8003fae:	68e3      	ldr	r3, [r4, #12]
 8003fb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003fb2:	1a5b      	subs	r3, r3, r1
 8003fb4:	4543      	cmp	r3, r8
 8003fb6:	dcf0      	bgt.n	8003f9a <_printf_float+0x42e>
 8003fb8:	e6fd      	b.n	8003db6 <_printf_float+0x24a>
 8003fba:	f04f 0800 	mov.w	r8, #0
 8003fbe:	f104 0919 	add.w	r9, r4, #25
 8003fc2:	e7f4      	b.n	8003fae <_printf_float+0x442>

08003fc4 <_printf_common>:
 8003fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	4616      	mov	r6, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	688a      	ldr	r2, [r1, #8]
 8003fce:	690b      	ldr	r3, [r1, #16]
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	bfb8      	it	lt
 8003fd6:	4613      	movlt	r3, r2
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fde:	460c      	mov	r4, r1
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	b10a      	cbz	r2, 8003fea <_printf_common+0x26>
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	6033      	str	r3, [r6, #0]
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	0699      	lsls	r1, r3, #26
 8003fee:	bf42      	ittt	mi
 8003ff0:	6833      	ldrmi	r3, [r6, #0]
 8003ff2:	3302      	addmi	r3, #2
 8003ff4:	6033      	strmi	r3, [r6, #0]
 8003ff6:	6825      	ldr	r5, [r4, #0]
 8003ff8:	f015 0506 	ands.w	r5, r5, #6
 8003ffc:	d106      	bne.n	800400c <_printf_common+0x48>
 8003ffe:	f104 0a19 	add.w	sl, r4, #25
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	6832      	ldr	r2, [r6, #0]
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	42ab      	cmp	r3, r5
 800400a:	dc28      	bgt.n	800405e <_printf_common+0x9a>
 800400c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004010:	1e13      	subs	r3, r2, #0
 8004012:	6822      	ldr	r2, [r4, #0]
 8004014:	bf18      	it	ne
 8004016:	2301      	movne	r3, #1
 8004018:	0692      	lsls	r2, r2, #26
 800401a:	d42d      	bmi.n	8004078 <_printf_common+0xb4>
 800401c:	4649      	mov	r1, r9
 800401e:	4638      	mov	r0, r7
 8004020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004024:	47c0      	blx	r8
 8004026:	3001      	adds	r0, #1
 8004028:	d020      	beq.n	800406c <_printf_common+0xa8>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	68e5      	ldr	r5, [r4, #12]
 800402e:	f003 0306 	and.w	r3, r3, #6
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf18      	it	ne
 8004036:	2500      	movne	r5, #0
 8004038:	6832      	ldr	r2, [r6, #0]
 800403a:	f04f 0600 	mov.w	r6, #0
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	bf08      	it	eq
 8004042:	1aad      	subeq	r5, r5, r2
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	bf08      	it	eq
 8004048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800404c:	4293      	cmp	r3, r2
 800404e:	bfc4      	itt	gt
 8004050:	1a9b      	subgt	r3, r3, r2
 8004052:	18ed      	addgt	r5, r5, r3
 8004054:	341a      	adds	r4, #26
 8004056:	42b5      	cmp	r5, r6
 8004058:	d11a      	bne.n	8004090 <_printf_common+0xcc>
 800405a:	2000      	movs	r0, #0
 800405c:	e008      	b.n	8004070 <_printf_common+0xac>
 800405e:	2301      	movs	r3, #1
 8004060:	4652      	mov	r2, sl
 8004062:	4649      	mov	r1, r9
 8004064:	4638      	mov	r0, r7
 8004066:	47c0      	blx	r8
 8004068:	3001      	adds	r0, #1
 800406a:	d103      	bne.n	8004074 <_printf_common+0xb0>
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	3501      	adds	r5, #1
 8004076:	e7c4      	b.n	8004002 <_printf_common+0x3e>
 8004078:	2030      	movs	r0, #48	; 0x30
 800407a:	18e1      	adds	r1, r4, r3
 800407c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004086:	4422      	add	r2, r4
 8004088:	3302      	adds	r3, #2
 800408a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800408e:	e7c5      	b.n	800401c <_printf_common+0x58>
 8004090:	2301      	movs	r3, #1
 8004092:	4622      	mov	r2, r4
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	47c0      	blx	r8
 800409a:	3001      	adds	r0, #1
 800409c:	d0e6      	beq.n	800406c <_printf_common+0xa8>
 800409e:	3601      	adds	r6, #1
 80040a0:	e7d9      	b.n	8004056 <_printf_common+0x92>
	...

080040a4 <_printf_i>:
 80040a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	460c      	mov	r4, r1
 80040aa:	7e27      	ldrb	r7, [r4, #24]
 80040ac:	4691      	mov	r9, r2
 80040ae:	2f78      	cmp	r7, #120	; 0x78
 80040b0:	4680      	mov	r8, r0
 80040b2:	469a      	mov	sl, r3
 80040b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ba:	d807      	bhi.n	80040cc <_printf_i+0x28>
 80040bc:	2f62      	cmp	r7, #98	; 0x62
 80040be:	d80a      	bhi.n	80040d6 <_printf_i+0x32>
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	f000 80d9 	beq.w	8004278 <_printf_i+0x1d4>
 80040c6:	2f58      	cmp	r7, #88	; 0x58
 80040c8:	f000 80a4 	beq.w	8004214 <_printf_i+0x170>
 80040cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040d4:	e03a      	b.n	800414c <_printf_i+0xa8>
 80040d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040da:	2b15      	cmp	r3, #21
 80040dc:	d8f6      	bhi.n	80040cc <_printf_i+0x28>
 80040de:	a001      	add	r0, pc, #4	; (adr r0, 80040e4 <_printf_i+0x40>)
 80040e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	08004151 	.word	0x08004151
 80040ec:	080040cd 	.word	0x080040cd
 80040f0:	080040cd 	.word	0x080040cd
 80040f4:	080040cd 	.word	0x080040cd
 80040f8:	080040cd 	.word	0x080040cd
 80040fc:	08004151 	.word	0x08004151
 8004100:	080040cd 	.word	0x080040cd
 8004104:	080040cd 	.word	0x080040cd
 8004108:	080040cd 	.word	0x080040cd
 800410c:	080040cd 	.word	0x080040cd
 8004110:	0800425f 	.word	0x0800425f
 8004114:	08004181 	.word	0x08004181
 8004118:	08004241 	.word	0x08004241
 800411c:	080040cd 	.word	0x080040cd
 8004120:	080040cd 	.word	0x080040cd
 8004124:	08004281 	.word	0x08004281
 8004128:	080040cd 	.word	0x080040cd
 800412c:	08004181 	.word	0x08004181
 8004130:	080040cd 	.word	0x080040cd
 8004134:	080040cd 	.word	0x080040cd
 8004138:	08004249 	.word	0x08004249
 800413c:	680b      	ldr	r3, [r1, #0]
 800413e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	600a      	str	r2, [r1, #0]
 8004148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800414c:	2301      	movs	r3, #1
 800414e:	e0a4      	b.n	800429a <_printf_i+0x1f6>
 8004150:	6825      	ldr	r5, [r4, #0]
 8004152:	6808      	ldr	r0, [r1, #0]
 8004154:	062e      	lsls	r6, r5, #24
 8004156:	f100 0304 	add.w	r3, r0, #4
 800415a:	d50a      	bpl.n	8004172 <_printf_i+0xce>
 800415c:	6805      	ldr	r5, [r0, #0]
 800415e:	600b      	str	r3, [r1, #0]
 8004160:	2d00      	cmp	r5, #0
 8004162:	da03      	bge.n	800416c <_printf_i+0xc8>
 8004164:	232d      	movs	r3, #45	; 0x2d
 8004166:	426d      	negs	r5, r5
 8004168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800416c:	230a      	movs	r3, #10
 800416e:	485e      	ldr	r0, [pc, #376]	; (80042e8 <_printf_i+0x244>)
 8004170:	e019      	b.n	80041a6 <_printf_i+0x102>
 8004172:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004176:	6805      	ldr	r5, [r0, #0]
 8004178:	600b      	str	r3, [r1, #0]
 800417a:	bf18      	it	ne
 800417c:	b22d      	sxthne	r5, r5
 800417e:	e7ef      	b.n	8004160 <_printf_i+0xbc>
 8004180:	680b      	ldr	r3, [r1, #0]
 8004182:	6825      	ldr	r5, [r4, #0]
 8004184:	1d18      	adds	r0, r3, #4
 8004186:	6008      	str	r0, [r1, #0]
 8004188:	0628      	lsls	r0, r5, #24
 800418a:	d501      	bpl.n	8004190 <_printf_i+0xec>
 800418c:	681d      	ldr	r5, [r3, #0]
 800418e:	e002      	b.n	8004196 <_printf_i+0xf2>
 8004190:	0669      	lsls	r1, r5, #25
 8004192:	d5fb      	bpl.n	800418c <_printf_i+0xe8>
 8004194:	881d      	ldrh	r5, [r3, #0]
 8004196:	2f6f      	cmp	r7, #111	; 0x6f
 8004198:	bf0c      	ite	eq
 800419a:	2308      	moveq	r3, #8
 800419c:	230a      	movne	r3, #10
 800419e:	4852      	ldr	r0, [pc, #328]	; (80042e8 <_printf_i+0x244>)
 80041a0:	2100      	movs	r1, #0
 80041a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041a6:	6866      	ldr	r6, [r4, #4]
 80041a8:	2e00      	cmp	r6, #0
 80041aa:	bfa8      	it	ge
 80041ac:	6821      	ldrge	r1, [r4, #0]
 80041ae:	60a6      	str	r6, [r4, #8]
 80041b0:	bfa4      	itt	ge
 80041b2:	f021 0104 	bicge.w	r1, r1, #4
 80041b6:	6021      	strge	r1, [r4, #0]
 80041b8:	b90d      	cbnz	r5, 80041be <_printf_i+0x11a>
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	d04d      	beq.n	800425a <_printf_i+0x1b6>
 80041be:	4616      	mov	r6, r2
 80041c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80041c4:	fb03 5711 	mls	r7, r3, r1, r5
 80041c8:	5dc7      	ldrb	r7, [r0, r7]
 80041ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041ce:	462f      	mov	r7, r5
 80041d0:	42bb      	cmp	r3, r7
 80041d2:	460d      	mov	r5, r1
 80041d4:	d9f4      	bls.n	80041c0 <_printf_i+0x11c>
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d10b      	bne.n	80041f2 <_printf_i+0x14e>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	07df      	lsls	r7, r3, #31
 80041de:	d508      	bpl.n	80041f2 <_printf_i+0x14e>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	6861      	ldr	r1, [r4, #4]
 80041e4:	4299      	cmp	r1, r3
 80041e6:	bfde      	ittt	le
 80041e8:	2330      	movle	r3, #48	; 0x30
 80041ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041f2:	1b92      	subs	r2, r2, r6
 80041f4:	6122      	str	r2, [r4, #16]
 80041f6:	464b      	mov	r3, r9
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	aa03      	add	r2, sp, #12
 8004202:	f7ff fedf 	bl	8003fc4 <_printf_common>
 8004206:	3001      	adds	r0, #1
 8004208:	d14c      	bne.n	80042a4 <_printf_i+0x200>
 800420a:	f04f 30ff 	mov.w	r0, #4294967295
 800420e:	b004      	add	sp, #16
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	4834      	ldr	r0, [pc, #208]	; (80042e8 <_printf_i+0x244>)
 8004216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800421a:	680e      	ldr	r6, [r1, #0]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004222:	061f      	lsls	r7, r3, #24
 8004224:	600e      	str	r6, [r1, #0]
 8004226:	d514      	bpl.n	8004252 <_printf_i+0x1ae>
 8004228:	07d9      	lsls	r1, r3, #31
 800422a:	bf44      	itt	mi
 800422c:	f043 0320 	orrmi.w	r3, r3, #32
 8004230:	6023      	strmi	r3, [r4, #0]
 8004232:	b91d      	cbnz	r5, 800423c <_printf_i+0x198>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	2310      	movs	r3, #16
 800423e:	e7af      	b.n	80041a0 <_printf_i+0xfc>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	f043 0320 	orr.w	r3, r3, #32
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	2378      	movs	r3, #120	; 0x78
 800424a:	4828      	ldr	r0, [pc, #160]	; (80042ec <_printf_i+0x248>)
 800424c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004250:	e7e3      	b.n	800421a <_printf_i+0x176>
 8004252:	065e      	lsls	r6, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2ad      	uxthmi	r5, r5
 8004258:	e7e6      	b.n	8004228 <_printf_i+0x184>
 800425a:	4616      	mov	r6, r2
 800425c:	e7bb      	b.n	80041d6 <_printf_i+0x132>
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	6826      	ldr	r6, [r4, #0]
 8004262:	1d1d      	adds	r5, r3, #4
 8004264:	6960      	ldr	r0, [r4, #20]
 8004266:	600d      	str	r5, [r1, #0]
 8004268:	0635      	lsls	r5, r6, #24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	d501      	bpl.n	8004272 <_printf_i+0x1ce>
 800426e:	6018      	str	r0, [r3, #0]
 8004270:	e002      	b.n	8004278 <_printf_i+0x1d4>
 8004272:	0671      	lsls	r1, r6, #25
 8004274:	d5fb      	bpl.n	800426e <_printf_i+0x1ca>
 8004276:	8018      	strh	r0, [r3, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	4616      	mov	r6, r2
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	e7ba      	b.n	80041f6 <_printf_i+0x152>
 8004280:	680b      	ldr	r3, [r1, #0]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	600a      	str	r2, [r1, #0]
 8004286:	681e      	ldr	r6, [r3, #0]
 8004288:	2100      	movs	r1, #0
 800428a:	4630      	mov	r0, r6
 800428c:	6862      	ldr	r2, [r4, #4]
 800428e:	f000 fee1 	bl	8005054 <memchr>
 8004292:	b108      	cbz	r0, 8004298 <_printf_i+0x1f4>
 8004294:	1b80      	subs	r0, r0, r6
 8004296:	6060      	str	r0, [r4, #4]
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a2:	e7a8      	b.n	80041f6 <_printf_i+0x152>
 80042a4:	4632      	mov	r2, r6
 80042a6:	4649      	mov	r1, r9
 80042a8:	4640      	mov	r0, r8
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	47d0      	blx	sl
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0ab      	beq.n	800420a <_printf_i+0x166>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d413      	bmi.n	80042e0 <_printf_i+0x23c>
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	4298      	cmp	r0, r3
 80042be:	bfb8      	it	lt
 80042c0:	4618      	movlt	r0, r3
 80042c2:	e7a4      	b.n	800420e <_printf_i+0x16a>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4632      	mov	r2, r6
 80042c8:	4649      	mov	r1, r9
 80042ca:	4640      	mov	r0, r8
 80042cc:	47d0      	blx	sl
 80042ce:	3001      	adds	r0, #1
 80042d0:	d09b      	beq.n	800420a <_printf_i+0x166>
 80042d2:	3501      	adds	r5, #1
 80042d4:	68e3      	ldr	r3, [r4, #12]
 80042d6:	9903      	ldr	r1, [sp, #12]
 80042d8:	1a5b      	subs	r3, r3, r1
 80042da:	42ab      	cmp	r3, r5
 80042dc:	dcf2      	bgt.n	80042c4 <_printf_i+0x220>
 80042de:	e7eb      	b.n	80042b8 <_printf_i+0x214>
 80042e0:	2500      	movs	r5, #0
 80042e2:	f104 0619 	add.w	r6, r4, #25
 80042e6:	e7f5      	b.n	80042d4 <_printf_i+0x230>
 80042e8:	0800670e 	.word	0x0800670e
 80042ec:	0800671f 	.word	0x0800671f

080042f0 <_sbrk_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	; (800430c <_sbrk_r+0x1c>)
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fd fa5c 	bl	80017b8 <_sbrk>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_sbrk_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_sbrk_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	20000314 	.word	0x20000314

08004310 <siprintf>:
 8004310:	b40e      	push	{r1, r2, r3}
 8004312:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004316:	b500      	push	{lr}
 8004318:	b09c      	sub	sp, #112	; 0x70
 800431a:	ab1d      	add	r3, sp, #116	; 0x74
 800431c:	9002      	str	r0, [sp, #8]
 800431e:	9006      	str	r0, [sp, #24]
 8004320:	9107      	str	r1, [sp, #28]
 8004322:	9104      	str	r1, [sp, #16]
 8004324:	4808      	ldr	r0, [pc, #32]	; (8004348 <siprintf+0x38>)
 8004326:	4909      	ldr	r1, [pc, #36]	; (800434c <siprintf+0x3c>)
 8004328:	f853 2b04 	ldr.w	r2, [r3], #4
 800432c:	9105      	str	r1, [sp, #20]
 800432e:	6800      	ldr	r0, [r0, #0]
 8004330:	a902      	add	r1, sp, #8
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	f001 faa2 	bl	800587c <_svfiprintf_r>
 8004338:	2200      	movs	r2, #0
 800433a:	9b02      	ldr	r3, [sp, #8]
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	b01c      	add	sp, #112	; 0x70
 8004340:	f85d eb04 	ldr.w	lr, [sp], #4
 8004344:	b003      	add	sp, #12
 8004346:	4770      	bx	lr
 8004348:	20000010 	.word	0x20000010
 800434c:	ffff0208 	.word	0xffff0208

08004350 <quorem>:
 8004350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	6903      	ldr	r3, [r0, #16]
 8004356:	690c      	ldr	r4, [r1, #16]
 8004358:	4607      	mov	r7, r0
 800435a:	42a3      	cmp	r3, r4
 800435c:	f2c0 8083 	blt.w	8004466 <quorem+0x116>
 8004360:	3c01      	subs	r4, #1
 8004362:	f100 0514 	add.w	r5, r0, #20
 8004366:	f101 0814 	add.w	r8, r1, #20
 800436a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004378:	3301      	adds	r3, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004380:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004384:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004388:	d332      	bcc.n	80043f0 <quorem+0xa0>
 800438a:	f04f 0e00 	mov.w	lr, #0
 800438e:	4640      	mov	r0, r8
 8004390:	46ac      	mov	ip, r5
 8004392:	46f2      	mov	sl, lr
 8004394:	f850 2b04 	ldr.w	r2, [r0], #4
 8004398:	b293      	uxth	r3, r2
 800439a:	fb06 e303 	mla	r3, r6, r3, lr
 800439e:	0c12      	lsrs	r2, r2, #16
 80043a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80043a4:	fb06 e202 	mla	r2, r6, r2, lr
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	ebaa 0303 	sub.w	r3, sl, r3
 80043ae:	f8dc a000 	ldr.w	sl, [ip]
 80043b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80043b6:	fa1f fa8a 	uxth.w	sl, sl
 80043ba:	4453      	add	r3, sl
 80043bc:	fa1f fa82 	uxth.w	sl, r2
 80043c0:	f8dc 2000 	ldr.w	r2, [ip]
 80043c4:	4581      	cmp	r9, r0
 80043c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80043ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80043d8:	f84c 3b04 	str.w	r3, [ip], #4
 80043dc:	d2da      	bcs.n	8004394 <quorem+0x44>
 80043de:	f855 300b 	ldr.w	r3, [r5, fp]
 80043e2:	b92b      	cbnz	r3, 80043f0 <quorem+0xa0>
 80043e4:	9b01      	ldr	r3, [sp, #4]
 80043e6:	3b04      	subs	r3, #4
 80043e8:	429d      	cmp	r5, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	d32f      	bcc.n	800444e <quorem+0xfe>
 80043ee:	613c      	str	r4, [r7, #16]
 80043f0:	4638      	mov	r0, r7
 80043f2:	f001 f8d1 	bl	8005598 <__mcmp>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	db25      	blt.n	8004446 <quorem+0xf6>
 80043fa:	4628      	mov	r0, r5
 80043fc:	f04f 0c00 	mov.w	ip, #0
 8004400:	3601      	adds	r6, #1
 8004402:	f858 1b04 	ldr.w	r1, [r8], #4
 8004406:	f8d0 e000 	ldr.w	lr, [r0]
 800440a:	b28b      	uxth	r3, r1
 800440c:	ebac 0303 	sub.w	r3, ip, r3
 8004410:	fa1f f28e 	uxth.w	r2, lr
 8004414:	4413      	add	r3, r2
 8004416:	0c0a      	lsrs	r2, r1, #16
 8004418:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800441c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004420:	b29b      	uxth	r3, r3
 8004422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004426:	45c1      	cmp	r9, r8
 8004428:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800442c:	f840 3b04 	str.w	r3, [r0], #4
 8004430:	d2e7      	bcs.n	8004402 <quorem+0xb2>
 8004432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800443a:	b922      	cbnz	r2, 8004446 <quorem+0xf6>
 800443c:	3b04      	subs	r3, #4
 800443e:	429d      	cmp	r5, r3
 8004440:	461a      	mov	r2, r3
 8004442:	d30a      	bcc.n	800445a <quorem+0x10a>
 8004444:	613c      	str	r4, [r7, #16]
 8004446:	4630      	mov	r0, r6
 8004448:	b003      	add	sp, #12
 800444a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	3b04      	subs	r3, #4
 8004452:	2a00      	cmp	r2, #0
 8004454:	d1cb      	bne.n	80043ee <quorem+0x9e>
 8004456:	3c01      	subs	r4, #1
 8004458:	e7c6      	b.n	80043e8 <quorem+0x98>
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	3b04      	subs	r3, #4
 800445e:	2a00      	cmp	r2, #0
 8004460:	d1f0      	bne.n	8004444 <quorem+0xf4>
 8004462:	3c01      	subs	r4, #1
 8004464:	e7eb      	b.n	800443e <quorem+0xee>
 8004466:	2000      	movs	r0, #0
 8004468:	e7ee      	b.n	8004448 <quorem+0xf8>
 800446a:	0000      	movs	r0, r0
 800446c:	0000      	movs	r0, r0
	...

08004470 <_dtoa_r>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	4616      	mov	r6, r2
 8004476:	461f      	mov	r7, r3
 8004478:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800447a:	b099      	sub	sp, #100	; 0x64
 800447c:	4605      	mov	r5, r0
 800447e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004482:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004486:	b974      	cbnz	r4, 80044a6 <_dtoa_r+0x36>
 8004488:	2010      	movs	r0, #16
 800448a:	f7ff fa13 	bl	80038b4 <malloc>
 800448e:	4602      	mov	r2, r0
 8004490:	6268      	str	r0, [r5, #36]	; 0x24
 8004492:	b920      	cbnz	r0, 800449e <_dtoa_r+0x2e>
 8004494:	21ea      	movs	r1, #234	; 0xea
 8004496:	4bae      	ldr	r3, [pc, #696]	; (8004750 <_dtoa_r+0x2e0>)
 8004498:	48ae      	ldr	r0, [pc, #696]	; (8004754 <_dtoa_r+0x2e4>)
 800449a:	f001 faef 	bl	8005a7c <__assert_func>
 800449e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044a2:	6004      	str	r4, [r0, #0]
 80044a4:	60c4      	str	r4, [r0, #12]
 80044a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	b151      	cbz	r1, 80044c2 <_dtoa_r+0x52>
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	2301      	movs	r3, #1
 80044b0:	4093      	lsls	r3, r2
 80044b2:	604a      	str	r2, [r1, #4]
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fe34 	bl	8005124 <_Bfree>
 80044bc:	2200      	movs	r2, #0
 80044be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	1e3b      	subs	r3, r7, #0
 80044c4:	bfaf      	iteee	ge
 80044c6:	2300      	movge	r3, #0
 80044c8:	2201      	movlt	r2, #1
 80044ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80044ce:	9305      	strlt	r3, [sp, #20]
 80044d0:	bfa8      	it	ge
 80044d2:	f8c8 3000 	strge.w	r3, [r8]
 80044d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80044da:	4b9f      	ldr	r3, [pc, #636]	; (8004758 <_dtoa_r+0x2e8>)
 80044dc:	bfb8      	it	lt
 80044de:	f8c8 2000 	strlt.w	r2, [r8]
 80044e2:	ea33 0309 	bics.w	r3, r3, r9
 80044e6:	d119      	bne.n	800451c <_dtoa_r+0xac>
 80044e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80044ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044f4:	4333      	orrs	r3, r6
 80044f6:	f000 8580 	beq.w	8004ffa <_dtoa_r+0xb8a>
 80044fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044fc:	b953      	cbnz	r3, 8004514 <_dtoa_r+0xa4>
 80044fe:	4b97      	ldr	r3, [pc, #604]	; (800475c <_dtoa_r+0x2ec>)
 8004500:	e022      	b.n	8004548 <_dtoa_r+0xd8>
 8004502:	4b97      	ldr	r3, [pc, #604]	; (8004760 <_dtoa_r+0x2f0>)
 8004504:	9308      	str	r3, [sp, #32]
 8004506:	3308      	adds	r3, #8
 8004508:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	9808      	ldr	r0, [sp, #32]
 800450e:	b019      	add	sp, #100	; 0x64
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004514:	4b91      	ldr	r3, [pc, #580]	; (800475c <_dtoa_r+0x2ec>)
 8004516:	9308      	str	r3, [sp, #32]
 8004518:	3303      	adds	r3, #3
 800451a:	e7f5      	b.n	8004508 <_dtoa_r+0x98>
 800451c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004520:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	2300      	movs	r3, #0
 800452c:	f7fc fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 8004530:	4680      	mov	r8, r0
 8004532:	b158      	cbz	r0, 800454c <_dtoa_r+0xdc>
 8004534:	2301      	movs	r3, #1
 8004536:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8559 	beq.w	8004ff4 <_dtoa_r+0xb84>
 8004542:	4888      	ldr	r0, [pc, #544]	; (8004764 <_dtoa_r+0x2f4>)
 8004544:	6018      	str	r0, [r3, #0]
 8004546:	1e43      	subs	r3, r0, #1
 8004548:	9308      	str	r3, [sp, #32]
 800454a:	e7df      	b.n	800450c <_dtoa_r+0x9c>
 800454c:	ab16      	add	r3, sp, #88	; 0x58
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	ab17      	add	r3, sp, #92	; 0x5c
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	4628      	mov	r0, r5
 8004556:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800455a:	f001 f8c9 	bl	80056f0 <__d2b>
 800455e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004562:	4682      	mov	sl, r0
 8004564:	2c00      	cmp	r4, #0
 8004566:	d07e      	beq.n	8004666 <_dtoa_r+0x1f6>
 8004568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800456c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800456e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004576:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800457a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800457e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004582:	2200      	movs	r2, #0
 8004584:	4b78      	ldr	r3, [pc, #480]	; (8004768 <_dtoa_r+0x2f8>)
 8004586:	f7fb fdef 	bl	8000168 <__aeabi_dsub>
 800458a:	a36b      	add	r3, pc, #428	; (adr r3, 8004738 <_dtoa_r+0x2c8>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fb ffa2 	bl	80004d8 <__aeabi_dmul>
 8004594:	a36a      	add	r3, pc, #424	; (adr r3, 8004740 <_dtoa_r+0x2d0>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fb fde7 	bl	800016c <__adddf3>
 800459e:	4606      	mov	r6, r0
 80045a0:	4620      	mov	r0, r4
 80045a2:	460f      	mov	r7, r1
 80045a4:	f7fb ff2e 	bl	8000404 <__aeabi_i2d>
 80045a8:	a367      	add	r3, pc, #412	; (adr r3, 8004748 <_dtoa_r+0x2d8>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fb ff93 	bl	80004d8 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4630      	mov	r0, r6
 80045b8:	4639      	mov	r1, r7
 80045ba:	f7fb fdd7 	bl	800016c <__adddf3>
 80045be:	4606      	mov	r6, r0
 80045c0:	460f      	mov	r7, r1
 80045c2:	f7fc fa39 	bl	8000a38 <__aeabi_d2iz>
 80045c6:	2200      	movs	r2, #0
 80045c8:	4681      	mov	r9, r0
 80045ca:	2300      	movs	r3, #0
 80045cc:	4630      	mov	r0, r6
 80045ce:	4639      	mov	r1, r7
 80045d0:	f7fc f9f4 	bl	80009bc <__aeabi_dcmplt>
 80045d4:	b148      	cbz	r0, 80045ea <_dtoa_r+0x17a>
 80045d6:	4648      	mov	r0, r9
 80045d8:	f7fb ff14 	bl	8000404 <__aeabi_i2d>
 80045dc:	4632      	mov	r2, r6
 80045de:	463b      	mov	r3, r7
 80045e0:	f7fc f9e2 	bl	80009a8 <__aeabi_dcmpeq>
 80045e4:	b908      	cbnz	r0, 80045ea <_dtoa_r+0x17a>
 80045e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80045ea:	f1b9 0f16 	cmp.w	r9, #22
 80045ee:	d857      	bhi.n	80046a0 <_dtoa_r+0x230>
 80045f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045f4:	4b5d      	ldr	r3, [pc, #372]	; (800476c <_dtoa_r+0x2fc>)
 80045f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f7fc f9dd 	bl	80009bc <__aeabi_dcmplt>
 8004602:	2800      	cmp	r0, #0
 8004604:	d04e      	beq.n	80046a4 <_dtoa_r+0x234>
 8004606:	2300      	movs	r3, #0
 8004608:	f109 39ff 	add.w	r9, r9, #4294967295
 800460c:	930f      	str	r3, [sp, #60]	; 0x3c
 800460e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004610:	1b1c      	subs	r4, r3, r4
 8004612:	1e63      	subs	r3, r4, #1
 8004614:	9309      	str	r3, [sp, #36]	; 0x24
 8004616:	bf49      	itett	mi
 8004618:	f1c4 0301 	rsbmi	r3, r4, #1
 800461c:	2300      	movpl	r3, #0
 800461e:	9306      	strmi	r3, [sp, #24]
 8004620:	2300      	movmi	r3, #0
 8004622:	bf54      	ite	pl
 8004624:	9306      	strpl	r3, [sp, #24]
 8004626:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004628:	f1b9 0f00 	cmp.w	r9, #0
 800462c:	db3c      	blt.n	80046a8 <_dtoa_r+0x238>
 800462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004630:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004634:	444b      	add	r3, r9
 8004636:	9309      	str	r3, [sp, #36]	; 0x24
 8004638:	2300      	movs	r3, #0
 800463a:	930a      	str	r3, [sp, #40]	; 0x28
 800463c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800463e:	2b09      	cmp	r3, #9
 8004640:	d86c      	bhi.n	800471c <_dtoa_r+0x2ac>
 8004642:	2b05      	cmp	r3, #5
 8004644:	bfc4      	itt	gt
 8004646:	3b04      	subgt	r3, #4
 8004648:	9322      	strgt	r3, [sp, #136]	; 0x88
 800464a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800464c:	bfc8      	it	gt
 800464e:	2400      	movgt	r4, #0
 8004650:	f1a3 0302 	sub.w	r3, r3, #2
 8004654:	bfd8      	it	le
 8004656:	2401      	movle	r4, #1
 8004658:	2b03      	cmp	r3, #3
 800465a:	f200 808b 	bhi.w	8004774 <_dtoa_r+0x304>
 800465e:	e8df f003 	tbb	[pc, r3]
 8004662:	4f2d      	.short	0x4f2d
 8004664:	5b4d      	.short	0x5b4d
 8004666:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800466a:	441c      	add	r4, r3
 800466c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004670:	2b20      	cmp	r3, #32
 8004672:	bfc3      	ittte	gt
 8004674:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004678:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800467c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004680:	f1c3 0320 	rsble	r3, r3, #32
 8004684:	bfc6      	itte	gt
 8004686:	fa26 f000 	lsrgt.w	r0, r6, r0
 800468a:	4318      	orrgt	r0, r3
 800468c:	fa06 f003 	lslle.w	r0, r6, r3
 8004690:	f7fb fea8 	bl	80003e4 <__aeabi_ui2d>
 8004694:	2301      	movs	r3, #1
 8004696:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800469a:	3c01      	subs	r4, #1
 800469c:	9313      	str	r3, [sp, #76]	; 0x4c
 800469e:	e770      	b.n	8004582 <_dtoa_r+0x112>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e7b3      	b.n	800460c <_dtoa_r+0x19c>
 80046a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80046a6:	e7b2      	b.n	800460e <_dtoa_r+0x19e>
 80046a8:	9b06      	ldr	r3, [sp, #24]
 80046aa:	eba3 0309 	sub.w	r3, r3, r9
 80046ae:	9306      	str	r3, [sp, #24]
 80046b0:	f1c9 0300 	rsb	r3, r9, #0
 80046b4:	930a      	str	r3, [sp, #40]	; 0x28
 80046b6:	2300      	movs	r3, #0
 80046b8:	930e      	str	r3, [sp, #56]	; 0x38
 80046ba:	e7bf      	b.n	800463c <_dtoa_r+0x1cc>
 80046bc:	2300      	movs	r3, #0
 80046be:	930b      	str	r3, [sp, #44]	; 0x2c
 80046c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	dc59      	bgt.n	800477a <_dtoa_r+0x30a>
 80046c6:	f04f 0b01 	mov.w	fp, #1
 80046ca:	465b      	mov	r3, fp
 80046cc:	f8cd b008 	str.w	fp, [sp, #8]
 80046d0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80046d4:	2200      	movs	r2, #0
 80046d6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80046d8:	6042      	str	r2, [r0, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	f102 0614 	add.w	r6, r2, #20
 80046e0:	429e      	cmp	r6, r3
 80046e2:	6841      	ldr	r1, [r0, #4]
 80046e4:	d94f      	bls.n	8004786 <_dtoa_r+0x316>
 80046e6:	4628      	mov	r0, r5
 80046e8:	f000 fcdc 	bl	80050a4 <_Balloc>
 80046ec:	9008      	str	r0, [sp, #32]
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d14d      	bne.n	800478e <_dtoa_r+0x31e>
 80046f2:	4602      	mov	r2, r0
 80046f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <_dtoa_r+0x300>)
 80046fa:	e6cd      	b.n	8004498 <_dtoa_r+0x28>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e7de      	b.n	80046be <_dtoa_r+0x24e>
 8004700:	2300      	movs	r3, #0
 8004702:	930b      	str	r3, [sp, #44]	; 0x2c
 8004704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004706:	eb09 0b03 	add.w	fp, r9, r3
 800470a:	f10b 0301 	add.w	r3, fp, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	9302      	str	r3, [sp, #8]
 8004712:	bfb8      	it	lt
 8004714:	2301      	movlt	r3, #1
 8004716:	e7dd      	b.n	80046d4 <_dtoa_r+0x264>
 8004718:	2301      	movs	r3, #1
 800471a:	e7f2      	b.n	8004702 <_dtoa_r+0x292>
 800471c:	2401      	movs	r4, #1
 800471e:	2300      	movs	r3, #0
 8004720:	940b      	str	r4, [sp, #44]	; 0x2c
 8004722:	9322      	str	r3, [sp, #136]	; 0x88
 8004724:	f04f 3bff 	mov.w	fp, #4294967295
 8004728:	2200      	movs	r2, #0
 800472a:	2312      	movs	r3, #18
 800472c:	f8cd b008 	str.w	fp, [sp, #8]
 8004730:	9223      	str	r2, [sp, #140]	; 0x8c
 8004732:	e7cf      	b.n	80046d4 <_dtoa_r+0x264>
 8004734:	f3af 8000 	nop.w
 8004738:	636f4361 	.word	0x636f4361
 800473c:	3fd287a7 	.word	0x3fd287a7
 8004740:	8b60c8b3 	.word	0x8b60c8b3
 8004744:	3fc68a28 	.word	0x3fc68a28
 8004748:	509f79fb 	.word	0x509f79fb
 800474c:	3fd34413 	.word	0x3fd34413
 8004750:	0800673d 	.word	0x0800673d
 8004754:	08006754 	.word	0x08006754
 8004758:	7ff00000 	.word	0x7ff00000
 800475c:	08006739 	.word	0x08006739
 8004760:	08006730 	.word	0x08006730
 8004764:	0800670d 	.word	0x0800670d
 8004768:	3ff80000 	.word	0x3ff80000
 800476c:	08006850 	.word	0x08006850
 8004770:	080067b3 	.word	0x080067b3
 8004774:	2301      	movs	r3, #1
 8004776:	930b      	str	r3, [sp, #44]	; 0x2c
 8004778:	e7d4      	b.n	8004724 <_dtoa_r+0x2b4>
 800477a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800477e:	465b      	mov	r3, fp
 8004780:	f8cd b008 	str.w	fp, [sp, #8]
 8004784:	e7a6      	b.n	80046d4 <_dtoa_r+0x264>
 8004786:	3101      	adds	r1, #1
 8004788:	6041      	str	r1, [r0, #4]
 800478a:	0052      	lsls	r2, r2, #1
 800478c:	e7a6      	b.n	80046dc <_dtoa_r+0x26c>
 800478e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004790:	9a08      	ldr	r2, [sp, #32]
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	9b02      	ldr	r3, [sp, #8]
 8004796:	2b0e      	cmp	r3, #14
 8004798:	f200 80a8 	bhi.w	80048ec <_dtoa_r+0x47c>
 800479c:	2c00      	cmp	r4, #0
 800479e:	f000 80a5 	beq.w	80048ec <_dtoa_r+0x47c>
 80047a2:	f1b9 0f00 	cmp.w	r9, #0
 80047a6:	dd34      	ble.n	8004812 <_dtoa_r+0x3a2>
 80047a8:	4a9a      	ldr	r2, [pc, #616]	; (8004a14 <_dtoa_r+0x5a4>)
 80047aa:	f009 030f 	and.w	r3, r9, #15
 80047ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047b2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80047b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80047be:	ea4f 1429 	mov.w	r4, r9, asr #4
 80047c2:	d016      	beq.n	80047f2 <_dtoa_r+0x382>
 80047c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047c8:	4b93      	ldr	r3, [pc, #588]	; (8004a18 <_dtoa_r+0x5a8>)
 80047ca:	2703      	movs	r7, #3
 80047cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047d0:	f7fb ffac 	bl	800072c <__aeabi_ddiv>
 80047d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047d8:	f004 040f 	and.w	r4, r4, #15
 80047dc:	4e8e      	ldr	r6, [pc, #568]	; (8004a18 <_dtoa_r+0x5a8>)
 80047de:	b954      	cbnz	r4, 80047f6 <_dtoa_r+0x386>
 80047e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047e8:	f7fb ffa0 	bl	800072c <__aeabi_ddiv>
 80047ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047f0:	e029      	b.n	8004846 <_dtoa_r+0x3d6>
 80047f2:	2702      	movs	r7, #2
 80047f4:	e7f2      	b.n	80047dc <_dtoa_r+0x36c>
 80047f6:	07e1      	lsls	r1, r4, #31
 80047f8:	d508      	bpl.n	800480c <_dtoa_r+0x39c>
 80047fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004802:	f7fb fe69 	bl	80004d8 <__aeabi_dmul>
 8004806:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800480a:	3701      	adds	r7, #1
 800480c:	1064      	asrs	r4, r4, #1
 800480e:	3608      	adds	r6, #8
 8004810:	e7e5      	b.n	80047de <_dtoa_r+0x36e>
 8004812:	f000 80a5 	beq.w	8004960 <_dtoa_r+0x4f0>
 8004816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800481a:	f1c9 0400 	rsb	r4, r9, #0
 800481e:	4b7d      	ldr	r3, [pc, #500]	; (8004a14 <_dtoa_r+0x5a4>)
 8004820:	f004 020f 	and.w	r2, r4, #15
 8004824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fe54 	bl	80004d8 <__aeabi_dmul>
 8004830:	2702      	movs	r7, #2
 8004832:	2300      	movs	r3, #0
 8004834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004838:	4e77      	ldr	r6, [pc, #476]	; (8004a18 <_dtoa_r+0x5a8>)
 800483a:	1124      	asrs	r4, r4, #4
 800483c:	2c00      	cmp	r4, #0
 800483e:	f040 8084 	bne.w	800494a <_dtoa_r+0x4da>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1d2      	bne.n	80047ec <_dtoa_r+0x37c>
 8004846:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 808b 	beq.w	8004964 <_dtoa_r+0x4f4>
 800484e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004852:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004856:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800485a:	2200      	movs	r2, #0
 800485c:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <_dtoa_r+0x5ac>)
 800485e:	f7fc f8ad 	bl	80009bc <__aeabi_dcmplt>
 8004862:	2800      	cmp	r0, #0
 8004864:	d07e      	beq.n	8004964 <_dtoa_r+0x4f4>
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d07b      	beq.n	8004964 <_dtoa_r+0x4f4>
 800486c:	f1bb 0f00 	cmp.w	fp, #0
 8004870:	dd38      	ble.n	80048e4 <_dtoa_r+0x474>
 8004872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004876:	2200      	movs	r2, #0
 8004878:	4b69      	ldr	r3, [pc, #420]	; (8004a20 <_dtoa_r+0x5b0>)
 800487a:	f7fb fe2d 	bl	80004d8 <__aeabi_dmul>
 800487e:	465c      	mov	r4, fp
 8004880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004884:	f109 38ff 	add.w	r8, r9, #4294967295
 8004888:	3701      	adds	r7, #1
 800488a:	4638      	mov	r0, r7
 800488c:	f7fb fdba 	bl	8000404 <__aeabi_i2d>
 8004890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004894:	f7fb fe20 	bl	80004d8 <__aeabi_dmul>
 8004898:	2200      	movs	r2, #0
 800489a:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <_dtoa_r+0x5b4>)
 800489c:	f7fb fc66 	bl	800016c <__adddf3>
 80048a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80048a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048a8:	9611      	str	r6, [sp, #68]	; 0x44
 80048aa:	2c00      	cmp	r4, #0
 80048ac:	d15d      	bne.n	800496a <_dtoa_r+0x4fa>
 80048ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048b2:	2200      	movs	r2, #0
 80048b4:	4b5c      	ldr	r3, [pc, #368]	; (8004a28 <_dtoa_r+0x5b8>)
 80048b6:	f7fb fc57 	bl	8000168 <__aeabi_dsub>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048c2:	4633      	mov	r3, r6
 80048c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048c6:	f7fc f897 	bl	80009f8 <__aeabi_dcmpgt>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	f040 829e 	bne.w	8004e0c <_dtoa_r+0x99c>
 80048d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80048d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80048da:	f7fc f86f 	bl	80009bc <__aeabi_dcmplt>
 80048de:	2800      	cmp	r0, #0
 80048e0:	f040 8292 	bne.w	8004e08 <_dtoa_r+0x998>
 80048e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80048e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80048ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f2c0 8153 	blt.w	8004b9a <_dtoa_r+0x72a>
 80048f4:	f1b9 0f0e 	cmp.w	r9, #14
 80048f8:	f300 814f 	bgt.w	8004b9a <_dtoa_r+0x72a>
 80048fc:	4b45      	ldr	r3, [pc, #276]	; (8004a14 <_dtoa_r+0x5a4>)
 80048fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004902:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004906:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800490a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800490c:	2b00      	cmp	r3, #0
 800490e:	f280 80db 	bge.w	8004ac8 <_dtoa_r+0x658>
 8004912:	9b02      	ldr	r3, [sp, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f300 80d7 	bgt.w	8004ac8 <_dtoa_r+0x658>
 800491a:	f040 8274 	bne.w	8004e06 <_dtoa_r+0x996>
 800491e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004922:	2200      	movs	r2, #0
 8004924:	4b40      	ldr	r3, [pc, #256]	; (8004a28 <_dtoa_r+0x5b8>)
 8004926:	f7fb fdd7 	bl	80004d8 <__aeabi_dmul>
 800492a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492e:	f7fc f859 	bl	80009e4 <__aeabi_dcmpge>
 8004932:	9c02      	ldr	r4, [sp, #8]
 8004934:	4626      	mov	r6, r4
 8004936:	2800      	cmp	r0, #0
 8004938:	f040 824a 	bne.w	8004dd0 <_dtoa_r+0x960>
 800493c:	2331      	movs	r3, #49	; 0x31
 800493e:	9f08      	ldr	r7, [sp, #32]
 8004940:	f109 0901 	add.w	r9, r9, #1
 8004944:	f807 3b01 	strb.w	r3, [r7], #1
 8004948:	e246      	b.n	8004dd8 <_dtoa_r+0x968>
 800494a:	07e2      	lsls	r2, r4, #31
 800494c:	d505      	bpl.n	800495a <_dtoa_r+0x4ea>
 800494e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004952:	f7fb fdc1 	bl	80004d8 <__aeabi_dmul>
 8004956:	2301      	movs	r3, #1
 8004958:	3701      	adds	r7, #1
 800495a:	1064      	asrs	r4, r4, #1
 800495c:	3608      	adds	r6, #8
 800495e:	e76d      	b.n	800483c <_dtoa_r+0x3cc>
 8004960:	2702      	movs	r7, #2
 8004962:	e770      	b.n	8004846 <_dtoa_r+0x3d6>
 8004964:	46c8      	mov	r8, r9
 8004966:	9c02      	ldr	r4, [sp, #8]
 8004968:	e78f      	b.n	800488a <_dtoa_r+0x41a>
 800496a:	9908      	ldr	r1, [sp, #32]
 800496c:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <_dtoa_r+0x5a4>)
 800496e:	4421      	add	r1, r4
 8004970:	9112      	str	r1, [sp, #72]	; 0x48
 8004972:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004974:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004978:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800497c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004980:	2900      	cmp	r1, #0
 8004982:	d055      	beq.n	8004a30 <_dtoa_r+0x5c0>
 8004984:	2000      	movs	r0, #0
 8004986:	4929      	ldr	r1, [pc, #164]	; (8004a2c <_dtoa_r+0x5bc>)
 8004988:	f7fb fed0 	bl	800072c <__aeabi_ddiv>
 800498c:	463b      	mov	r3, r7
 800498e:	4632      	mov	r2, r6
 8004990:	f7fb fbea 	bl	8000168 <__aeabi_dsub>
 8004994:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004998:	9f08      	ldr	r7, [sp, #32]
 800499a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800499e:	f7fc f84b 	bl	8000a38 <__aeabi_d2iz>
 80049a2:	4604      	mov	r4, r0
 80049a4:	f7fb fd2e 	bl	8000404 <__aeabi_i2d>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049b0:	f7fb fbda 	bl	8000168 <__aeabi_dsub>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	3430      	adds	r4, #48	; 0x30
 80049ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049c2:	f807 4b01 	strb.w	r4, [r7], #1
 80049c6:	f7fb fff9 	bl	80009bc <__aeabi_dcmplt>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d174      	bne.n	8004ab8 <_dtoa_r+0x648>
 80049ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049d2:	2000      	movs	r0, #0
 80049d4:	4911      	ldr	r1, [pc, #68]	; (8004a1c <_dtoa_r+0x5ac>)
 80049d6:	f7fb fbc7 	bl	8000168 <__aeabi_dsub>
 80049da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80049de:	f7fb ffed 	bl	80009bc <__aeabi_dcmplt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	f040 80b6 	bne.w	8004b54 <_dtoa_r+0x6e4>
 80049e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ea:	429f      	cmp	r7, r3
 80049ec:	f43f af7a 	beq.w	80048e4 <_dtoa_r+0x474>
 80049f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80049f4:	2200      	movs	r2, #0
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <_dtoa_r+0x5b0>)
 80049f8:	f7fb fd6e 	bl	80004d8 <__aeabi_dmul>
 80049fc:	2200      	movs	r2, #0
 80049fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <_dtoa_r+0x5b0>)
 8004a08:	f7fb fd66 	bl	80004d8 <__aeabi_dmul>
 8004a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a10:	e7c3      	b.n	800499a <_dtoa_r+0x52a>
 8004a12:	bf00      	nop
 8004a14:	08006850 	.word	0x08006850
 8004a18:	08006828 	.word	0x08006828
 8004a1c:	3ff00000 	.word	0x3ff00000
 8004a20:	40240000 	.word	0x40240000
 8004a24:	401c0000 	.word	0x401c0000
 8004a28:	40140000 	.word	0x40140000
 8004a2c:	3fe00000 	.word	0x3fe00000
 8004a30:	4630      	mov	r0, r6
 8004a32:	4639      	mov	r1, r7
 8004a34:	f7fb fd50 	bl	80004d8 <__aeabi_dmul>
 8004a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a3e:	9c08      	ldr	r4, [sp, #32]
 8004a40:	9314      	str	r3, [sp, #80]	; 0x50
 8004a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a46:	f7fb fff7 	bl	8000a38 <__aeabi_d2iz>
 8004a4a:	9015      	str	r0, [sp, #84]	; 0x54
 8004a4c:	f7fb fcda 	bl	8000404 <__aeabi_i2d>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a58:	f7fb fb86 	bl	8000168 <__aeabi_dsub>
 8004a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a5e:	4606      	mov	r6, r0
 8004a60:	3330      	adds	r3, #48	; 0x30
 8004a62:	f804 3b01 	strb.w	r3, [r4], #1
 8004a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a68:	460f      	mov	r7, r1
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	d124      	bne.n	8004abc <_dtoa_r+0x64c>
 8004a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a76:	4bb3      	ldr	r3, [pc, #716]	; (8004d44 <_dtoa_r+0x8d4>)
 8004a78:	f7fb fb78 	bl	800016c <__adddf3>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4630      	mov	r0, r6
 8004a82:	4639      	mov	r1, r7
 8004a84:	f7fb ffb8 	bl	80009f8 <__aeabi_dcmpgt>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d162      	bne.n	8004b52 <_dtoa_r+0x6e2>
 8004a8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a90:	2000      	movs	r0, #0
 8004a92:	49ac      	ldr	r1, [pc, #688]	; (8004d44 <_dtoa_r+0x8d4>)
 8004a94:	f7fb fb68 	bl	8000168 <__aeabi_dsub>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fb ff8c 	bl	80009bc <__aeabi_dcmplt>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f43f af1d 	beq.w	80048e4 <_dtoa_r+0x474>
 8004aaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004aac:	1e7b      	subs	r3, r7, #1
 8004aae:	9314      	str	r3, [sp, #80]	; 0x50
 8004ab0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ab4:	2b30      	cmp	r3, #48	; 0x30
 8004ab6:	d0f8      	beq.n	8004aaa <_dtoa_r+0x63a>
 8004ab8:	46c1      	mov	r9, r8
 8004aba:	e03a      	b.n	8004b32 <_dtoa_r+0x6c2>
 8004abc:	4ba2      	ldr	r3, [pc, #648]	; (8004d48 <_dtoa_r+0x8d8>)
 8004abe:	f7fb fd0b 	bl	80004d8 <__aeabi_dmul>
 8004ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ac6:	e7bc      	b.n	8004a42 <_dtoa_r+0x5d2>
 8004ac8:	9f08      	ldr	r7, [sp, #32]
 8004aca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ad2:	f7fb fe2b 	bl	800072c <__aeabi_ddiv>
 8004ad6:	f7fb ffaf 	bl	8000a38 <__aeabi_d2iz>
 8004ada:	4604      	mov	r4, r0
 8004adc:	f7fb fc92 	bl	8000404 <__aeabi_i2d>
 8004ae0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ae4:	f7fb fcf8 	bl	80004d8 <__aeabi_dmul>
 8004ae8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004aec:	460b      	mov	r3, r1
 8004aee:	4602      	mov	r2, r0
 8004af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004af4:	f7fb fb38 	bl	8000168 <__aeabi_dsub>
 8004af8:	f807 6b01 	strb.w	r6, [r7], #1
 8004afc:	9e08      	ldr	r6, [sp, #32]
 8004afe:	9b02      	ldr	r3, [sp, #8]
 8004b00:	1bbe      	subs	r6, r7, r6
 8004b02:	42b3      	cmp	r3, r6
 8004b04:	d13a      	bne.n	8004b7c <_dtoa_r+0x70c>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	f7fb fb2f 	bl	800016c <__adddf3>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b1a:	f7fb ff6d 	bl	80009f8 <__aeabi_dcmpgt>
 8004b1e:	bb58      	cbnz	r0, 8004b78 <_dtoa_r+0x708>
 8004b20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b28:	f7fb ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8004b2c:	b108      	cbz	r0, 8004b32 <_dtoa_r+0x6c2>
 8004b2e:	07e1      	lsls	r1, r4, #31
 8004b30:	d422      	bmi.n	8004b78 <_dtoa_r+0x708>
 8004b32:	4628      	mov	r0, r5
 8004b34:	4651      	mov	r1, sl
 8004b36:	f000 faf5 	bl	8005124 <_Bfree>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	703b      	strb	r3, [r7, #0]
 8004b3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004b40:	f109 0001 	add.w	r0, r9, #1
 8004b44:	6018      	str	r0, [r3, #0]
 8004b46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f43f acdf 	beq.w	800450c <_dtoa_r+0x9c>
 8004b4e:	601f      	str	r7, [r3, #0]
 8004b50:	e4dc      	b.n	800450c <_dtoa_r+0x9c>
 8004b52:	4627      	mov	r7, r4
 8004b54:	463b      	mov	r3, r7
 8004b56:	461f      	mov	r7, r3
 8004b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b5c:	2a39      	cmp	r2, #57	; 0x39
 8004b5e:	d107      	bne.n	8004b70 <_dtoa_r+0x700>
 8004b60:	9a08      	ldr	r2, [sp, #32]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d1f7      	bne.n	8004b56 <_dtoa_r+0x6e6>
 8004b66:	2230      	movs	r2, #48	; 0x30
 8004b68:	9908      	ldr	r1, [sp, #32]
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	700a      	strb	r2, [r1, #0]
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	3201      	adds	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e79f      	b.n	8004ab8 <_dtoa_r+0x648>
 8004b78:	46c8      	mov	r8, r9
 8004b7a:	e7eb      	b.n	8004b54 <_dtoa_r+0x6e4>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4b72      	ldr	r3, [pc, #456]	; (8004d48 <_dtoa_r+0x8d8>)
 8004b80:	f7fb fcaa 	bl	80004d8 <__aeabi_dmul>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f7fb ff0a 	bl	80009a8 <__aeabi_dcmpeq>
 8004b94:	2800      	cmp	r0, #0
 8004b96:	d098      	beq.n	8004aca <_dtoa_r+0x65a>
 8004b98:	e7cb      	b.n	8004b32 <_dtoa_r+0x6c2>
 8004b9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	f000 80cd 	beq.w	8004d3c <_dtoa_r+0x8cc>
 8004ba2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ba4:	2a01      	cmp	r2, #1
 8004ba6:	f300 80af 	bgt.w	8004d08 <_dtoa_r+0x898>
 8004baa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	f000 80a7 	beq.w	8004d00 <_dtoa_r+0x890>
 8004bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004bb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004bb8:	9f06      	ldr	r7, [sp, #24]
 8004bba:	9a06      	ldr	r2, [sp, #24]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	441a      	add	r2, r3
 8004bc0:	9206      	str	r2, [sp, #24]
 8004bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	441a      	add	r2, r3
 8004bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8004bca:	f000 fb65 	bl	8005298 <__i2b>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	2f00      	cmp	r7, #0
 8004bd2:	dd0c      	ble.n	8004bee <_dtoa_r+0x77e>
 8004bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dd09      	ble.n	8004bee <_dtoa_r+0x77e>
 8004bda:	42bb      	cmp	r3, r7
 8004bdc:	bfa8      	it	ge
 8004bde:	463b      	movge	r3, r7
 8004be0:	9a06      	ldr	r2, [sp, #24]
 8004be2:	1aff      	subs	r7, r7, r3
 8004be4:	1ad2      	subs	r2, r2, r3
 8004be6:	9206      	str	r2, [sp, #24]
 8004be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	9309      	str	r3, [sp, #36]	; 0x24
 8004bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf0:	b1f3      	cbz	r3, 8004c30 <_dtoa_r+0x7c0>
 8004bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80a9 	beq.w	8004d4c <_dtoa_r+0x8dc>
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	dd10      	ble.n	8004c20 <_dtoa_r+0x7b0>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4622      	mov	r2, r4
 8004c02:	4628      	mov	r0, r5
 8004c04:	f000 fc02 	bl	800540c <__pow5mult>
 8004c08:	4652      	mov	r2, sl
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f000 fb58 	bl	80052c4 <__multiply>
 8004c14:	4680      	mov	r8, r0
 8004c16:	4651      	mov	r1, sl
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f000 fa83 	bl	8005124 <_Bfree>
 8004c1e:	46c2      	mov	sl, r8
 8004c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c22:	1b1a      	subs	r2, r3, r4
 8004c24:	d004      	beq.n	8004c30 <_dtoa_r+0x7c0>
 8004c26:	4651      	mov	r1, sl
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 fbef 	bl	800540c <__pow5mult>
 8004c2e:	4682      	mov	sl, r0
 8004c30:	2101      	movs	r1, #1
 8004c32:	4628      	mov	r0, r5
 8004c34:	f000 fb30 	bl	8005298 <__i2b>
 8004c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f340 8087 	ble.w	8004d50 <_dtoa_r+0x8e0>
 8004c42:	461a      	mov	r2, r3
 8004c44:	4601      	mov	r1, r0
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 fbe0 	bl	800540c <__pow5mult>
 8004c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c4e:	4604      	mov	r4, r0
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f340 8080 	ble.w	8004d56 <_dtoa_r+0x8e6>
 8004c56:	f04f 0800 	mov.w	r8, #0
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c60:	6918      	ldr	r0, [r3, #16]
 8004c62:	f000 facb 	bl	80051fc <__hi0bits>
 8004c66:	f1c0 0020 	rsb	r0, r0, #32
 8004c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6c:	4418      	add	r0, r3
 8004c6e:	f010 001f 	ands.w	r0, r0, #31
 8004c72:	f000 8092 	beq.w	8004d9a <_dtoa_r+0x92a>
 8004c76:	f1c0 0320 	rsb	r3, r0, #32
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	f340 808a 	ble.w	8004d94 <_dtoa_r+0x924>
 8004c80:	f1c0 001c 	rsb	r0, r0, #28
 8004c84:	9b06      	ldr	r3, [sp, #24]
 8004c86:	4407      	add	r7, r0
 8004c88:	4403      	add	r3, r0
 8004c8a:	9306      	str	r3, [sp, #24]
 8004c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c8e:	4403      	add	r3, r0
 8004c90:	9309      	str	r3, [sp, #36]	; 0x24
 8004c92:	9b06      	ldr	r3, [sp, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dd05      	ble.n	8004ca4 <_dtoa_r+0x834>
 8004c98:	4651      	mov	r1, sl
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 fc0f 	bl	80054c0 <__lshift>
 8004ca2:	4682      	mov	sl, r0
 8004ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	dd05      	ble.n	8004cb6 <_dtoa_r+0x846>
 8004caa:	4621      	mov	r1, r4
 8004cac:	461a      	mov	r2, r3
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f000 fc06 	bl	80054c0 <__lshift>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d070      	beq.n	8004d9e <_dtoa_r+0x92e>
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	f000 fc6a 	bl	8005598 <__mcmp>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	da6a      	bge.n	8004d9e <_dtoa_r+0x92e>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4651      	mov	r1, sl
 8004ccc:	220a      	movs	r2, #10
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 fa4a 	bl	8005168 <__multadd>
 8004cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cd6:	4682      	mov	sl, r0
 8004cd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8193 	beq.w	8005008 <_dtoa_r+0xb98>
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	220a      	movs	r2, #10
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 fa3d 	bl	8005168 <__multadd>
 8004cee:	f1bb 0f00 	cmp.w	fp, #0
 8004cf2:	4606      	mov	r6, r0
 8004cf4:	f300 8093 	bgt.w	8004e1e <_dtoa_r+0x9ae>
 8004cf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	dc57      	bgt.n	8004dae <_dtoa_r+0x93e>
 8004cfe:	e08e      	b.n	8004e1e <_dtoa_r+0x9ae>
 8004d00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d06:	e756      	b.n	8004bb6 <_dtoa_r+0x746>
 8004d08:	9b02      	ldr	r3, [sp, #8]
 8004d0a:	1e5c      	subs	r4, r3, #1
 8004d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	bfb7      	itett	lt
 8004d12:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d14:	1b1c      	subge	r4, r3, r4
 8004d16:	1ae2      	sublt	r2, r4, r3
 8004d18:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d1a:	bfbe      	ittt	lt
 8004d1c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004d1e:	189b      	addlt	r3, r3, r2
 8004d20:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d22:	9b02      	ldr	r3, [sp, #8]
 8004d24:	bfb8      	it	lt
 8004d26:	2400      	movlt	r4, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfbb      	ittet	lt
 8004d2c:	9b06      	ldrlt	r3, [sp, #24]
 8004d2e:	9a02      	ldrlt	r2, [sp, #8]
 8004d30:	9f06      	ldrge	r7, [sp, #24]
 8004d32:	1a9f      	sublt	r7, r3, r2
 8004d34:	bfac      	ite	ge
 8004d36:	9b02      	ldrge	r3, [sp, #8]
 8004d38:	2300      	movlt	r3, #0
 8004d3a:	e73e      	b.n	8004bba <_dtoa_r+0x74a>
 8004d3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d3e:	9f06      	ldr	r7, [sp, #24]
 8004d40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004d42:	e745      	b.n	8004bd0 <_dtoa_r+0x760>
 8004d44:	3fe00000 	.word	0x3fe00000
 8004d48:	40240000 	.word	0x40240000
 8004d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d4e:	e76a      	b.n	8004c26 <_dtoa_r+0x7b6>
 8004d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	dc19      	bgt.n	8004d8a <_dtoa_r+0x91a>
 8004d56:	9b04      	ldr	r3, [sp, #16]
 8004d58:	b9bb      	cbnz	r3, 8004d8a <_dtoa_r+0x91a>
 8004d5a:	9b05      	ldr	r3, [sp, #20]
 8004d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d60:	b99b      	cbnz	r3, 8004d8a <_dtoa_r+0x91a>
 8004d62:	9b05      	ldr	r3, [sp, #20]
 8004d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d68:	0d1b      	lsrs	r3, r3, #20
 8004d6a:	051b      	lsls	r3, r3, #20
 8004d6c:	b183      	cbz	r3, 8004d90 <_dtoa_r+0x920>
 8004d6e:	f04f 0801 	mov.w	r8, #1
 8004d72:	9b06      	ldr	r3, [sp, #24]
 8004d74:	3301      	adds	r3, #1
 8004d76:	9306      	str	r3, [sp, #24]
 8004d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f47f af6a 	bne.w	8004c5a <_dtoa_r+0x7ea>
 8004d86:	2001      	movs	r0, #1
 8004d88:	e76f      	b.n	8004c6a <_dtoa_r+0x7fa>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	e7f6      	b.n	8004d7e <_dtoa_r+0x90e>
 8004d90:	4698      	mov	r8, r3
 8004d92:	e7f4      	b.n	8004d7e <_dtoa_r+0x90e>
 8004d94:	f43f af7d 	beq.w	8004c92 <_dtoa_r+0x822>
 8004d98:	4618      	mov	r0, r3
 8004d9a:	301c      	adds	r0, #28
 8004d9c:	e772      	b.n	8004c84 <_dtoa_r+0x814>
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	dc36      	bgt.n	8004e12 <_dtoa_r+0x9a2>
 8004da4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	dd33      	ble.n	8004e12 <_dtoa_r+0x9a2>
 8004daa:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004dae:	f1bb 0f00 	cmp.w	fp, #0
 8004db2:	d10d      	bne.n	8004dd0 <_dtoa_r+0x960>
 8004db4:	4621      	mov	r1, r4
 8004db6:	465b      	mov	r3, fp
 8004db8:	2205      	movs	r2, #5
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 f9d4 	bl	8005168 <__multadd>
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4650      	mov	r0, sl
 8004dc6:	f000 fbe7 	bl	8005598 <__mcmp>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	f73f adb6 	bgt.w	800493c <_dtoa_r+0x4cc>
 8004dd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dd2:	9f08      	ldr	r7, [sp, #32]
 8004dd4:	ea6f 0903 	mvn.w	r9, r3
 8004dd8:	f04f 0800 	mov.w	r8, #0
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 f9a0 	bl	8005124 <_Bfree>
 8004de4:	2e00      	cmp	r6, #0
 8004de6:	f43f aea4 	beq.w	8004b32 <_dtoa_r+0x6c2>
 8004dea:	f1b8 0f00 	cmp.w	r8, #0
 8004dee:	d005      	beq.n	8004dfc <_dtoa_r+0x98c>
 8004df0:	45b0      	cmp	r8, r6
 8004df2:	d003      	beq.n	8004dfc <_dtoa_r+0x98c>
 8004df4:	4641      	mov	r1, r8
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f994 	bl	8005124 <_Bfree>
 8004dfc:	4631      	mov	r1, r6
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 f990 	bl	8005124 <_Bfree>
 8004e04:	e695      	b.n	8004b32 <_dtoa_r+0x6c2>
 8004e06:	2400      	movs	r4, #0
 8004e08:	4626      	mov	r6, r4
 8004e0a:	e7e1      	b.n	8004dd0 <_dtoa_r+0x960>
 8004e0c:	46c1      	mov	r9, r8
 8004e0e:	4626      	mov	r6, r4
 8004e10:	e594      	b.n	800493c <_dtoa_r+0x4cc>
 8004e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e14:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80fc 	beq.w	8005016 <_dtoa_r+0xba6>
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	dd05      	ble.n	8004e2e <_dtoa_r+0x9be>
 8004e22:	4631      	mov	r1, r6
 8004e24:	463a      	mov	r2, r7
 8004e26:	4628      	mov	r0, r5
 8004e28:	f000 fb4a 	bl	80054c0 <__lshift>
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	f1b8 0f00 	cmp.w	r8, #0
 8004e32:	d05c      	beq.n	8004eee <_dtoa_r+0xa7e>
 8004e34:	4628      	mov	r0, r5
 8004e36:	6871      	ldr	r1, [r6, #4]
 8004e38:	f000 f934 	bl	80050a4 <_Balloc>
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	b928      	cbnz	r0, 8004e4c <_dtoa_r+0x9dc>
 8004e40:	4602      	mov	r2, r0
 8004e42:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e46:	4b7e      	ldr	r3, [pc, #504]	; (8005040 <_dtoa_r+0xbd0>)
 8004e48:	f7ff bb26 	b.w	8004498 <_dtoa_r+0x28>
 8004e4c:	6932      	ldr	r2, [r6, #16]
 8004e4e:	f106 010c 	add.w	r1, r6, #12
 8004e52:	3202      	adds	r2, #2
 8004e54:	0092      	lsls	r2, r2, #2
 8004e56:	300c      	adds	r0, #12
 8004e58:	f000 f90a 	bl	8005070 <memcpy>
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4639      	mov	r1, r7
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fb2d 	bl	80054c0 <__lshift>
 8004e66:	46b0      	mov	r8, r6
 8004e68:	4606      	mov	r6, r0
 8004e6a:	9b08      	ldr	r3, [sp, #32]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	9302      	str	r3, [sp, #8]
 8004e70:	9b08      	ldr	r3, [sp, #32]
 8004e72:	445b      	add	r3, fp
 8004e74:	930a      	str	r3, [sp, #40]	; 0x28
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7e:	9b02      	ldr	r3, [sp, #8]
 8004e80:	4621      	mov	r1, r4
 8004e82:	4650      	mov	r0, sl
 8004e84:	f103 3bff 	add.w	fp, r3, #4294967295
 8004e88:	f7ff fa62 	bl	8004350 <quorem>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4641      	mov	r1, r8
 8004e90:	3330      	adds	r3, #48	; 0x30
 8004e92:	9004      	str	r0, [sp, #16]
 8004e94:	4650      	mov	r0, sl
 8004e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e98:	f000 fb7e 	bl	8005598 <__mcmp>
 8004e9c:	4632      	mov	r2, r6
 8004e9e:	9006      	str	r0, [sp, #24]
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 fb94 	bl	80055d0 <__mdiff>
 8004ea8:	68c2      	ldr	r2, [r0, #12]
 8004eaa:	4607      	mov	r7, r0
 8004eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eae:	bb02      	cbnz	r2, 8004ef2 <_dtoa_r+0xa82>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	f000 fb70 	bl	8005598 <__mcmp>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004ec4:	f000 f92e 	bl	8005124 <_Bfree>
 8004ec8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ecc:	9f02      	ldr	r7, [sp, #8]
 8004ece:	ea43 0102 	orr.w	r1, r3, r2
 8004ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed8:	d10d      	bne.n	8004ef6 <_dtoa_r+0xa86>
 8004eda:	2b39      	cmp	r3, #57	; 0x39
 8004edc:	d027      	beq.n	8004f2e <_dtoa_r+0xabe>
 8004ede:	9a06      	ldr	r2, [sp, #24]
 8004ee0:	2a00      	cmp	r2, #0
 8004ee2:	dd01      	ble.n	8004ee8 <_dtoa_r+0xa78>
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	3331      	adds	r3, #49	; 0x31
 8004ee8:	f88b 3000 	strb.w	r3, [fp]
 8004eec:	e776      	b.n	8004ddc <_dtoa_r+0x96c>
 8004eee:	4630      	mov	r0, r6
 8004ef0:	e7b9      	b.n	8004e66 <_dtoa_r+0x9f6>
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	e7e2      	b.n	8004ebc <_dtoa_r+0xa4c>
 8004ef6:	9906      	ldr	r1, [sp, #24]
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	db04      	blt.n	8004f06 <_dtoa_r+0xa96>
 8004efc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004efe:	4301      	orrs	r1, r0
 8004f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f02:	4301      	orrs	r1, r0
 8004f04:	d120      	bne.n	8004f48 <_dtoa_r+0xad8>
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	ddee      	ble.n	8004ee8 <_dtoa_r+0xa78>
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	4628      	mov	r0, r5
 8004f10:	9302      	str	r3, [sp, #8]
 8004f12:	f000 fad5 	bl	80054c0 <__lshift>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4682      	mov	sl, r0
 8004f1a:	f000 fb3d 	bl	8005598 <__mcmp>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	9b02      	ldr	r3, [sp, #8]
 8004f22:	dc02      	bgt.n	8004f2a <_dtoa_r+0xaba>
 8004f24:	d1e0      	bne.n	8004ee8 <_dtoa_r+0xa78>
 8004f26:	07da      	lsls	r2, r3, #31
 8004f28:	d5de      	bpl.n	8004ee8 <_dtoa_r+0xa78>
 8004f2a:	2b39      	cmp	r3, #57	; 0x39
 8004f2c:	d1da      	bne.n	8004ee4 <_dtoa_r+0xa74>
 8004f2e:	2339      	movs	r3, #57	; 0x39
 8004f30:	f88b 3000 	strb.w	r3, [fp]
 8004f34:	463b      	mov	r3, r7
 8004f36:	461f      	mov	r7, r3
 8004f38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	2a39      	cmp	r2, #57	; 0x39
 8004f40:	d050      	beq.n	8004fe4 <_dtoa_r+0xb74>
 8004f42:	3201      	adds	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e749      	b.n	8004ddc <_dtoa_r+0x96c>
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	dd03      	ble.n	8004f54 <_dtoa_r+0xae4>
 8004f4c:	2b39      	cmp	r3, #57	; 0x39
 8004f4e:	d0ee      	beq.n	8004f2e <_dtoa_r+0xabe>
 8004f50:	3301      	adds	r3, #1
 8004f52:	e7c9      	b.n	8004ee8 <_dtoa_r+0xa78>
 8004f54:	9a02      	ldr	r2, [sp, #8]
 8004f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f58:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f5c:	428a      	cmp	r2, r1
 8004f5e:	d02a      	beq.n	8004fb6 <_dtoa_r+0xb46>
 8004f60:	4651      	mov	r1, sl
 8004f62:	2300      	movs	r3, #0
 8004f64:	220a      	movs	r2, #10
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f8fe 	bl	8005168 <__multadd>
 8004f6c:	45b0      	cmp	r8, r6
 8004f6e:	4682      	mov	sl, r0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	f04f 020a 	mov.w	r2, #10
 8004f78:	4641      	mov	r1, r8
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	d107      	bne.n	8004f8e <_dtoa_r+0xb1e>
 8004f7e:	f000 f8f3 	bl	8005168 <__multadd>
 8004f82:	4680      	mov	r8, r0
 8004f84:	4606      	mov	r6, r0
 8004f86:	9b02      	ldr	r3, [sp, #8]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	9302      	str	r3, [sp, #8]
 8004f8c:	e777      	b.n	8004e7e <_dtoa_r+0xa0e>
 8004f8e:	f000 f8eb 	bl	8005168 <__multadd>
 8004f92:	4631      	mov	r1, r6
 8004f94:	4680      	mov	r8, r0
 8004f96:	2300      	movs	r3, #0
 8004f98:	220a      	movs	r2, #10
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 f8e4 	bl	8005168 <__multadd>
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	e7f0      	b.n	8004f86 <_dtoa_r+0xb16>
 8004fa4:	f1bb 0f00 	cmp.w	fp, #0
 8004fa8:	bfcc      	ite	gt
 8004faa:	465f      	movgt	r7, fp
 8004fac:	2701      	movle	r7, #1
 8004fae:	f04f 0800 	mov.w	r8, #0
 8004fb2:	9a08      	ldr	r2, [sp, #32]
 8004fb4:	4417      	add	r7, r2
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4628      	mov	r0, r5
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	f000 fa7f 	bl	80054c0 <__lshift>
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	f000 fae7 	bl	8005598 <__mcmp>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	dcb2      	bgt.n	8004f34 <_dtoa_r+0xac4>
 8004fce:	d102      	bne.n	8004fd6 <_dtoa_r+0xb66>
 8004fd0:	9b02      	ldr	r3, [sp, #8]
 8004fd2:	07db      	lsls	r3, r3, #31
 8004fd4:	d4ae      	bmi.n	8004f34 <_dtoa_r+0xac4>
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	461f      	mov	r7, r3
 8004fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fde:	2a30      	cmp	r2, #48	; 0x30
 8004fe0:	d0fa      	beq.n	8004fd8 <_dtoa_r+0xb68>
 8004fe2:	e6fb      	b.n	8004ddc <_dtoa_r+0x96c>
 8004fe4:	9a08      	ldr	r2, [sp, #32]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d1a5      	bne.n	8004f36 <_dtoa_r+0xac6>
 8004fea:	2331      	movs	r3, #49	; 0x31
 8004fec:	f109 0901 	add.w	r9, r9, #1
 8004ff0:	7013      	strb	r3, [r2, #0]
 8004ff2:	e6f3      	b.n	8004ddc <_dtoa_r+0x96c>
 8004ff4:	4b13      	ldr	r3, [pc, #76]	; (8005044 <_dtoa_r+0xbd4>)
 8004ff6:	f7ff baa7 	b.w	8004548 <_dtoa_r+0xd8>
 8004ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f47f aa80 	bne.w	8004502 <_dtoa_r+0x92>
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <_dtoa_r+0xbd8>)
 8005004:	f7ff baa0 	b.w	8004548 <_dtoa_r+0xd8>
 8005008:	f1bb 0f00 	cmp.w	fp, #0
 800500c:	dc03      	bgt.n	8005016 <_dtoa_r+0xba6>
 800500e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005010:	2b02      	cmp	r3, #2
 8005012:	f73f aecc 	bgt.w	8004dae <_dtoa_r+0x93e>
 8005016:	9f08      	ldr	r7, [sp, #32]
 8005018:	4621      	mov	r1, r4
 800501a:	4650      	mov	r0, sl
 800501c:	f7ff f998 	bl	8004350 <quorem>
 8005020:	9a08      	ldr	r2, [sp, #32]
 8005022:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005026:	f807 3b01 	strb.w	r3, [r7], #1
 800502a:	1aba      	subs	r2, r7, r2
 800502c:	4593      	cmp	fp, r2
 800502e:	ddb9      	ble.n	8004fa4 <_dtoa_r+0xb34>
 8005030:	4651      	mov	r1, sl
 8005032:	2300      	movs	r3, #0
 8005034:	220a      	movs	r2, #10
 8005036:	4628      	mov	r0, r5
 8005038:	f000 f896 	bl	8005168 <__multadd>
 800503c:	4682      	mov	sl, r0
 800503e:	e7eb      	b.n	8005018 <_dtoa_r+0xba8>
 8005040:	080067b3 	.word	0x080067b3
 8005044:	0800670c 	.word	0x0800670c
 8005048:	08006730 	.word	0x08006730

0800504c <_localeconv_r>:
 800504c:	4800      	ldr	r0, [pc, #0]	; (8005050 <_localeconv_r+0x4>)
 800504e:	4770      	bx	lr
 8005050:	20000164 	.word	0x20000164

08005054 <memchr>:
 8005054:	4603      	mov	r3, r0
 8005056:	b510      	push	{r4, lr}
 8005058:	b2c9      	uxtb	r1, r1
 800505a:	4402      	add	r2, r0
 800505c:	4293      	cmp	r3, r2
 800505e:	4618      	mov	r0, r3
 8005060:	d101      	bne.n	8005066 <memchr+0x12>
 8005062:	2000      	movs	r0, #0
 8005064:	e003      	b.n	800506e <memchr+0x1a>
 8005066:	7804      	ldrb	r4, [r0, #0]
 8005068:	3301      	adds	r3, #1
 800506a:	428c      	cmp	r4, r1
 800506c:	d1f6      	bne.n	800505c <memchr+0x8>
 800506e:	bd10      	pop	{r4, pc}

08005070 <memcpy>:
 8005070:	440a      	add	r2, r1
 8005072:	4291      	cmp	r1, r2
 8005074:	f100 33ff 	add.w	r3, r0, #4294967295
 8005078:	d100      	bne.n	800507c <memcpy+0xc>
 800507a:	4770      	bx	lr
 800507c:	b510      	push	{r4, lr}
 800507e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005082:	4291      	cmp	r1, r2
 8005084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005088:	d1f9      	bne.n	800507e <memcpy+0xe>
 800508a:	bd10      	pop	{r4, pc}

0800508c <__malloc_lock>:
 800508c:	4801      	ldr	r0, [pc, #4]	; (8005094 <__malloc_lock+0x8>)
 800508e:	f000 bd26 	b.w	8005ade <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	2000031c 	.word	0x2000031c

08005098 <__malloc_unlock>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__malloc_unlock+0x8>)
 800509a:	f000 bd21 	b.w	8005ae0 <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	2000031c 	.word	0x2000031c

080050a4 <_Balloc>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	b976      	cbnz	r6, 80050cc <_Balloc+0x28>
 80050ae:	2010      	movs	r0, #16
 80050b0:	f7fe fc00 	bl	80038b4 <malloc>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6260      	str	r0, [r4, #36]	; 0x24
 80050b8:	b920      	cbnz	r0, 80050c4 <_Balloc+0x20>
 80050ba:	2166      	movs	r1, #102	; 0x66
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <_Balloc+0x78>)
 80050be:	4818      	ldr	r0, [pc, #96]	; (8005120 <_Balloc+0x7c>)
 80050c0:	f000 fcdc 	bl	8005a7c <__assert_func>
 80050c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050c8:	6006      	str	r6, [r0, #0]
 80050ca:	60c6      	str	r6, [r0, #12]
 80050cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80050ce:	68f3      	ldr	r3, [r6, #12]
 80050d0:	b183      	cbz	r3, 80050f4 <_Balloc+0x50>
 80050d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050da:	b9b8      	cbnz	r0, 800510c <_Balloc+0x68>
 80050dc:	2101      	movs	r1, #1
 80050de:	fa01 f605 	lsl.w	r6, r1, r5
 80050e2:	1d72      	adds	r2, r6, #5
 80050e4:	4620      	mov	r0, r4
 80050e6:	0092      	lsls	r2, r2, #2
 80050e8:	f000 fb5e 	bl	80057a8 <_calloc_r>
 80050ec:	b160      	cbz	r0, 8005108 <_Balloc+0x64>
 80050ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050f2:	e00e      	b.n	8005112 <_Balloc+0x6e>
 80050f4:	2221      	movs	r2, #33	; 0x21
 80050f6:	2104      	movs	r1, #4
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 fb55 	bl	80057a8 <_calloc_r>
 80050fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005100:	60f0      	str	r0, [r6, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e4      	bne.n	80050d2 <_Balloc+0x2e>
 8005108:	2000      	movs	r0, #0
 800510a:	bd70      	pop	{r4, r5, r6, pc}
 800510c:	6802      	ldr	r2, [r0, #0]
 800510e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005112:	2300      	movs	r3, #0
 8005114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005118:	e7f7      	b.n	800510a <_Balloc+0x66>
 800511a:	bf00      	nop
 800511c:	0800673d 	.word	0x0800673d
 8005120:	080067c4 	.word	0x080067c4

08005124 <_Bfree>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005128:	4605      	mov	r5, r0
 800512a:	460c      	mov	r4, r1
 800512c:	b976      	cbnz	r6, 800514c <_Bfree+0x28>
 800512e:	2010      	movs	r0, #16
 8005130:	f7fe fbc0 	bl	80038b4 <malloc>
 8005134:	4602      	mov	r2, r0
 8005136:	6268      	str	r0, [r5, #36]	; 0x24
 8005138:	b920      	cbnz	r0, 8005144 <_Bfree+0x20>
 800513a:	218a      	movs	r1, #138	; 0x8a
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <_Bfree+0x3c>)
 800513e:	4809      	ldr	r0, [pc, #36]	; (8005164 <_Bfree+0x40>)
 8005140:	f000 fc9c 	bl	8005a7c <__assert_func>
 8005144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005148:	6006      	str	r6, [r0, #0]
 800514a:	60c6      	str	r6, [r0, #12]
 800514c:	b13c      	cbz	r4, 800515e <_Bfree+0x3a>
 800514e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005150:	6862      	ldr	r2, [r4, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005158:	6021      	str	r1, [r4, #0]
 800515a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	0800673d 	.word	0x0800673d
 8005164:	080067c4 	.word	0x080067c4

08005168 <__multadd>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4698      	mov	r8, r3
 800516e:	460c      	mov	r4, r1
 8005170:	2300      	movs	r3, #0
 8005172:	690e      	ldr	r6, [r1, #16]
 8005174:	4607      	mov	r7, r0
 8005176:	f101 0014 	add.w	r0, r1, #20
 800517a:	6805      	ldr	r5, [r0, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	b2a9      	uxth	r1, r5
 8005180:	fb02 8101 	mla	r1, r2, r1, r8
 8005184:	0c2d      	lsrs	r5, r5, #16
 8005186:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800518a:	fb02 c505 	mla	r5, r2, r5, ip
 800518e:	b289      	uxth	r1, r1
 8005190:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005194:	429e      	cmp	r6, r3
 8005196:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800519a:	f840 1b04 	str.w	r1, [r0], #4
 800519e:	dcec      	bgt.n	800517a <__multadd+0x12>
 80051a0:	f1b8 0f00 	cmp.w	r8, #0
 80051a4:	d022      	beq.n	80051ec <__multadd+0x84>
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	42b3      	cmp	r3, r6
 80051aa:	dc19      	bgt.n	80051e0 <__multadd+0x78>
 80051ac:	6861      	ldr	r1, [r4, #4]
 80051ae:	4638      	mov	r0, r7
 80051b0:	3101      	adds	r1, #1
 80051b2:	f7ff ff77 	bl	80050a4 <_Balloc>
 80051b6:	4605      	mov	r5, r0
 80051b8:	b928      	cbnz	r0, 80051c6 <__multadd+0x5e>
 80051ba:	4602      	mov	r2, r0
 80051bc:	21b5      	movs	r1, #181	; 0xb5
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <__multadd+0x8c>)
 80051c0:	480d      	ldr	r0, [pc, #52]	; (80051f8 <__multadd+0x90>)
 80051c2:	f000 fc5b 	bl	8005a7c <__assert_func>
 80051c6:	6922      	ldr	r2, [r4, #16]
 80051c8:	f104 010c 	add.w	r1, r4, #12
 80051cc:	3202      	adds	r2, #2
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	300c      	adds	r0, #12
 80051d2:	f7ff ff4d 	bl	8005070 <memcpy>
 80051d6:	4621      	mov	r1, r4
 80051d8:	4638      	mov	r0, r7
 80051da:	f7ff ffa3 	bl	8005124 <_Bfree>
 80051de:	462c      	mov	r4, r5
 80051e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80051e4:	3601      	adds	r6, #1
 80051e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80051ea:	6126      	str	r6, [r4, #16]
 80051ec:	4620      	mov	r0, r4
 80051ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f2:	bf00      	nop
 80051f4:	080067b3 	.word	0x080067b3
 80051f8:	080067c4 	.word	0x080067c4

080051fc <__hi0bits>:
 80051fc:	0c02      	lsrs	r2, r0, #16
 80051fe:	0412      	lsls	r2, r2, #16
 8005200:	4603      	mov	r3, r0
 8005202:	b9ca      	cbnz	r2, 8005238 <__hi0bits+0x3c>
 8005204:	0403      	lsls	r3, r0, #16
 8005206:	2010      	movs	r0, #16
 8005208:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800520c:	bf04      	itt	eq
 800520e:	021b      	lsleq	r3, r3, #8
 8005210:	3008      	addeq	r0, #8
 8005212:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005216:	bf04      	itt	eq
 8005218:	011b      	lsleq	r3, r3, #4
 800521a:	3004      	addeq	r0, #4
 800521c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005220:	bf04      	itt	eq
 8005222:	009b      	lsleq	r3, r3, #2
 8005224:	3002      	addeq	r0, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	db05      	blt.n	8005236 <__hi0bits+0x3a>
 800522a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800522e:	f100 0001 	add.w	r0, r0, #1
 8005232:	bf08      	it	eq
 8005234:	2020      	moveq	r0, #32
 8005236:	4770      	bx	lr
 8005238:	2000      	movs	r0, #0
 800523a:	e7e5      	b.n	8005208 <__hi0bits+0xc>

0800523c <__lo0bits>:
 800523c:	6803      	ldr	r3, [r0, #0]
 800523e:	4602      	mov	r2, r0
 8005240:	f013 0007 	ands.w	r0, r3, #7
 8005244:	d00b      	beq.n	800525e <__lo0bits+0x22>
 8005246:	07d9      	lsls	r1, r3, #31
 8005248:	d422      	bmi.n	8005290 <__lo0bits+0x54>
 800524a:	0798      	lsls	r0, r3, #30
 800524c:	bf49      	itett	mi
 800524e:	085b      	lsrmi	r3, r3, #1
 8005250:	089b      	lsrpl	r3, r3, #2
 8005252:	2001      	movmi	r0, #1
 8005254:	6013      	strmi	r3, [r2, #0]
 8005256:	bf5c      	itt	pl
 8005258:	2002      	movpl	r0, #2
 800525a:	6013      	strpl	r3, [r2, #0]
 800525c:	4770      	bx	lr
 800525e:	b299      	uxth	r1, r3
 8005260:	b909      	cbnz	r1, 8005266 <__lo0bits+0x2a>
 8005262:	2010      	movs	r0, #16
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	f013 0fff 	tst.w	r3, #255	; 0xff
 800526a:	bf04      	itt	eq
 800526c:	0a1b      	lsreq	r3, r3, #8
 800526e:	3008      	addeq	r0, #8
 8005270:	0719      	lsls	r1, r3, #28
 8005272:	bf04      	itt	eq
 8005274:	091b      	lsreq	r3, r3, #4
 8005276:	3004      	addeq	r0, #4
 8005278:	0799      	lsls	r1, r3, #30
 800527a:	bf04      	itt	eq
 800527c:	089b      	lsreq	r3, r3, #2
 800527e:	3002      	addeq	r0, #2
 8005280:	07d9      	lsls	r1, r3, #31
 8005282:	d403      	bmi.n	800528c <__lo0bits+0x50>
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	f100 0001 	add.w	r0, r0, #1
 800528a:	d003      	beq.n	8005294 <__lo0bits+0x58>
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	4770      	bx	lr
 8005290:	2000      	movs	r0, #0
 8005292:	4770      	bx	lr
 8005294:	2020      	movs	r0, #32
 8005296:	4770      	bx	lr

08005298 <__i2b>:
 8005298:	b510      	push	{r4, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	2101      	movs	r1, #1
 800529e:	f7ff ff01 	bl	80050a4 <_Balloc>
 80052a2:	4602      	mov	r2, r0
 80052a4:	b928      	cbnz	r0, 80052b2 <__i2b+0x1a>
 80052a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80052aa:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__i2b+0x24>)
 80052ac:	4804      	ldr	r0, [pc, #16]	; (80052c0 <__i2b+0x28>)
 80052ae:	f000 fbe5 	bl	8005a7c <__assert_func>
 80052b2:	2301      	movs	r3, #1
 80052b4:	6144      	str	r4, [r0, #20]
 80052b6:	6103      	str	r3, [r0, #16]
 80052b8:	bd10      	pop	{r4, pc}
 80052ba:	bf00      	nop
 80052bc:	080067b3 	.word	0x080067b3
 80052c0:	080067c4 	.word	0x080067c4

080052c4 <__multiply>:
 80052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	4614      	mov	r4, r2
 80052ca:	690a      	ldr	r2, [r1, #16]
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	460d      	mov	r5, r1
 80052d0:	429a      	cmp	r2, r3
 80052d2:	bfbe      	ittt	lt
 80052d4:	460b      	movlt	r3, r1
 80052d6:	4625      	movlt	r5, r4
 80052d8:	461c      	movlt	r4, r3
 80052da:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80052de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80052e2:	68ab      	ldr	r3, [r5, #8]
 80052e4:	6869      	ldr	r1, [r5, #4]
 80052e6:	eb0a 0709 	add.w	r7, sl, r9
 80052ea:	42bb      	cmp	r3, r7
 80052ec:	b085      	sub	sp, #20
 80052ee:	bfb8      	it	lt
 80052f0:	3101      	addlt	r1, #1
 80052f2:	f7ff fed7 	bl	80050a4 <_Balloc>
 80052f6:	b930      	cbnz	r0, 8005306 <__multiply+0x42>
 80052f8:	4602      	mov	r2, r0
 80052fa:	f240 115d 	movw	r1, #349	; 0x15d
 80052fe:	4b41      	ldr	r3, [pc, #260]	; (8005404 <__multiply+0x140>)
 8005300:	4841      	ldr	r0, [pc, #260]	; (8005408 <__multiply+0x144>)
 8005302:	f000 fbbb 	bl	8005a7c <__assert_func>
 8005306:	f100 0614 	add.w	r6, r0, #20
 800530a:	4633      	mov	r3, r6
 800530c:	2200      	movs	r2, #0
 800530e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005312:	4543      	cmp	r3, r8
 8005314:	d31e      	bcc.n	8005354 <__multiply+0x90>
 8005316:	f105 0c14 	add.w	ip, r5, #20
 800531a:	f104 0314 	add.w	r3, r4, #20
 800531e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005322:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005326:	9202      	str	r2, [sp, #8]
 8005328:	ebac 0205 	sub.w	r2, ip, r5
 800532c:	3a15      	subs	r2, #21
 800532e:	f022 0203 	bic.w	r2, r2, #3
 8005332:	3204      	adds	r2, #4
 8005334:	f105 0115 	add.w	r1, r5, #21
 8005338:	458c      	cmp	ip, r1
 800533a:	bf38      	it	cc
 800533c:	2204      	movcc	r2, #4
 800533e:	9201      	str	r2, [sp, #4]
 8005340:	9a02      	ldr	r2, [sp, #8]
 8005342:	9303      	str	r3, [sp, #12]
 8005344:	429a      	cmp	r2, r3
 8005346:	d808      	bhi.n	800535a <__multiply+0x96>
 8005348:	2f00      	cmp	r7, #0
 800534a:	dc55      	bgt.n	80053f8 <__multiply+0x134>
 800534c:	6107      	str	r7, [r0, #16]
 800534e:	b005      	add	sp, #20
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	f843 2b04 	str.w	r2, [r3], #4
 8005358:	e7db      	b.n	8005312 <__multiply+0x4e>
 800535a:	f8b3 a000 	ldrh.w	sl, [r3]
 800535e:	f1ba 0f00 	cmp.w	sl, #0
 8005362:	d020      	beq.n	80053a6 <__multiply+0xe2>
 8005364:	46b1      	mov	r9, r6
 8005366:	2200      	movs	r2, #0
 8005368:	f105 0e14 	add.w	lr, r5, #20
 800536c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005370:	f8d9 b000 	ldr.w	fp, [r9]
 8005374:	b2a1      	uxth	r1, r4
 8005376:	fa1f fb8b 	uxth.w	fp, fp
 800537a:	fb0a b101 	mla	r1, sl, r1, fp
 800537e:	4411      	add	r1, r2
 8005380:	f8d9 2000 	ldr.w	r2, [r9]
 8005384:	0c24      	lsrs	r4, r4, #16
 8005386:	0c12      	lsrs	r2, r2, #16
 8005388:	fb0a 2404 	mla	r4, sl, r4, r2
 800538c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005390:	b289      	uxth	r1, r1
 8005392:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005396:	45f4      	cmp	ip, lr
 8005398:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800539c:	f849 1b04 	str.w	r1, [r9], #4
 80053a0:	d8e4      	bhi.n	800536c <__multiply+0xa8>
 80053a2:	9901      	ldr	r1, [sp, #4]
 80053a4:	5072      	str	r2, [r6, r1]
 80053a6:	9a03      	ldr	r2, [sp, #12]
 80053a8:	3304      	adds	r3, #4
 80053aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80053ae:	f1b9 0f00 	cmp.w	r9, #0
 80053b2:	d01f      	beq.n	80053f4 <__multiply+0x130>
 80053b4:	46b6      	mov	lr, r6
 80053b6:	f04f 0a00 	mov.w	sl, #0
 80053ba:	6834      	ldr	r4, [r6, #0]
 80053bc:	f105 0114 	add.w	r1, r5, #20
 80053c0:	880a      	ldrh	r2, [r1, #0]
 80053c2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80053c6:	b2a4      	uxth	r4, r4
 80053c8:	fb09 b202 	mla	r2, r9, r2, fp
 80053cc:	4492      	add	sl, r2
 80053ce:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80053d2:	f84e 4b04 	str.w	r4, [lr], #4
 80053d6:	f851 4b04 	ldr.w	r4, [r1], #4
 80053da:	f8be 2000 	ldrh.w	r2, [lr]
 80053de:	0c24      	lsrs	r4, r4, #16
 80053e0:	fb09 2404 	mla	r4, r9, r4, r2
 80053e4:	458c      	cmp	ip, r1
 80053e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80053ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80053ee:	d8e7      	bhi.n	80053c0 <__multiply+0xfc>
 80053f0:	9a01      	ldr	r2, [sp, #4]
 80053f2:	50b4      	str	r4, [r6, r2]
 80053f4:	3604      	adds	r6, #4
 80053f6:	e7a3      	b.n	8005340 <__multiply+0x7c>
 80053f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1a5      	bne.n	800534c <__multiply+0x88>
 8005400:	3f01      	subs	r7, #1
 8005402:	e7a1      	b.n	8005348 <__multiply+0x84>
 8005404:	080067b3 	.word	0x080067b3
 8005408:	080067c4 	.word	0x080067c4

0800540c <__pow5mult>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	4615      	mov	r5, r2
 8005412:	f012 0203 	ands.w	r2, r2, #3
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	d007      	beq.n	800542c <__pow5mult+0x20>
 800541c:	4c25      	ldr	r4, [pc, #148]	; (80054b4 <__pow5mult+0xa8>)
 800541e:	3a01      	subs	r2, #1
 8005420:	2300      	movs	r3, #0
 8005422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005426:	f7ff fe9f 	bl	8005168 <__multadd>
 800542a:	4607      	mov	r7, r0
 800542c:	10ad      	asrs	r5, r5, #2
 800542e:	d03d      	beq.n	80054ac <__pow5mult+0xa0>
 8005430:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005432:	b97c      	cbnz	r4, 8005454 <__pow5mult+0x48>
 8005434:	2010      	movs	r0, #16
 8005436:	f7fe fa3d 	bl	80038b4 <malloc>
 800543a:	4602      	mov	r2, r0
 800543c:	6270      	str	r0, [r6, #36]	; 0x24
 800543e:	b928      	cbnz	r0, 800544c <__pow5mult+0x40>
 8005440:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <__pow5mult+0xac>)
 8005446:	481d      	ldr	r0, [pc, #116]	; (80054bc <__pow5mult+0xb0>)
 8005448:	f000 fb18 	bl	8005a7c <__assert_func>
 800544c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005450:	6004      	str	r4, [r0, #0]
 8005452:	60c4      	str	r4, [r0, #12]
 8005454:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800545c:	b94c      	cbnz	r4, 8005472 <__pow5mult+0x66>
 800545e:	f240 2171 	movw	r1, #625	; 0x271
 8005462:	4630      	mov	r0, r6
 8005464:	f7ff ff18 	bl	8005298 <__i2b>
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005470:	6003      	str	r3, [r0, #0]
 8005472:	f04f 0900 	mov.w	r9, #0
 8005476:	07eb      	lsls	r3, r5, #31
 8005478:	d50a      	bpl.n	8005490 <__pow5mult+0x84>
 800547a:	4639      	mov	r1, r7
 800547c:	4622      	mov	r2, r4
 800547e:	4630      	mov	r0, r6
 8005480:	f7ff ff20 	bl	80052c4 <__multiply>
 8005484:	4680      	mov	r8, r0
 8005486:	4639      	mov	r1, r7
 8005488:	4630      	mov	r0, r6
 800548a:	f7ff fe4b 	bl	8005124 <_Bfree>
 800548e:	4647      	mov	r7, r8
 8005490:	106d      	asrs	r5, r5, #1
 8005492:	d00b      	beq.n	80054ac <__pow5mult+0xa0>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	b938      	cbnz	r0, 80054a8 <__pow5mult+0x9c>
 8005498:	4622      	mov	r2, r4
 800549a:	4621      	mov	r1, r4
 800549c:	4630      	mov	r0, r6
 800549e:	f7ff ff11 	bl	80052c4 <__multiply>
 80054a2:	6020      	str	r0, [r4, #0]
 80054a4:	f8c0 9000 	str.w	r9, [r0]
 80054a8:	4604      	mov	r4, r0
 80054aa:	e7e4      	b.n	8005476 <__pow5mult+0x6a>
 80054ac:	4638      	mov	r0, r7
 80054ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b2:	bf00      	nop
 80054b4:	08006918 	.word	0x08006918
 80054b8:	0800673d 	.word	0x0800673d
 80054bc:	080067c4 	.word	0x080067c4

080054c0 <__lshift>:
 80054c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	460c      	mov	r4, r1
 80054c6:	4607      	mov	r7, r0
 80054c8:	4691      	mov	r9, r2
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	6849      	ldr	r1, [r1, #4]
 80054ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80054d8:	f108 0601 	add.w	r6, r8, #1
 80054dc:	42b3      	cmp	r3, r6
 80054de:	db0b      	blt.n	80054f8 <__lshift+0x38>
 80054e0:	4638      	mov	r0, r7
 80054e2:	f7ff fddf 	bl	80050a4 <_Balloc>
 80054e6:	4605      	mov	r5, r0
 80054e8:	b948      	cbnz	r0, 80054fe <__lshift+0x3e>
 80054ea:	4602      	mov	r2, r0
 80054ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <__lshift+0xd0>)
 80054f2:	4828      	ldr	r0, [pc, #160]	; (8005594 <__lshift+0xd4>)
 80054f4:	f000 fac2 	bl	8005a7c <__assert_func>
 80054f8:	3101      	adds	r1, #1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	e7ee      	b.n	80054dc <__lshift+0x1c>
 80054fe:	2300      	movs	r3, #0
 8005500:	f100 0114 	add.w	r1, r0, #20
 8005504:	f100 0210 	add.w	r2, r0, #16
 8005508:	4618      	mov	r0, r3
 800550a:	4553      	cmp	r3, sl
 800550c:	db33      	blt.n	8005576 <__lshift+0xb6>
 800550e:	6920      	ldr	r0, [r4, #16]
 8005510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005514:	f104 0314 	add.w	r3, r4, #20
 8005518:	f019 091f 	ands.w	r9, r9, #31
 800551c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005524:	d02b      	beq.n	800557e <__lshift+0xbe>
 8005526:	468a      	mov	sl, r1
 8005528:	2200      	movs	r2, #0
 800552a:	f1c9 0e20 	rsb	lr, r9, #32
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	fa00 f009 	lsl.w	r0, r0, r9
 8005534:	4302      	orrs	r2, r0
 8005536:	f84a 2b04 	str.w	r2, [sl], #4
 800553a:	f853 2b04 	ldr.w	r2, [r3], #4
 800553e:	459c      	cmp	ip, r3
 8005540:	fa22 f20e 	lsr.w	r2, r2, lr
 8005544:	d8f3      	bhi.n	800552e <__lshift+0x6e>
 8005546:	ebac 0304 	sub.w	r3, ip, r4
 800554a:	3b15      	subs	r3, #21
 800554c:	f023 0303 	bic.w	r3, r3, #3
 8005550:	3304      	adds	r3, #4
 8005552:	f104 0015 	add.w	r0, r4, #21
 8005556:	4584      	cmp	ip, r0
 8005558:	bf38      	it	cc
 800555a:	2304      	movcc	r3, #4
 800555c:	50ca      	str	r2, [r1, r3]
 800555e:	b10a      	cbz	r2, 8005564 <__lshift+0xa4>
 8005560:	f108 0602 	add.w	r6, r8, #2
 8005564:	3e01      	subs	r6, #1
 8005566:	4638      	mov	r0, r7
 8005568:	4621      	mov	r1, r4
 800556a:	612e      	str	r6, [r5, #16]
 800556c:	f7ff fdda 	bl	8005124 <_Bfree>
 8005570:	4628      	mov	r0, r5
 8005572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005576:	f842 0f04 	str.w	r0, [r2, #4]!
 800557a:	3301      	adds	r3, #1
 800557c:	e7c5      	b.n	800550a <__lshift+0x4a>
 800557e:	3904      	subs	r1, #4
 8005580:	f853 2b04 	ldr.w	r2, [r3], #4
 8005584:	459c      	cmp	ip, r3
 8005586:	f841 2f04 	str.w	r2, [r1, #4]!
 800558a:	d8f9      	bhi.n	8005580 <__lshift+0xc0>
 800558c:	e7ea      	b.n	8005564 <__lshift+0xa4>
 800558e:	bf00      	nop
 8005590:	080067b3 	.word	0x080067b3
 8005594:	080067c4 	.word	0x080067c4

08005598 <__mcmp>:
 8005598:	4603      	mov	r3, r0
 800559a:	690a      	ldr	r2, [r1, #16]
 800559c:	6900      	ldr	r0, [r0, #16]
 800559e:	b530      	push	{r4, r5, lr}
 80055a0:	1a80      	subs	r0, r0, r2
 80055a2:	d10d      	bne.n	80055c0 <__mcmp+0x28>
 80055a4:	3314      	adds	r3, #20
 80055a6:	3114      	adds	r1, #20
 80055a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80055ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80055b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80055b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80055b8:	4295      	cmp	r5, r2
 80055ba:	d002      	beq.n	80055c2 <__mcmp+0x2a>
 80055bc:	d304      	bcc.n	80055c8 <__mcmp+0x30>
 80055be:	2001      	movs	r0, #1
 80055c0:	bd30      	pop	{r4, r5, pc}
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	d3f4      	bcc.n	80055b0 <__mcmp+0x18>
 80055c6:	e7fb      	b.n	80055c0 <__mcmp+0x28>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e7f8      	b.n	80055c0 <__mcmp+0x28>
	...

080055d0 <__mdiff>:
 80055d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	460c      	mov	r4, r1
 80055d6:	4606      	mov	r6, r0
 80055d8:	4611      	mov	r1, r2
 80055da:	4620      	mov	r0, r4
 80055dc:	4692      	mov	sl, r2
 80055de:	f7ff ffdb 	bl	8005598 <__mcmp>
 80055e2:	1e05      	subs	r5, r0, #0
 80055e4:	d111      	bne.n	800560a <__mdiff+0x3a>
 80055e6:	4629      	mov	r1, r5
 80055e8:	4630      	mov	r0, r6
 80055ea:	f7ff fd5b 	bl	80050a4 <_Balloc>
 80055ee:	4602      	mov	r2, r0
 80055f0:	b928      	cbnz	r0, 80055fe <__mdiff+0x2e>
 80055f2:	f240 2132 	movw	r1, #562	; 0x232
 80055f6:	4b3c      	ldr	r3, [pc, #240]	; (80056e8 <__mdiff+0x118>)
 80055f8:	483c      	ldr	r0, [pc, #240]	; (80056ec <__mdiff+0x11c>)
 80055fa:	f000 fa3f 	bl	8005a7c <__assert_func>
 80055fe:	2301      	movs	r3, #1
 8005600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005604:	4610      	mov	r0, r2
 8005606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560a:	bfa4      	itt	ge
 800560c:	4653      	movge	r3, sl
 800560e:	46a2      	movge	sl, r4
 8005610:	4630      	mov	r0, r6
 8005612:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005616:	bfa6      	itte	ge
 8005618:	461c      	movge	r4, r3
 800561a:	2500      	movge	r5, #0
 800561c:	2501      	movlt	r5, #1
 800561e:	f7ff fd41 	bl	80050a4 <_Balloc>
 8005622:	4602      	mov	r2, r0
 8005624:	b918      	cbnz	r0, 800562e <__mdiff+0x5e>
 8005626:	f44f 7110 	mov.w	r1, #576	; 0x240
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <__mdiff+0x118>)
 800562c:	e7e4      	b.n	80055f8 <__mdiff+0x28>
 800562e:	f100 0814 	add.w	r8, r0, #20
 8005632:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005636:	60c5      	str	r5, [r0, #12]
 8005638:	f04f 0c00 	mov.w	ip, #0
 800563c:	f10a 0514 	add.w	r5, sl, #20
 8005640:	f10a 0010 	add.w	r0, sl, #16
 8005644:	46c2      	mov	sl, r8
 8005646:	6926      	ldr	r6, [r4, #16]
 8005648:	f104 0914 	add.w	r9, r4, #20
 800564c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005654:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005658:	f859 3b04 	ldr.w	r3, [r9], #4
 800565c:	fa1f f18b 	uxth.w	r1, fp
 8005660:	4461      	add	r1, ip
 8005662:	fa1f fc83 	uxth.w	ip, r3
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	eba1 010c 	sub.w	r1, r1, ip
 800566c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005670:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005674:	b289      	uxth	r1, r1
 8005676:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800567a:	454e      	cmp	r6, r9
 800567c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005680:	f84a 3b04 	str.w	r3, [sl], #4
 8005684:	d8e6      	bhi.n	8005654 <__mdiff+0x84>
 8005686:	1b33      	subs	r3, r6, r4
 8005688:	3b15      	subs	r3, #21
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	3415      	adds	r4, #21
 8005690:	3304      	adds	r3, #4
 8005692:	42a6      	cmp	r6, r4
 8005694:	bf38      	it	cc
 8005696:	2304      	movcc	r3, #4
 8005698:	441d      	add	r5, r3
 800569a:	4443      	add	r3, r8
 800569c:	461e      	mov	r6, r3
 800569e:	462c      	mov	r4, r5
 80056a0:	4574      	cmp	r4, lr
 80056a2:	d30e      	bcc.n	80056c2 <__mdiff+0xf2>
 80056a4:	f10e 0103 	add.w	r1, lr, #3
 80056a8:	1b49      	subs	r1, r1, r5
 80056aa:	f021 0103 	bic.w	r1, r1, #3
 80056ae:	3d03      	subs	r5, #3
 80056b0:	45ae      	cmp	lr, r5
 80056b2:	bf38      	it	cc
 80056b4:	2100      	movcc	r1, #0
 80056b6:	4419      	add	r1, r3
 80056b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80056bc:	b18b      	cbz	r3, 80056e2 <__mdiff+0x112>
 80056be:	6117      	str	r7, [r2, #16]
 80056c0:	e7a0      	b.n	8005604 <__mdiff+0x34>
 80056c2:	f854 8b04 	ldr.w	r8, [r4], #4
 80056c6:	fa1f f188 	uxth.w	r1, r8
 80056ca:	4461      	add	r1, ip
 80056cc:	1408      	asrs	r0, r1, #16
 80056ce:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80056d2:	b289      	uxth	r1, r1
 80056d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80056d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80056dc:	f846 1b04 	str.w	r1, [r6], #4
 80056e0:	e7de      	b.n	80056a0 <__mdiff+0xd0>
 80056e2:	3f01      	subs	r7, #1
 80056e4:	e7e8      	b.n	80056b8 <__mdiff+0xe8>
 80056e6:	bf00      	nop
 80056e8:	080067b3 	.word	0x080067b3
 80056ec:	080067c4 	.word	0x080067c4

080056f0 <__d2b>:
 80056f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056f4:	2101      	movs	r1, #1
 80056f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80056fa:	4690      	mov	r8, r2
 80056fc:	461d      	mov	r5, r3
 80056fe:	f7ff fcd1 	bl	80050a4 <_Balloc>
 8005702:	4604      	mov	r4, r0
 8005704:	b930      	cbnz	r0, 8005714 <__d2b+0x24>
 8005706:	4602      	mov	r2, r0
 8005708:	f240 310a 	movw	r1, #778	; 0x30a
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <__d2b+0xb0>)
 800570e:	4825      	ldr	r0, [pc, #148]	; (80057a4 <__d2b+0xb4>)
 8005710:	f000 f9b4 	bl	8005a7c <__assert_func>
 8005714:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005718:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800571c:	bb2d      	cbnz	r5, 800576a <__d2b+0x7a>
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	f1b8 0300 	subs.w	r3, r8, #0
 8005724:	d026      	beq.n	8005774 <__d2b+0x84>
 8005726:	4668      	mov	r0, sp
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	f7ff fd87 	bl	800523c <__lo0bits>
 800572e:	9900      	ldr	r1, [sp, #0]
 8005730:	b1f0      	cbz	r0, 8005770 <__d2b+0x80>
 8005732:	9a01      	ldr	r2, [sp, #4]
 8005734:	f1c0 0320 	rsb	r3, r0, #32
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	430b      	orrs	r3, r1
 800573e:	40c2      	lsrs	r2, r0
 8005740:	6163      	str	r3, [r4, #20]
 8005742:	9201      	str	r2, [sp, #4]
 8005744:	9b01      	ldr	r3, [sp, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf14      	ite	ne
 800574a:	2102      	movne	r1, #2
 800574c:	2101      	moveq	r1, #1
 800574e:	61a3      	str	r3, [r4, #24]
 8005750:	6121      	str	r1, [r4, #16]
 8005752:	b1c5      	cbz	r5, 8005786 <__d2b+0x96>
 8005754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005758:	4405      	add	r5, r0
 800575a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800575e:	603d      	str	r5, [r7, #0]
 8005760:	6030      	str	r0, [r6, #0]
 8005762:	4620      	mov	r0, r4
 8005764:	b002      	add	sp, #8
 8005766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576e:	e7d6      	b.n	800571e <__d2b+0x2e>
 8005770:	6161      	str	r1, [r4, #20]
 8005772:	e7e7      	b.n	8005744 <__d2b+0x54>
 8005774:	a801      	add	r0, sp, #4
 8005776:	f7ff fd61 	bl	800523c <__lo0bits>
 800577a:	2101      	movs	r1, #1
 800577c:	9b01      	ldr	r3, [sp, #4]
 800577e:	6121      	str	r1, [r4, #16]
 8005780:	6163      	str	r3, [r4, #20]
 8005782:	3020      	adds	r0, #32
 8005784:	e7e5      	b.n	8005752 <__d2b+0x62>
 8005786:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800578a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800578e:	6038      	str	r0, [r7, #0]
 8005790:	6918      	ldr	r0, [r3, #16]
 8005792:	f7ff fd33 	bl	80051fc <__hi0bits>
 8005796:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800579a:	6031      	str	r1, [r6, #0]
 800579c:	e7e1      	b.n	8005762 <__d2b+0x72>
 800579e:	bf00      	nop
 80057a0:	080067b3 	.word	0x080067b3
 80057a4:	080067c4 	.word	0x080067c4

080057a8 <_calloc_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	fb02 f501 	mul.w	r5, r2, r1
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fe f8e4 	bl	800397c <_malloc_r>
 80057b4:	4604      	mov	r4, r0
 80057b6:	b118      	cbz	r0, 80057c0 <_calloc_r+0x18>
 80057b8:	462a      	mov	r2, r5
 80057ba:	2100      	movs	r1, #0
 80057bc:	f7fe f88a 	bl	80038d4 <memset>
 80057c0:	4620      	mov	r0, r4
 80057c2:	bd38      	pop	{r3, r4, r5, pc}

080057c4 <__ssputs_r>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	688e      	ldr	r6, [r1, #8]
 80057ca:	4682      	mov	sl, r0
 80057cc:	429e      	cmp	r6, r3
 80057ce:	460c      	mov	r4, r1
 80057d0:	4690      	mov	r8, r2
 80057d2:	461f      	mov	r7, r3
 80057d4:	d838      	bhi.n	8005848 <__ssputs_r+0x84>
 80057d6:	898a      	ldrh	r2, [r1, #12]
 80057d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057dc:	d032      	beq.n	8005844 <__ssputs_r+0x80>
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	6909      	ldr	r1, [r1, #16]
 80057e2:	3301      	adds	r3, #1
 80057e4:	eba5 0901 	sub.w	r9, r5, r1
 80057e8:	6965      	ldr	r5, [r4, #20]
 80057ea:	444b      	add	r3, r9
 80057ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f4:	106d      	asrs	r5, r5, #1
 80057f6:	429d      	cmp	r5, r3
 80057f8:	bf38      	it	cc
 80057fa:	461d      	movcc	r5, r3
 80057fc:	0553      	lsls	r3, r2, #21
 80057fe:	d531      	bpl.n	8005864 <__ssputs_r+0xa0>
 8005800:	4629      	mov	r1, r5
 8005802:	f7fe f8bb 	bl	800397c <_malloc_r>
 8005806:	4606      	mov	r6, r0
 8005808:	b950      	cbnz	r0, 8005820 <__ssputs_r+0x5c>
 800580a:	230c      	movs	r3, #12
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	f8ca 3000 	str.w	r3, [sl]
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005820:	464a      	mov	r2, r9
 8005822:	6921      	ldr	r1, [r4, #16]
 8005824:	f7ff fc24 	bl	8005070 <memcpy>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800582e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005832:	81a3      	strh	r3, [r4, #12]
 8005834:	6126      	str	r6, [r4, #16]
 8005836:	444e      	add	r6, r9
 8005838:	6026      	str	r6, [r4, #0]
 800583a:	463e      	mov	r6, r7
 800583c:	6165      	str	r5, [r4, #20]
 800583e:	eba5 0509 	sub.w	r5, r5, r9
 8005842:	60a5      	str	r5, [r4, #8]
 8005844:	42be      	cmp	r6, r7
 8005846:	d900      	bls.n	800584a <__ssputs_r+0x86>
 8005848:	463e      	mov	r6, r7
 800584a:	4632      	mov	r2, r6
 800584c:	4641      	mov	r1, r8
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	f000 f959 	bl	8005b06 <memmove>
 8005854:	68a3      	ldr	r3, [r4, #8]
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	1b9b      	subs	r3, r3, r6
 800585a:	4432      	add	r2, r6
 800585c:	2000      	movs	r0, #0
 800585e:	60a3      	str	r3, [r4, #8]
 8005860:	6022      	str	r2, [r4, #0]
 8005862:	e7db      	b.n	800581c <__ssputs_r+0x58>
 8005864:	462a      	mov	r2, r5
 8005866:	f000 f968 	bl	8005b3a <_realloc_r>
 800586a:	4606      	mov	r6, r0
 800586c:	2800      	cmp	r0, #0
 800586e:	d1e1      	bne.n	8005834 <__ssputs_r+0x70>
 8005870:	4650      	mov	r0, sl
 8005872:	6921      	ldr	r1, [r4, #16]
 8005874:	f7fe f836 	bl	80038e4 <_free_r>
 8005878:	e7c7      	b.n	800580a <__ssputs_r+0x46>
	...

0800587c <_svfiprintf_r>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	4698      	mov	r8, r3
 8005882:	898b      	ldrh	r3, [r1, #12]
 8005884:	4607      	mov	r7, r0
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	460d      	mov	r5, r1
 800588a:	4614      	mov	r4, r2
 800588c:	b09d      	sub	sp, #116	; 0x74
 800588e:	d50e      	bpl.n	80058ae <_svfiprintf_r+0x32>
 8005890:	690b      	ldr	r3, [r1, #16]
 8005892:	b963      	cbnz	r3, 80058ae <_svfiprintf_r+0x32>
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	f7fe f871 	bl	800397c <_malloc_r>
 800589a:	6028      	str	r0, [r5, #0]
 800589c:	6128      	str	r0, [r5, #16]
 800589e:	b920      	cbnz	r0, 80058aa <_svfiprintf_r+0x2e>
 80058a0:	230c      	movs	r3, #12
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	e0d1      	b.n	8005a4e <_svfiprintf_r+0x1d2>
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	616b      	str	r3, [r5, #20]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9309      	str	r3, [sp, #36]	; 0x24
 80058b2:	2320      	movs	r3, #32
 80058b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058b8:	2330      	movs	r3, #48	; 0x30
 80058ba:	f04f 0901 	mov.w	r9, #1
 80058be:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a68 <_svfiprintf_r+0x1ec>
 80058c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058ca:	4623      	mov	r3, r4
 80058cc:	469a      	mov	sl, r3
 80058ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d2:	b10a      	cbz	r2, 80058d8 <_svfiprintf_r+0x5c>
 80058d4:	2a25      	cmp	r2, #37	; 0x25
 80058d6:	d1f9      	bne.n	80058cc <_svfiprintf_r+0x50>
 80058d8:	ebba 0b04 	subs.w	fp, sl, r4
 80058dc:	d00b      	beq.n	80058f6 <_svfiprintf_r+0x7a>
 80058de:	465b      	mov	r3, fp
 80058e0:	4622      	mov	r2, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	4638      	mov	r0, r7
 80058e6:	f7ff ff6d 	bl	80057c4 <__ssputs_r>
 80058ea:	3001      	adds	r0, #1
 80058ec:	f000 80aa 	beq.w	8005a44 <_svfiprintf_r+0x1c8>
 80058f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f2:	445a      	add	r2, fp
 80058f4:	9209      	str	r2, [sp, #36]	; 0x24
 80058f6:	f89a 3000 	ldrb.w	r3, [sl]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80a2 	beq.w	8005a44 <_svfiprintf_r+0x1c8>
 8005900:	2300      	movs	r3, #0
 8005902:	f04f 32ff 	mov.w	r2, #4294967295
 8005906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800590a:	f10a 0a01 	add.w	sl, sl, #1
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	9307      	str	r3, [sp, #28]
 8005912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005916:	931a      	str	r3, [sp, #104]	; 0x68
 8005918:	4654      	mov	r4, sl
 800591a:	2205      	movs	r2, #5
 800591c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005920:	4851      	ldr	r0, [pc, #324]	; (8005a68 <_svfiprintf_r+0x1ec>)
 8005922:	f7ff fb97 	bl	8005054 <memchr>
 8005926:	9a04      	ldr	r2, [sp, #16]
 8005928:	b9d8      	cbnz	r0, 8005962 <_svfiprintf_r+0xe6>
 800592a:	06d0      	lsls	r0, r2, #27
 800592c:	bf44      	itt	mi
 800592e:	2320      	movmi	r3, #32
 8005930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005934:	0711      	lsls	r1, r2, #28
 8005936:	bf44      	itt	mi
 8005938:	232b      	movmi	r3, #43	; 0x2b
 800593a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593e:	f89a 3000 	ldrb.w	r3, [sl]
 8005942:	2b2a      	cmp	r3, #42	; 0x2a
 8005944:	d015      	beq.n	8005972 <_svfiprintf_r+0xf6>
 8005946:	4654      	mov	r4, sl
 8005948:	2000      	movs	r0, #0
 800594a:	f04f 0c0a 	mov.w	ip, #10
 800594e:	9a07      	ldr	r2, [sp, #28]
 8005950:	4621      	mov	r1, r4
 8005952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005956:	3b30      	subs	r3, #48	; 0x30
 8005958:	2b09      	cmp	r3, #9
 800595a:	d94e      	bls.n	80059fa <_svfiprintf_r+0x17e>
 800595c:	b1b0      	cbz	r0, 800598c <_svfiprintf_r+0x110>
 800595e:	9207      	str	r2, [sp, #28]
 8005960:	e014      	b.n	800598c <_svfiprintf_r+0x110>
 8005962:	eba0 0308 	sub.w	r3, r0, r8
 8005966:	fa09 f303 	lsl.w	r3, r9, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	46a2      	mov	sl, r4
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	e7d2      	b.n	8005918 <_svfiprintf_r+0x9c>
 8005972:	9b03      	ldr	r3, [sp, #12]
 8005974:	1d19      	adds	r1, r3, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	9103      	str	r1, [sp, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfbb      	ittet	lt
 800597e:	425b      	neglt	r3, r3
 8005980:	f042 0202 	orrlt.w	r2, r2, #2
 8005984:	9307      	strge	r3, [sp, #28]
 8005986:	9307      	strlt	r3, [sp, #28]
 8005988:	bfb8      	it	lt
 800598a:	9204      	strlt	r2, [sp, #16]
 800598c:	7823      	ldrb	r3, [r4, #0]
 800598e:	2b2e      	cmp	r3, #46	; 0x2e
 8005990:	d10c      	bne.n	80059ac <_svfiprintf_r+0x130>
 8005992:	7863      	ldrb	r3, [r4, #1]
 8005994:	2b2a      	cmp	r3, #42	; 0x2a
 8005996:	d135      	bne.n	8005a04 <_svfiprintf_r+0x188>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	3402      	adds	r4, #2
 800599c:	1d1a      	adds	r2, r3, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	9203      	str	r2, [sp, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bfb8      	it	lt
 80059a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a78 <_svfiprintf_r+0x1fc>
 80059b0:	2203      	movs	r2, #3
 80059b2:	4650      	mov	r0, sl
 80059b4:	7821      	ldrb	r1, [r4, #0]
 80059b6:	f7ff fb4d 	bl	8005054 <memchr>
 80059ba:	b140      	cbz	r0, 80059ce <_svfiprintf_r+0x152>
 80059bc:	2340      	movs	r3, #64	; 0x40
 80059be:	eba0 000a 	sub.w	r0, r0, sl
 80059c2:	fa03 f000 	lsl.w	r0, r3, r0
 80059c6:	9b04      	ldr	r3, [sp, #16]
 80059c8:	3401      	adds	r4, #1
 80059ca:	4303      	orrs	r3, r0
 80059cc:	9304      	str	r3, [sp, #16]
 80059ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d2:	2206      	movs	r2, #6
 80059d4:	4825      	ldr	r0, [pc, #148]	; (8005a6c <_svfiprintf_r+0x1f0>)
 80059d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059da:	f7ff fb3b 	bl	8005054 <memchr>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d038      	beq.n	8005a54 <_svfiprintf_r+0x1d8>
 80059e2:	4b23      	ldr	r3, [pc, #140]	; (8005a70 <_svfiprintf_r+0x1f4>)
 80059e4:	bb1b      	cbnz	r3, 8005a2e <_svfiprintf_r+0x1b2>
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	3307      	adds	r3, #7
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	3308      	adds	r3, #8
 80059f0:	9303      	str	r3, [sp, #12]
 80059f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f4:	4433      	add	r3, r6
 80059f6:	9309      	str	r3, [sp, #36]	; 0x24
 80059f8:	e767      	b.n	80058ca <_svfiprintf_r+0x4e>
 80059fa:	460c      	mov	r4, r1
 80059fc:	2001      	movs	r0, #1
 80059fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a02:	e7a5      	b.n	8005950 <_svfiprintf_r+0xd4>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f04f 0c0a 	mov.w	ip, #10
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	3401      	adds	r4, #1
 8005a0e:	9305      	str	r3, [sp, #20]
 8005a10:	4620      	mov	r0, r4
 8005a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a16:	3a30      	subs	r2, #48	; 0x30
 8005a18:	2a09      	cmp	r2, #9
 8005a1a:	d903      	bls.n	8005a24 <_svfiprintf_r+0x1a8>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0c5      	beq.n	80059ac <_svfiprintf_r+0x130>
 8005a20:	9105      	str	r1, [sp, #20]
 8005a22:	e7c3      	b.n	80059ac <_svfiprintf_r+0x130>
 8005a24:	4604      	mov	r4, r0
 8005a26:	2301      	movs	r3, #1
 8005a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a2c:	e7f0      	b.n	8005a10 <_svfiprintf_r+0x194>
 8005a2e:	ab03      	add	r3, sp, #12
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	462a      	mov	r2, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <_svfiprintf_r+0x1f8>)
 8005a38:	a904      	add	r1, sp, #16
 8005a3a:	f7fe f897 	bl	8003b6c <_printf_float>
 8005a3e:	1c42      	adds	r2, r0, #1
 8005a40:	4606      	mov	r6, r0
 8005a42:	d1d6      	bne.n	80059f2 <_svfiprintf_r+0x176>
 8005a44:	89ab      	ldrh	r3, [r5, #12]
 8005a46:	065b      	lsls	r3, r3, #25
 8005a48:	f53f af2c 	bmi.w	80058a4 <_svfiprintf_r+0x28>
 8005a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a4e:	b01d      	add	sp, #116	; 0x74
 8005a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a54:	ab03      	add	r3, sp, #12
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	462a      	mov	r2, r5
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <_svfiprintf_r+0x1f8>)
 8005a5e:	a904      	add	r1, sp, #16
 8005a60:	f7fe fb20 	bl	80040a4 <_printf_i>
 8005a64:	e7eb      	b.n	8005a3e <_svfiprintf_r+0x1c2>
 8005a66:	bf00      	nop
 8005a68:	08006924 	.word	0x08006924
 8005a6c:	0800692e 	.word	0x0800692e
 8005a70:	08003b6d 	.word	0x08003b6d
 8005a74:	080057c5 	.word	0x080057c5
 8005a78:	0800692a 	.word	0x0800692a

08005a7c <__assert_func>:
 8005a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a7e:	4614      	mov	r4, r2
 8005a80:	461a      	mov	r2, r3
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <__assert_func+0x2c>)
 8005a84:	4605      	mov	r5, r0
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68d8      	ldr	r0, [r3, #12]
 8005a8a:	b14c      	cbz	r4, 8005aa0 <__assert_func+0x24>
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <__assert_func+0x30>)
 8005a8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a92:	9100      	str	r1, [sp, #0]
 8005a94:	462b      	mov	r3, r5
 8005a96:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <__assert_func+0x34>)
 8005a98:	f000 f80e 	bl	8005ab8 <fiprintf>
 8005a9c:	f000 fa98 	bl	8005fd0 <abort>
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <__assert_func+0x38>)
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	e7f3      	b.n	8005a8e <__assert_func+0x12>
 8005aa6:	bf00      	nop
 8005aa8:	20000010 	.word	0x20000010
 8005aac:	08006935 	.word	0x08006935
 8005ab0:	08006942 	.word	0x08006942
 8005ab4:	08006970 	.word	0x08006970

08005ab8 <fiprintf>:
 8005ab8:	b40e      	push	{r1, r2, r3}
 8005aba:	b503      	push	{r0, r1, lr}
 8005abc:	4601      	mov	r1, r0
 8005abe:	ab03      	add	r3, sp, #12
 8005ac0:	4805      	ldr	r0, [pc, #20]	; (8005ad8 <fiprintf+0x20>)
 8005ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f000 f883 	bl	8005bd4 <_vfiprintf_r>
 8005ace:	b002      	add	sp, #8
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	20000010 	.word	0x20000010

08005adc <__retarget_lock_init_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__retarget_lock_acquire_recursive>:
 8005ade:	4770      	bx	lr

08005ae0 <__retarget_lock_release_recursive>:
 8005ae0:	4770      	bx	lr

08005ae2 <__ascii_mbtowc>:
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	b901      	cbnz	r1, 8005ae8 <__ascii_mbtowc+0x6>
 8005ae6:	a901      	add	r1, sp, #4
 8005ae8:	b142      	cbz	r2, 8005afc <__ascii_mbtowc+0x1a>
 8005aea:	b14b      	cbz	r3, 8005b00 <__ascii_mbtowc+0x1e>
 8005aec:	7813      	ldrb	r3, [r2, #0]
 8005aee:	600b      	str	r3, [r1, #0]
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	1e10      	subs	r0, r2, #0
 8005af4:	bf18      	it	ne
 8005af6:	2001      	movne	r0, #1
 8005af8:	b002      	add	sp, #8
 8005afa:	4770      	bx	lr
 8005afc:	4610      	mov	r0, r2
 8005afe:	e7fb      	b.n	8005af8 <__ascii_mbtowc+0x16>
 8005b00:	f06f 0001 	mvn.w	r0, #1
 8005b04:	e7f8      	b.n	8005af8 <__ascii_mbtowc+0x16>

08005b06 <memmove>:
 8005b06:	4288      	cmp	r0, r1
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	eb01 0402 	add.w	r4, r1, r2
 8005b0e:	d902      	bls.n	8005b16 <memmove+0x10>
 8005b10:	4284      	cmp	r4, r0
 8005b12:	4623      	mov	r3, r4
 8005b14:	d807      	bhi.n	8005b26 <memmove+0x20>
 8005b16:	1e43      	subs	r3, r0, #1
 8005b18:	42a1      	cmp	r1, r4
 8005b1a:	d008      	beq.n	8005b2e <memmove+0x28>
 8005b1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b24:	e7f8      	b.n	8005b18 <memmove+0x12>
 8005b26:	4601      	mov	r1, r0
 8005b28:	4402      	add	r2, r0
 8005b2a:	428a      	cmp	r2, r1
 8005b2c:	d100      	bne.n	8005b30 <memmove+0x2a>
 8005b2e:	bd10      	pop	{r4, pc}
 8005b30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b38:	e7f7      	b.n	8005b2a <memmove+0x24>

08005b3a <_realloc_r>:
 8005b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	4614      	mov	r4, r2
 8005b40:	460e      	mov	r6, r1
 8005b42:	b921      	cbnz	r1, 8005b4e <_realloc_r+0x14>
 8005b44:	4611      	mov	r1, r2
 8005b46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b4a:	f7fd bf17 	b.w	800397c <_malloc_r>
 8005b4e:	b922      	cbnz	r2, 8005b5a <_realloc_r+0x20>
 8005b50:	f7fd fec8 	bl	80038e4 <_free_r>
 8005b54:	4625      	mov	r5, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b5a:	f000 fc5d 	bl	8006418 <_malloc_usable_size_r>
 8005b5e:	42a0      	cmp	r0, r4
 8005b60:	d20f      	bcs.n	8005b82 <_realloc_r+0x48>
 8005b62:	4621      	mov	r1, r4
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7fd ff09 	bl	800397c <_malloc_r>
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0f2      	beq.n	8005b56 <_realloc_r+0x1c>
 8005b70:	4631      	mov	r1, r6
 8005b72:	4622      	mov	r2, r4
 8005b74:	f7ff fa7c 	bl	8005070 <memcpy>
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f7fd feb2 	bl	80038e4 <_free_r>
 8005b80:	e7e9      	b.n	8005b56 <_realloc_r+0x1c>
 8005b82:	4635      	mov	r5, r6
 8005b84:	e7e7      	b.n	8005b56 <_realloc_r+0x1c>

08005b86 <__sfputc_r>:
 8005b86:	6893      	ldr	r3, [r2, #8]
 8005b88:	b410      	push	{r4}
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	6093      	str	r3, [r2, #8]
 8005b90:	da07      	bge.n	8005ba2 <__sfputc_r+0x1c>
 8005b92:	6994      	ldr	r4, [r2, #24]
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	db01      	blt.n	8005b9c <__sfputc_r+0x16>
 8005b98:	290a      	cmp	r1, #10
 8005b9a:	d102      	bne.n	8005ba2 <__sfputc_r+0x1c>
 8005b9c:	bc10      	pop	{r4}
 8005b9e:	f000 b949 	b.w	8005e34 <__swbuf_r>
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	1c58      	adds	r0, r3, #1
 8005ba6:	6010      	str	r0, [r2, #0]
 8005ba8:	7019      	strb	r1, [r3, #0]
 8005baa:	4608      	mov	r0, r1
 8005bac:	bc10      	pop	{r4}
 8005bae:	4770      	bx	lr

08005bb0 <__sfputs_r>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	460f      	mov	r7, r1
 8005bb6:	4614      	mov	r4, r2
 8005bb8:	18d5      	adds	r5, r2, r3
 8005bba:	42ac      	cmp	r4, r5
 8005bbc:	d101      	bne.n	8005bc2 <__sfputs_r+0x12>
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	e007      	b.n	8005bd2 <__sfputs_r+0x22>
 8005bc2:	463a      	mov	r2, r7
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bca:	f7ff ffdc 	bl	8005b86 <__sfputc_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d1f3      	bne.n	8005bba <__sfputs_r+0xa>
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bd4 <_vfiprintf_r>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	460d      	mov	r5, r1
 8005bda:	4614      	mov	r4, r2
 8005bdc:	4698      	mov	r8, r3
 8005bde:	4606      	mov	r6, r0
 8005be0:	b09d      	sub	sp, #116	; 0x74
 8005be2:	b118      	cbz	r0, 8005bec <_vfiprintf_r+0x18>
 8005be4:	6983      	ldr	r3, [r0, #24]
 8005be6:	b90b      	cbnz	r3, 8005bec <_vfiprintf_r+0x18>
 8005be8:	f000 fb14 	bl	8006214 <__sinit>
 8005bec:	4b89      	ldr	r3, [pc, #548]	; (8005e14 <_vfiprintf_r+0x240>)
 8005bee:	429d      	cmp	r5, r3
 8005bf0:	d11b      	bne.n	8005c2a <_vfiprintf_r+0x56>
 8005bf2:	6875      	ldr	r5, [r6, #4]
 8005bf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf6:	07d9      	lsls	r1, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_vfiprintf_r+0x32>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	059a      	lsls	r2, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_vfiprintf_r+0x32>
 8005c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c02:	f7ff ff6c 	bl	8005ade <__retarget_lock_acquire_recursive>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	071b      	lsls	r3, r3, #28
 8005c0a:	d501      	bpl.n	8005c10 <_vfiprintf_r+0x3c>
 8005c0c:	692b      	ldr	r3, [r5, #16]
 8005c0e:	b9eb      	cbnz	r3, 8005c4c <_vfiprintf_r+0x78>
 8005c10:	4629      	mov	r1, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 f96e 	bl	8005ef4 <__swsetup_r>
 8005c18:	b1c0      	cbz	r0, 8005c4c <_vfiprintf_r+0x78>
 8005c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c1c:	07dc      	lsls	r4, r3, #31
 8005c1e:	d50e      	bpl.n	8005c3e <_vfiprintf_r+0x6a>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	b01d      	add	sp, #116	; 0x74
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	4b7b      	ldr	r3, [pc, #492]	; (8005e18 <_vfiprintf_r+0x244>)
 8005c2c:	429d      	cmp	r5, r3
 8005c2e:	d101      	bne.n	8005c34 <_vfiprintf_r+0x60>
 8005c30:	68b5      	ldr	r5, [r6, #8]
 8005c32:	e7df      	b.n	8005bf4 <_vfiprintf_r+0x20>
 8005c34:	4b79      	ldr	r3, [pc, #484]	; (8005e1c <_vfiprintf_r+0x248>)
 8005c36:	429d      	cmp	r5, r3
 8005c38:	bf08      	it	eq
 8005c3a:	68f5      	ldreq	r5, [r6, #12]
 8005c3c:	e7da      	b.n	8005bf4 <_vfiprintf_r+0x20>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	0598      	lsls	r0, r3, #22
 8005c42:	d4ed      	bmi.n	8005c20 <_vfiprintf_r+0x4c>
 8005c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c46:	f7ff ff4b 	bl	8005ae0 <__retarget_lock_release_recursive>
 8005c4a:	e7e9      	b.n	8005c20 <_vfiprintf_r+0x4c>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c50:	2320      	movs	r3, #32
 8005c52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c56:	2330      	movs	r3, #48	; 0x30
 8005c58:	f04f 0901 	mov.w	r9, #1
 8005c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e20 <_vfiprintf_r+0x24c>
 8005c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c68:	4623      	mov	r3, r4
 8005c6a:	469a      	mov	sl, r3
 8005c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c70:	b10a      	cbz	r2, 8005c76 <_vfiprintf_r+0xa2>
 8005c72:	2a25      	cmp	r2, #37	; 0x25
 8005c74:	d1f9      	bne.n	8005c6a <_vfiprintf_r+0x96>
 8005c76:	ebba 0b04 	subs.w	fp, sl, r4
 8005c7a:	d00b      	beq.n	8005c94 <_vfiprintf_r+0xc0>
 8005c7c:	465b      	mov	r3, fp
 8005c7e:	4622      	mov	r2, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7ff ff94 	bl	8005bb0 <__sfputs_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f000 80aa 	beq.w	8005de2 <_vfiprintf_r+0x20e>
 8005c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c90:	445a      	add	r2, fp
 8005c92:	9209      	str	r2, [sp, #36]	; 0x24
 8005c94:	f89a 3000 	ldrb.w	r3, [sl]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80a2 	beq.w	8005de2 <_vfiprintf_r+0x20e>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca8:	f10a 0a01 	add.w	sl, sl, #1
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	9307      	str	r3, [sp, #28]
 8005cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8005cb6:	4654      	mov	r4, sl
 8005cb8:	2205      	movs	r2, #5
 8005cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbe:	4858      	ldr	r0, [pc, #352]	; (8005e20 <_vfiprintf_r+0x24c>)
 8005cc0:	f7ff f9c8 	bl	8005054 <memchr>
 8005cc4:	9a04      	ldr	r2, [sp, #16]
 8005cc6:	b9d8      	cbnz	r0, 8005d00 <_vfiprintf_r+0x12c>
 8005cc8:	06d1      	lsls	r1, r2, #27
 8005cca:	bf44      	itt	mi
 8005ccc:	2320      	movmi	r3, #32
 8005cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd2:	0713      	lsls	r3, r2, #28
 8005cd4:	bf44      	itt	mi
 8005cd6:	232b      	movmi	r3, #43	; 0x2b
 8005cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce2:	d015      	beq.n	8005d10 <_vfiprintf_r+0x13c>
 8005ce4:	4654      	mov	r4, sl
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	f04f 0c0a 	mov.w	ip, #10
 8005cec:	9a07      	ldr	r2, [sp, #28]
 8005cee:	4621      	mov	r1, r4
 8005cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cf4:	3b30      	subs	r3, #48	; 0x30
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	d94e      	bls.n	8005d98 <_vfiprintf_r+0x1c4>
 8005cfa:	b1b0      	cbz	r0, 8005d2a <_vfiprintf_r+0x156>
 8005cfc:	9207      	str	r2, [sp, #28]
 8005cfe:	e014      	b.n	8005d2a <_vfiprintf_r+0x156>
 8005d00:	eba0 0308 	sub.w	r3, r0, r8
 8005d04:	fa09 f303 	lsl.w	r3, r9, r3
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	46a2      	mov	sl, r4
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	e7d2      	b.n	8005cb6 <_vfiprintf_r+0xe2>
 8005d10:	9b03      	ldr	r3, [sp, #12]
 8005d12:	1d19      	adds	r1, r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	9103      	str	r1, [sp, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bfbb      	ittet	lt
 8005d1c:	425b      	neglt	r3, r3
 8005d1e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d22:	9307      	strge	r3, [sp, #28]
 8005d24:	9307      	strlt	r3, [sp, #28]
 8005d26:	bfb8      	it	lt
 8005d28:	9204      	strlt	r2, [sp, #16]
 8005d2a:	7823      	ldrb	r3, [r4, #0]
 8005d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d2e:	d10c      	bne.n	8005d4a <_vfiprintf_r+0x176>
 8005d30:	7863      	ldrb	r3, [r4, #1]
 8005d32:	2b2a      	cmp	r3, #42	; 0x2a
 8005d34:	d135      	bne.n	8005da2 <_vfiprintf_r+0x1ce>
 8005d36:	9b03      	ldr	r3, [sp, #12]
 8005d38:	3402      	adds	r4, #2
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	9203      	str	r2, [sp, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bfb8      	it	lt
 8005d44:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d48:	9305      	str	r3, [sp, #20]
 8005d4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e30 <_vfiprintf_r+0x25c>
 8005d4e:	2203      	movs	r2, #3
 8005d50:	4650      	mov	r0, sl
 8005d52:	7821      	ldrb	r1, [r4, #0]
 8005d54:	f7ff f97e 	bl	8005054 <memchr>
 8005d58:	b140      	cbz	r0, 8005d6c <_vfiprintf_r+0x198>
 8005d5a:	2340      	movs	r3, #64	; 0x40
 8005d5c:	eba0 000a 	sub.w	r0, r0, sl
 8005d60:	fa03 f000 	lsl.w	r0, r3, r0
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	3401      	adds	r4, #1
 8005d68:	4303      	orrs	r3, r0
 8005d6a:	9304      	str	r3, [sp, #16]
 8005d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d70:	2206      	movs	r2, #6
 8005d72:	482c      	ldr	r0, [pc, #176]	; (8005e24 <_vfiprintf_r+0x250>)
 8005d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d78:	f7ff f96c 	bl	8005054 <memchr>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d03f      	beq.n	8005e00 <_vfiprintf_r+0x22c>
 8005d80:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <_vfiprintf_r+0x254>)
 8005d82:	bb1b      	cbnz	r3, 8005dcc <_vfiprintf_r+0x1f8>
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	3307      	adds	r3, #7
 8005d88:	f023 0307 	bic.w	r3, r3, #7
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	9303      	str	r3, [sp, #12]
 8005d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d92:	443b      	add	r3, r7
 8005d94:	9309      	str	r3, [sp, #36]	; 0x24
 8005d96:	e767      	b.n	8005c68 <_vfiprintf_r+0x94>
 8005d98:	460c      	mov	r4, r1
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da0:	e7a5      	b.n	8005cee <_vfiprintf_r+0x11a>
 8005da2:	2300      	movs	r3, #0
 8005da4:	f04f 0c0a 	mov.w	ip, #10
 8005da8:	4619      	mov	r1, r3
 8005daa:	3401      	adds	r4, #1
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005db4:	3a30      	subs	r2, #48	; 0x30
 8005db6:	2a09      	cmp	r2, #9
 8005db8:	d903      	bls.n	8005dc2 <_vfiprintf_r+0x1ee>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0c5      	beq.n	8005d4a <_vfiprintf_r+0x176>
 8005dbe:	9105      	str	r1, [sp, #20]
 8005dc0:	e7c3      	b.n	8005d4a <_vfiprintf_r+0x176>
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dca:	e7f0      	b.n	8005dae <_vfiprintf_r+0x1da>
 8005dcc:	ab03      	add	r3, sp, #12
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <_vfiprintf_r+0x258>)
 8005dd6:	a904      	add	r1, sp, #16
 8005dd8:	f7fd fec8 	bl	8003b6c <_printf_float>
 8005ddc:	4607      	mov	r7, r0
 8005dde:	1c78      	adds	r0, r7, #1
 8005de0:	d1d6      	bne.n	8005d90 <_vfiprintf_r+0x1bc>
 8005de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005de4:	07d9      	lsls	r1, r3, #31
 8005de6:	d405      	bmi.n	8005df4 <_vfiprintf_r+0x220>
 8005de8:	89ab      	ldrh	r3, [r5, #12]
 8005dea:	059a      	lsls	r2, r3, #22
 8005dec:	d402      	bmi.n	8005df4 <_vfiprintf_r+0x220>
 8005dee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005df0:	f7ff fe76 	bl	8005ae0 <__retarget_lock_release_recursive>
 8005df4:	89ab      	ldrh	r3, [r5, #12]
 8005df6:	065b      	lsls	r3, r3, #25
 8005df8:	f53f af12 	bmi.w	8005c20 <_vfiprintf_r+0x4c>
 8005dfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dfe:	e711      	b.n	8005c24 <_vfiprintf_r+0x50>
 8005e00:	ab03      	add	r3, sp, #12
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4630      	mov	r0, r6
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <_vfiprintf_r+0x258>)
 8005e0a:	a904      	add	r1, sp, #16
 8005e0c:	f7fe f94a 	bl	80040a4 <_printf_i>
 8005e10:	e7e4      	b.n	8005ddc <_vfiprintf_r+0x208>
 8005e12:	bf00      	nop
 8005e14:	08006a9c 	.word	0x08006a9c
 8005e18:	08006abc 	.word	0x08006abc
 8005e1c:	08006a7c 	.word	0x08006a7c
 8005e20:	08006924 	.word	0x08006924
 8005e24:	0800692e 	.word	0x0800692e
 8005e28:	08003b6d 	.word	0x08003b6d
 8005e2c:	08005bb1 	.word	0x08005bb1
 8005e30:	0800692a 	.word	0x0800692a

08005e34 <__swbuf_r>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	460e      	mov	r6, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	b118      	cbz	r0, 8005e46 <__swbuf_r+0x12>
 8005e3e:	6983      	ldr	r3, [r0, #24]
 8005e40:	b90b      	cbnz	r3, 8005e46 <__swbuf_r+0x12>
 8005e42:	f000 f9e7 	bl	8006214 <__sinit>
 8005e46:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <__swbuf_r+0x98>)
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d12b      	bne.n	8005ea4 <__swbuf_r+0x70>
 8005e4c:	686c      	ldr	r4, [r5, #4]
 8005e4e:	69a3      	ldr	r3, [r4, #24]
 8005e50:	60a3      	str	r3, [r4, #8]
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	071a      	lsls	r2, r3, #28
 8005e56:	d52f      	bpl.n	8005eb8 <__swbuf_r+0x84>
 8005e58:	6923      	ldr	r3, [r4, #16]
 8005e5a:	b36b      	cbz	r3, 8005eb8 <__swbuf_r+0x84>
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	b2f6      	uxtb	r6, r6
 8005e62:	1ac0      	subs	r0, r0, r3
 8005e64:	6963      	ldr	r3, [r4, #20]
 8005e66:	4637      	mov	r7, r6
 8005e68:	4283      	cmp	r3, r0
 8005e6a:	dc04      	bgt.n	8005e76 <__swbuf_r+0x42>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f93c 	bl	80060ec <_fflush_r>
 8005e74:	bb30      	cbnz	r0, 8005ec4 <__swbuf_r+0x90>
 8005e76:	68a3      	ldr	r3, [r4, #8]
 8005e78:	3001      	adds	r0, #1
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	6022      	str	r2, [r4, #0]
 8005e84:	701e      	strb	r6, [r3, #0]
 8005e86:	6963      	ldr	r3, [r4, #20]
 8005e88:	4283      	cmp	r3, r0
 8005e8a:	d004      	beq.n	8005e96 <__swbuf_r+0x62>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d506      	bpl.n	8005ea0 <__swbuf_r+0x6c>
 8005e92:	2e0a      	cmp	r6, #10
 8005e94:	d104      	bne.n	8005ea0 <__swbuf_r+0x6c>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f000 f927 	bl	80060ec <_fflush_r>
 8005e9e:	b988      	cbnz	r0, 8005ec4 <__swbuf_r+0x90>
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <__swbuf_r+0x9c>)
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	d101      	bne.n	8005eae <__swbuf_r+0x7a>
 8005eaa:	68ac      	ldr	r4, [r5, #8]
 8005eac:	e7cf      	b.n	8005e4e <__swbuf_r+0x1a>
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <__swbuf_r+0xa0>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	bf08      	it	eq
 8005eb4:	68ec      	ldreq	r4, [r5, #12]
 8005eb6:	e7ca      	b.n	8005e4e <__swbuf_r+0x1a>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f81a 	bl	8005ef4 <__swsetup_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d0cb      	beq.n	8005e5c <__swbuf_r+0x28>
 8005ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ec8:	e7ea      	b.n	8005ea0 <__swbuf_r+0x6c>
 8005eca:	bf00      	nop
 8005ecc:	08006a9c 	.word	0x08006a9c
 8005ed0:	08006abc 	.word	0x08006abc
 8005ed4:	08006a7c 	.word	0x08006a7c

08005ed8 <__ascii_wctomb>:
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4608      	mov	r0, r1
 8005edc:	b141      	cbz	r1, 8005ef0 <__ascii_wctomb+0x18>
 8005ede:	2aff      	cmp	r2, #255	; 0xff
 8005ee0:	d904      	bls.n	8005eec <__ascii_wctomb+0x14>
 8005ee2:	228a      	movs	r2, #138	; 0x8a
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	4770      	bx	lr
 8005eec:	2001      	movs	r0, #1
 8005eee:	700a      	strb	r2, [r1, #0]
 8005ef0:	4770      	bx	lr
	...

08005ef4 <__swsetup_r>:
 8005ef4:	4b32      	ldr	r3, [pc, #200]	; (8005fc0 <__swsetup_r+0xcc>)
 8005ef6:	b570      	push	{r4, r5, r6, lr}
 8005ef8:	681d      	ldr	r5, [r3, #0]
 8005efa:	4606      	mov	r6, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	b125      	cbz	r5, 8005f0a <__swsetup_r+0x16>
 8005f00:	69ab      	ldr	r3, [r5, #24]
 8005f02:	b913      	cbnz	r3, 8005f0a <__swsetup_r+0x16>
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f985 	bl	8006214 <__sinit>
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <__swsetup_r+0xd0>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d10f      	bne.n	8005f30 <__swsetup_r+0x3c>
 8005f10:	686c      	ldr	r4, [r5, #4]
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f18:	0719      	lsls	r1, r3, #28
 8005f1a:	d42c      	bmi.n	8005f76 <__swsetup_r+0x82>
 8005f1c:	06dd      	lsls	r5, r3, #27
 8005f1e:	d411      	bmi.n	8005f44 <__swsetup_r+0x50>
 8005f20:	2309      	movs	r3, #9
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	e03e      	b.n	8005fae <__swsetup_r+0xba>
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <__swsetup_r+0xd4>)
 8005f32:	429c      	cmp	r4, r3
 8005f34:	d101      	bne.n	8005f3a <__swsetup_r+0x46>
 8005f36:	68ac      	ldr	r4, [r5, #8]
 8005f38:	e7eb      	b.n	8005f12 <__swsetup_r+0x1e>
 8005f3a:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <__swsetup_r+0xd8>)
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	bf08      	it	eq
 8005f40:	68ec      	ldreq	r4, [r5, #12]
 8005f42:	e7e6      	b.n	8005f12 <__swsetup_r+0x1e>
 8005f44:	0758      	lsls	r0, r3, #29
 8005f46:	d512      	bpl.n	8005f6e <__swsetup_r+0x7a>
 8005f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f4a:	b141      	cbz	r1, 8005f5e <__swsetup_r+0x6a>
 8005f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f50:	4299      	cmp	r1, r3
 8005f52:	d002      	beq.n	8005f5a <__swsetup_r+0x66>
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7fd fcc5 	bl	80038e4 <_free_r>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	2300      	movs	r3, #0
 8005f68:	6063      	str	r3, [r4, #4]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f043 0308 	orr.w	r3, r3, #8
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	b94b      	cbnz	r3, 8005f8e <__swsetup_r+0x9a>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f84:	d003      	beq.n	8005f8e <__swsetup_r+0x9a>
 8005f86:	4621      	mov	r1, r4
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 fa05 	bl	8006398 <__smakebuf_r>
 8005f8e:	89a0      	ldrh	r0, [r4, #12]
 8005f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f94:	f010 0301 	ands.w	r3, r0, #1
 8005f98:	d00a      	beq.n	8005fb0 <__swsetup_r+0xbc>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60a3      	str	r3, [r4, #8]
 8005f9e:	6963      	ldr	r3, [r4, #20]
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	61a3      	str	r3, [r4, #24]
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	b943      	cbnz	r3, 8005fba <__swsetup_r+0xc6>
 8005fa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fac:	d1ba      	bne.n	8005f24 <__swsetup_r+0x30>
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	0781      	lsls	r1, r0, #30
 8005fb2:	bf58      	it	pl
 8005fb4:	6963      	ldrpl	r3, [r4, #20]
 8005fb6:	60a3      	str	r3, [r4, #8]
 8005fb8:	e7f4      	b.n	8005fa4 <__swsetup_r+0xb0>
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e7f7      	b.n	8005fae <__swsetup_r+0xba>
 8005fbe:	bf00      	nop
 8005fc0:	20000010 	.word	0x20000010
 8005fc4:	08006a9c 	.word	0x08006a9c
 8005fc8:	08006abc 	.word	0x08006abc
 8005fcc:	08006a7c 	.word	0x08006a7c

08005fd0 <abort>:
 8005fd0:	2006      	movs	r0, #6
 8005fd2:	b508      	push	{r3, lr}
 8005fd4:	f000 fa50 	bl	8006478 <raise>
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f7fb fb7a 	bl	80016d2 <_exit>
	...

08005fe0 <__sflush_r>:
 8005fe0:	898a      	ldrh	r2, [r1, #12]
 8005fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	0710      	lsls	r0, r2, #28
 8005fea:	460c      	mov	r4, r1
 8005fec:	d458      	bmi.n	80060a0 <__sflush_r+0xc0>
 8005fee:	684b      	ldr	r3, [r1, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dc05      	bgt.n	8006000 <__sflush_r+0x20>
 8005ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dc02      	bgt.n	8006000 <__sflush_r+0x20>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006002:	2e00      	cmp	r6, #0
 8006004:	d0f9      	beq.n	8005ffa <__sflush_r+0x1a>
 8006006:	2300      	movs	r3, #0
 8006008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800600c:	682f      	ldr	r7, [r5, #0]
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	d032      	beq.n	8006078 <__sflush_r+0x98>
 8006012:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	075a      	lsls	r2, r3, #29
 8006018:	d505      	bpl.n	8006026 <__sflush_r+0x46>
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	1ac0      	subs	r0, r0, r3
 800601e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006020:	b10b      	cbz	r3, 8006026 <__sflush_r+0x46>
 8006022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006024:	1ac0      	subs	r0, r0, r3
 8006026:	2300      	movs	r3, #0
 8006028:	4602      	mov	r2, r0
 800602a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800602c:	4628      	mov	r0, r5
 800602e:	6a21      	ldr	r1, [r4, #32]
 8006030:	47b0      	blx	r6
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	d106      	bne.n	8006046 <__sflush_r+0x66>
 8006038:	6829      	ldr	r1, [r5, #0]
 800603a:	291d      	cmp	r1, #29
 800603c:	d82c      	bhi.n	8006098 <__sflush_r+0xb8>
 800603e:	4a2a      	ldr	r2, [pc, #168]	; (80060e8 <__sflush_r+0x108>)
 8006040:	40ca      	lsrs	r2, r1
 8006042:	07d6      	lsls	r6, r2, #31
 8006044:	d528      	bpl.n	8006098 <__sflush_r+0xb8>
 8006046:	2200      	movs	r2, #0
 8006048:	6062      	str	r2, [r4, #4]
 800604a:	6922      	ldr	r2, [r4, #16]
 800604c:	04d9      	lsls	r1, r3, #19
 800604e:	6022      	str	r2, [r4, #0]
 8006050:	d504      	bpl.n	800605c <__sflush_r+0x7c>
 8006052:	1c42      	adds	r2, r0, #1
 8006054:	d101      	bne.n	800605a <__sflush_r+0x7a>
 8006056:	682b      	ldr	r3, [r5, #0]
 8006058:	b903      	cbnz	r3, 800605c <__sflush_r+0x7c>
 800605a:	6560      	str	r0, [r4, #84]	; 0x54
 800605c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800605e:	602f      	str	r7, [r5, #0]
 8006060:	2900      	cmp	r1, #0
 8006062:	d0ca      	beq.n	8005ffa <__sflush_r+0x1a>
 8006064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006068:	4299      	cmp	r1, r3
 800606a:	d002      	beq.n	8006072 <__sflush_r+0x92>
 800606c:	4628      	mov	r0, r5
 800606e:	f7fd fc39 	bl	80038e4 <_free_r>
 8006072:	2000      	movs	r0, #0
 8006074:	6360      	str	r0, [r4, #52]	; 0x34
 8006076:	e7c1      	b.n	8005ffc <__sflush_r+0x1c>
 8006078:	6a21      	ldr	r1, [r4, #32]
 800607a:	2301      	movs	r3, #1
 800607c:	4628      	mov	r0, r5
 800607e:	47b0      	blx	r6
 8006080:	1c41      	adds	r1, r0, #1
 8006082:	d1c7      	bne.n	8006014 <__sflush_r+0x34>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0c4      	beq.n	8006014 <__sflush_r+0x34>
 800608a:	2b1d      	cmp	r3, #29
 800608c:	d001      	beq.n	8006092 <__sflush_r+0xb2>
 800608e:	2b16      	cmp	r3, #22
 8006090:	d101      	bne.n	8006096 <__sflush_r+0xb6>
 8006092:	602f      	str	r7, [r5, #0]
 8006094:	e7b1      	b.n	8005ffa <__sflush_r+0x1a>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	e7ad      	b.n	8005ffc <__sflush_r+0x1c>
 80060a0:	690f      	ldr	r7, [r1, #16]
 80060a2:	2f00      	cmp	r7, #0
 80060a4:	d0a9      	beq.n	8005ffa <__sflush_r+0x1a>
 80060a6:	0793      	lsls	r3, r2, #30
 80060a8:	bf18      	it	ne
 80060aa:	2300      	movne	r3, #0
 80060ac:	680e      	ldr	r6, [r1, #0]
 80060ae:	bf08      	it	eq
 80060b0:	694b      	ldreq	r3, [r1, #20]
 80060b2:	eba6 0807 	sub.w	r8, r6, r7
 80060b6:	600f      	str	r7, [r1, #0]
 80060b8:	608b      	str	r3, [r1, #8]
 80060ba:	f1b8 0f00 	cmp.w	r8, #0
 80060be:	dd9c      	ble.n	8005ffa <__sflush_r+0x1a>
 80060c0:	4643      	mov	r3, r8
 80060c2:	463a      	mov	r2, r7
 80060c4:	4628      	mov	r0, r5
 80060c6:	6a21      	ldr	r1, [r4, #32]
 80060c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060ca:	47b0      	blx	r6
 80060cc:	2800      	cmp	r0, #0
 80060ce:	dc06      	bgt.n	80060de <__sflush_r+0xfe>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060da:	81a3      	strh	r3, [r4, #12]
 80060dc:	e78e      	b.n	8005ffc <__sflush_r+0x1c>
 80060de:	4407      	add	r7, r0
 80060e0:	eba8 0800 	sub.w	r8, r8, r0
 80060e4:	e7e9      	b.n	80060ba <__sflush_r+0xda>
 80060e6:	bf00      	nop
 80060e8:	20400001 	.word	0x20400001

080060ec <_fflush_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	690b      	ldr	r3, [r1, #16]
 80060f0:	4605      	mov	r5, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	b913      	cbnz	r3, 80060fc <_fflush_r+0x10>
 80060f6:	2500      	movs	r5, #0
 80060f8:	4628      	mov	r0, r5
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	b118      	cbz	r0, 8006106 <_fflush_r+0x1a>
 80060fe:	6983      	ldr	r3, [r0, #24]
 8006100:	b90b      	cbnz	r3, 8006106 <_fflush_r+0x1a>
 8006102:	f000 f887 	bl	8006214 <__sinit>
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <_fflush_r+0x6c>)
 8006108:	429c      	cmp	r4, r3
 800610a:	d11b      	bne.n	8006144 <_fflush_r+0x58>
 800610c:	686c      	ldr	r4, [r5, #4]
 800610e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ef      	beq.n	80060f6 <_fflush_r+0xa>
 8006116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006118:	07d0      	lsls	r0, r2, #31
 800611a:	d404      	bmi.n	8006126 <_fflush_r+0x3a>
 800611c:	0599      	lsls	r1, r3, #22
 800611e:	d402      	bmi.n	8006126 <_fflush_r+0x3a>
 8006120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006122:	f7ff fcdc 	bl	8005ade <__retarget_lock_acquire_recursive>
 8006126:	4628      	mov	r0, r5
 8006128:	4621      	mov	r1, r4
 800612a:	f7ff ff59 	bl	8005fe0 <__sflush_r>
 800612e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006130:	4605      	mov	r5, r0
 8006132:	07da      	lsls	r2, r3, #31
 8006134:	d4e0      	bmi.n	80060f8 <_fflush_r+0xc>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	059b      	lsls	r3, r3, #22
 800613a:	d4dd      	bmi.n	80060f8 <_fflush_r+0xc>
 800613c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613e:	f7ff fccf 	bl	8005ae0 <__retarget_lock_release_recursive>
 8006142:	e7d9      	b.n	80060f8 <_fflush_r+0xc>
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <_fflush_r+0x70>)
 8006146:	429c      	cmp	r4, r3
 8006148:	d101      	bne.n	800614e <_fflush_r+0x62>
 800614a:	68ac      	ldr	r4, [r5, #8]
 800614c:	e7df      	b.n	800610e <_fflush_r+0x22>
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <_fflush_r+0x74>)
 8006150:	429c      	cmp	r4, r3
 8006152:	bf08      	it	eq
 8006154:	68ec      	ldreq	r4, [r5, #12]
 8006156:	e7da      	b.n	800610e <_fflush_r+0x22>
 8006158:	08006a9c 	.word	0x08006a9c
 800615c:	08006abc 	.word	0x08006abc
 8006160:	08006a7c 	.word	0x08006a7c

08006164 <std>:
 8006164:	2300      	movs	r3, #0
 8006166:	b510      	push	{r4, lr}
 8006168:	4604      	mov	r4, r0
 800616a:	e9c0 3300 	strd	r3, r3, [r0]
 800616e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006172:	6083      	str	r3, [r0, #8]
 8006174:	8181      	strh	r1, [r0, #12]
 8006176:	6643      	str	r3, [r0, #100]	; 0x64
 8006178:	81c2      	strh	r2, [r0, #14]
 800617a:	6183      	str	r3, [r0, #24]
 800617c:	4619      	mov	r1, r3
 800617e:	2208      	movs	r2, #8
 8006180:	305c      	adds	r0, #92	; 0x5c
 8006182:	f7fd fba7 	bl	80038d4 <memset>
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <std+0x38>)
 8006188:	6224      	str	r4, [r4, #32]
 800618a:	6263      	str	r3, [r4, #36]	; 0x24
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <std+0x3c>)
 800618e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006190:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <std+0x40>)
 8006192:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <std+0x44>)
 8006196:	6323      	str	r3, [r4, #48]	; 0x30
 8006198:	bd10      	pop	{r4, pc}
 800619a:	bf00      	nop
 800619c:	080064b1 	.word	0x080064b1
 80061a0:	080064d3 	.word	0x080064d3
 80061a4:	0800650b 	.word	0x0800650b
 80061a8:	0800652f 	.word	0x0800652f

080061ac <_cleanup_r>:
 80061ac:	4901      	ldr	r1, [pc, #4]	; (80061b4 <_cleanup_r+0x8>)
 80061ae:	f000 b8af 	b.w	8006310 <_fwalk_reent>
 80061b2:	bf00      	nop
 80061b4:	080060ed 	.word	0x080060ed

080061b8 <__sfmoreglue>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	2568      	movs	r5, #104	; 0x68
 80061bc:	1e4a      	subs	r2, r1, #1
 80061be:	4355      	muls	r5, r2
 80061c0:	460e      	mov	r6, r1
 80061c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061c6:	f7fd fbd9 	bl	800397c <_malloc_r>
 80061ca:	4604      	mov	r4, r0
 80061cc:	b140      	cbz	r0, 80061e0 <__sfmoreglue+0x28>
 80061ce:	2100      	movs	r1, #0
 80061d0:	e9c0 1600 	strd	r1, r6, [r0]
 80061d4:	300c      	adds	r0, #12
 80061d6:	60a0      	str	r0, [r4, #8]
 80061d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061dc:	f7fd fb7a 	bl	80038d4 <memset>
 80061e0:	4620      	mov	r0, r4
 80061e2:	bd70      	pop	{r4, r5, r6, pc}

080061e4 <__sfp_lock_acquire>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__sfp_lock_acquire+0x8>)
 80061e6:	f7ff bc7a 	b.w	8005ade <__retarget_lock_acquire_recursive>
 80061ea:	bf00      	nop
 80061ec:	20000320 	.word	0x20000320

080061f0 <__sfp_lock_release>:
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <__sfp_lock_release+0x8>)
 80061f2:	f7ff bc75 	b.w	8005ae0 <__retarget_lock_release_recursive>
 80061f6:	bf00      	nop
 80061f8:	20000320 	.word	0x20000320

080061fc <__sinit_lock_acquire>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__sinit_lock_acquire+0x8>)
 80061fe:	f7ff bc6e 	b.w	8005ade <__retarget_lock_acquire_recursive>
 8006202:	bf00      	nop
 8006204:	2000031b 	.word	0x2000031b

08006208 <__sinit_lock_release>:
 8006208:	4801      	ldr	r0, [pc, #4]	; (8006210 <__sinit_lock_release+0x8>)
 800620a:	f7ff bc69 	b.w	8005ae0 <__retarget_lock_release_recursive>
 800620e:	bf00      	nop
 8006210:	2000031b 	.word	0x2000031b

08006214 <__sinit>:
 8006214:	b510      	push	{r4, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	f7ff fff0 	bl	80061fc <__sinit_lock_acquire>
 800621c:	69a3      	ldr	r3, [r4, #24]
 800621e:	b11b      	cbz	r3, 8006228 <__sinit+0x14>
 8006220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006224:	f7ff bff0 	b.w	8006208 <__sinit_lock_release>
 8006228:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800622c:	6523      	str	r3, [r4, #80]	; 0x50
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <__sinit+0x68>)
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <__sinit+0x6c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	62a2      	str	r2, [r4, #40]	; 0x28
 8006236:	42a3      	cmp	r3, r4
 8006238:	bf08      	it	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	4620      	mov	r0, r4
 800623e:	bf08      	it	eq
 8006240:	61a3      	streq	r3, [r4, #24]
 8006242:	f000 f81f 	bl	8006284 <__sfp>
 8006246:	6060      	str	r0, [r4, #4]
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f81b 	bl	8006284 <__sfp>
 800624e:	60a0      	str	r0, [r4, #8]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f817 	bl	8006284 <__sfp>
 8006256:	2200      	movs	r2, #0
 8006258:	2104      	movs	r1, #4
 800625a:	60e0      	str	r0, [r4, #12]
 800625c:	6860      	ldr	r0, [r4, #4]
 800625e:	f7ff ff81 	bl	8006164 <std>
 8006262:	2201      	movs	r2, #1
 8006264:	2109      	movs	r1, #9
 8006266:	68a0      	ldr	r0, [r4, #8]
 8006268:	f7ff ff7c 	bl	8006164 <std>
 800626c:	2202      	movs	r2, #2
 800626e:	2112      	movs	r1, #18
 8006270:	68e0      	ldr	r0, [r4, #12]
 8006272:	f7ff ff77 	bl	8006164 <std>
 8006276:	2301      	movs	r3, #1
 8006278:	61a3      	str	r3, [r4, #24]
 800627a:	e7d1      	b.n	8006220 <__sinit+0xc>
 800627c:	080066f8 	.word	0x080066f8
 8006280:	080061ad 	.word	0x080061ad

08006284 <__sfp>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	4607      	mov	r7, r0
 8006288:	f7ff ffac 	bl	80061e4 <__sfp_lock_acquire>
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <__sfp+0x84>)
 800628e:	681e      	ldr	r6, [r3, #0]
 8006290:	69b3      	ldr	r3, [r6, #24]
 8006292:	b913      	cbnz	r3, 800629a <__sfp+0x16>
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff ffbd 	bl	8006214 <__sinit>
 800629a:	3648      	adds	r6, #72	; 0x48
 800629c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	d503      	bpl.n	80062ac <__sfp+0x28>
 80062a4:	6833      	ldr	r3, [r6, #0]
 80062a6:	b30b      	cbz	r3, 80062ec <__sfp+0x68>
 80062a8:	6836      	ldr	r6, [r6, #0]
 80062aa:	e7f7      	b.n	800629c <__sfp+0x18>
 80062ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062b0:	b9d5      	cbnz	r5, 80062e8 <__sfp+0x64>
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <__sfp+0x88>)
 80062b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062b8:	60e3      	str	r3, [r4, #12]
 80062ba:	6665      	str	r5, [r4, #100]	; 0x64
 80062bc:	f7ff fc0e 	bl	8005adc <__retarget_lock_init_recursive>
 80062c0:	f7ff ff96 	bl	80061f0 <__sfp_lock_release>
 80062c4:	2208      	movs	r2, #8
 80062c6:	4629      	mov	r1, r5
 80062c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062d0:	6025      	str	r5, [r4, #0]
 80062d2:	61a5      	str	r5, [r4, #24]
 80062d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062d8:	f7fd fafc 	bl	80038d4 <memset>
 80062dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062e4:	4620      	mov	r0, r4
 80062e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e8:	3468      	adds	r4, #104	; 0x68
 80062ea:	e7d9      	b.n	80062a0 <__sfp+0x1c>
 80062ec:	2104      	movs	r1, #4
 80062ee:	4638      	mov	r0, r7
 80062f0:	f7ff ff62 	bl	80061b8 <__sfmoreglue>
 80062f4:	4604      	mov	r4, r0
 80062f6:	6030      	str	r0, [r6, #0]
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d1d5      	bne.n	80062a8 <__sfp+0x24>
 80062fc:	f7ff ff78 	bl	80061f0 <__sfp_lock_release>
 8006300:	230c      	movs	r3, #12
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	e7ee      	b.n	80062e4 <__sfp+0x60>
 8006306:	bf00      	nop
 8006308:	080066f8 	.word	0x080066f8
 800630c:	ffff0001 	.word	0xffff0001

08006310 <_fwalk_reent>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	4606      	mov	r6, r0
 8006316:	4688      	mov	r8, r1
 8006318:	2700      	movs	r7, #0
 800631a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800631e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006322:	f1b9 0901 	subs.w	r9, r9, #1
 8006326:	d505      	bpl.n	8006334 <_fwalk_reent+0x24>
 8006328:	6824      	ldr	r4, [r4, #0]
 800632a:	2c00      	cmp	r4, #0
 800632c:	d1f7      	bne.n	800631e <_fwalk_reent+0xe>
 800632e:	4638      	mov	r0, r7
 8006330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006334:	89ab      	ldrh	r3, [r5, #12]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d907      	bls.n	800634a <_fwalk_reent+0x3a>
 800633a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800633e:	3301      	adds	r3, #1
 8006340:	d003      	beq.n	800634a <_fwalk_reent+0x3a>
 8006342:	4629      	mov	r1, r5
 8006344:	4630      	mov	r0, r6
 8006346:	47c0      	blx	r8
 8006348:	4307      	orrs	r7, r0
 800634a:	3568      	adds	r5, #104	; 0x68
 800634c:	e7e9      	b.n	8006322 <_fwalk_reent+0x12>

0800634e <__swhatbuf_r>:
 800634e:	b570      	push	{r4, r5, r6, lr}
 8006350:	460e      	mov	r6, r1
 8006352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006356:	4614      	mov	r4, r2
 8006358:	2900      	cmp	r1, #0
 800635a:	461d      	mov	r5, r3
 800635c:	b096      	sub	sp, #88	; 0x58
 800635e:	da07      	bge.n	8006370 <__swhatbuf_r+0x22>
 8006360:	2300      	movs	r3, #0
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	89b3      	ldrh	r3, [r6, #12]
 8006366:	061a      	lsls	r2, r3, #24
 8006368:	d410      	bmi.n	800638c <__swhatbuf_r+0x3e>
 800636a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636e:	e00e      	b.n	800638e <__swhatbuf_r+0x40>
 8006370:	466a      	mov	r2, sp
 8006372:	f000 f903 	bl	800657c <_fstat_r>
 8006376:	2800      	cmp	r0, #0
 8006378:	dbf2      	blt.n	8006360 <__swhatbuf_r+0x12>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006384:	425a      	negs	r2, r3
 8006386:	415a      	adcs	r2, r3
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	e7ee      	b.n	800636a <__swhatbuf_r+0x1c>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	2000      	movs	r0, #0
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	b016      	add	sp, #88	; 0x58
 8006394:	bd70      	pop	{r4, r5, r6, pc}
	...

08006398 <__smakebuf_r>:
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800639c:	079d      	lsls	r5, r3, #30
 800639e:	4606      	mov	r6, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	d507      	bpl.n	80063b4 <__smakebuf_r+0x1c>
 80063a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	2301      	movs	r3, #1
 80063ae:	6163      	str	r3, [r4, #20]
 80063b0:	b002      	add	sp, #8
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	466a      	mov	r2, sp
 80063b6:	ab01      	add	r3, sp, #4
 80063b8:	f7ff ffc9 	bl	800634e <__swhatbuf_r>
 80063bc:	9900      	ldr	r1, [sp, #0]
 80063be:	4605      	mov	r5, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7fd fadb 	bl	800397c <_malloc_r>
 80063c6:	b948      	cbnz	r0, 80063dc <__smakebuf_r+0x44>
 80063c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063cc:	059a      	lsls	r2, r3, #22
 80063ce:	d4ef      	bmi.n	80063b0 <__smakebuf_r+0x18>
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	e7e3      	b.n	80063a4 <__smakebuf_r+0xc>
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <__smakebuf_r+0x7c>)
 80063de:	62b3      	str	r3, [r6, #40]	; 0x28
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	6120      	str	r0, [r4, #16]
 80063ee:	6163      	str	r3, [r4, #20]
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x74>
 80063f4:	4630      	mov	r0, r6
 80063f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063fa:	f000 f8d1 	bl	80065a0 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x74>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a0      	ldrh	r0, [r4, #12]
 800640e:	4305      	orrs	r5, r0
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cd      	b.n	80063b0 <__smakebuf_r+0x18>
 8006414:	080061ad 	.word	0x080061ad

08006418 <_malloc_usable_size_r>:
 8006418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641c:	1f18      	subs	r0, r3, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfbc      	itt	lt
 8006422:	580b      	ldrlt	r3, [r1, r0]
 8006424:	18c0      	addlt	r0, r0, r3
 8006426:	4770      	bx	lr

08006428 <_raise_r>:
 8006428:	291f      	cmp	r1, #31
 800642a:	b538      	push	{r3, r4, r5, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	d904      	bls.n	800643c <_raise_r+0x14>
 8006432:	2316      	movs	r3, #22
 8006434:	6003      	str	r3, [r0, #0]
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800643e:	b112      	cbz	r2, 8006446 <_raise_r+0x1e>
 8006440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006444:	b94b      	cbnz	r3, 800645a <_raise_r+0x32>
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f830 	bl	80064ac <_getpid_r>
 800644c:	462a      	mov	r2, r5
 800644e:	4601      	mov	r1, r0
 8006450:	4620      	mov	r0, r4
 8006452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006456:	f000 b817 	b.w	8006488 <_kill_r>
 800645a:	2b01      	cmp	r3, #1
 800645c:	d00a      	beq.n	8006474 <_raise_r+0x4c>
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	d103      	bne.n	800646a <_raise_r+0x42>
 8006462:	2316      	movs	r3, #22
 8006464:	6003      	str	r3, [r0, #0]
 8006466:	2001      	movs	r0, #1
 8006468:	e7e7      	b.n	800643a <_raise_r+0x12>
 800646a:	2400      	movs	r4, #0
 800646c:	4628      	mov	r0, r5
 800646e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006472:	4798      	blx	r3
 8006474:	2000      	movs	r0, #0
 8006476:	e7e0      	b.n	800643a <_raise_r+0x12>

08006478 <raise>:
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <raise+0xc>)
 800647a:	4601      	mov	r1, r0
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f7ff bfd3 	b.w	8006428 <_raise_r>
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010

08006488 <_kill_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	2300      	movs	r3, #0
 800648c:	4d06      	ldr	r5, [pc, #24]	; (80064a8 <_kill_r+0x20>)
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	f7fb f90c 	bl	80016b2 <_kill>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d102      	bne.n	80064a4 <_kill_r+0x1c>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b103      	cbz	r3, 80064a4 <_kill_r+0x1c>
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	bd38      	pop	{r3, r4, r5, pc}
 80064a6:	bf00      	nop
 80064a8:	20000314 	.word	0x20000314

080064ac <_getpid_r>:
 80064ac:	f7fb b8fa 	b.w	80016a4 <_getpid>

080064b0 <__sread>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	460c      	mov	r4, r1
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 f894 	bl	80065e4 <_read_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	bfab      	itete	ge
 80064c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064c2:	89a3      	ldrhlt	r3, [r4, #12]
 80064c4:	181b      	addge	r3, r3, r0
 80064c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ca:	bfac      	ite	ge
 80064cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80064ce:	81a3      	strhlt	r3, [r4, #12]
 80064d0:	bd10      	pop	{r4, pc}

080064d2 <__swrite>:
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	461f      	mov	r7, r3
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	4605      	mov	r5, r0
 80064dc:	05db      	lsls	r3, r3, #23
 80064de:	460c      	mov	r4, r1
 80064e0:	4616      	mov	r6, r2
 80064e2:	d505      	bpl.n	80064f0 <__swrite+0x1e>
 80064e4:	2302      	movs	r3, #2
 80064e6:	2200      	movs	r2, #0
 80064e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ec:	f000 f868 	bl	80065c0 <_lseek_r>
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	4632      	mov	r2, r6
 80064f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	4628      	mov	r0, r5
 80064fc:	463b      	mov	r3, r7
 80064fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	f000 b817 	b.w	8006538 <_write_r>

0800650a <__sseek>:
 800650a:	b510      	push	{r4, lr}
 800650c:	460c      	mov	r4, r1
 800650e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006512:	f000 f855 	bl	80065c0 <_lseek_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	bf15      	itete	ne
 800651c:	6560      	strne	r0, [r4, #84]	; 0x54
 800651e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006526:	81a3      	strheq	r3, [r4, #12]
 8006528:	bf18      	it	ne
 800652a:	81a3      	strhne	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__sclose>:
 800652e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006532:	f000 b813 	b.w	800655c <_close_r>
	...

08006538 <_write_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	2200      	movs	r2, #0
 8006542:	4d05      	ldr	r5, [pc, #20]	; (8006558 <_write_r+0x20>)
 8006544:	602a      	str	r2, [r5, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	f7fb f8ea 	bl	8001720 <_write>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_write_r+0x1e>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	b103      	cbz	r3, 8006556 <_write_r+0x1e>
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20000314 	.word	0x20000314

0800655c <_close_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	2300      	movs	r3, #0
 8006560:	4d05      	ldr	r5, [pc, #20]	; (8006578 <_close_r+0x1c>)
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fb f8f6 	bl	8001758 <_close>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_close_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_close_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000314 	.word	0x20000314

0800657c <_fstat_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	2300      	movs	r3, #0
 8006580:	4d06      	ldr	r5, [pc, #24]	; (800659c <_fstat_r+0x20>)
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	f7fb f8f0 	bl	800176e <_fstat>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d102      	bne.n	8006598 <_fstat_r+0x1c>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	b103      	cbz	r3, 8006598 <_fstat_r+0x1c>
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	20000314 	.word	0x20000314

080065a0 <_isatty_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	2300      	movs	r3, #0
 80065a4:	4d05      	ldr	r5, [pc, #20]	; (80065bc <_isatty_r+0x1c>)
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fb f8ee 	bl	800178c <_isatty>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_isatty_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_isatty_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000314 	.word	0x20000314

080065c0 <_lseek_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	4611      	mov	r1, r2
 80065c8:	2200      	movs	r2, #0
 80065ca:	4d05      	ldr	r5, [pc, #20]	; (80065e0 <_lseek_r+0x20>)
 80065cc:	602a      	str	r2, [r5, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f7fb f8e6 	bl	80017a0 <_lseek>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_lseek_r+0x1e>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	b103      	cbz	r3, 80065de <_lseek_r+0x1e>
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	20000314 	.word	0x20000314

080065e4 <_read_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4604      	mov	r4, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	2200      	movs	r2, #0
 80065ee:	4d05      	ldr	r5, [pc, #20]	; (8006604 <_read_r+0x20>)
 80065f0:	602a      	str	r2, [r5, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f7fb f877 	bl	80016e6 <_read>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_read_r+0x1e>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_read_r+0x1e>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	20000314 	.word	0x20000314

08006608 <_init>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr

08006614 <_fini>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr
